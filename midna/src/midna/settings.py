'''
Django settings for midna project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
'''

from pathlib import Path
from os import environ

from .cloudwatch import Boto3CloudWatchHandler


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

if 'SECRET_KEY' in environ:
	SECRET_KEY = environ['SECRET_KEY']
else:
	raise RuntimeError('Could not find a SECRET_KEY in environment')


DEBUG = 'DEBUG' in environ and environ['DEBUG'] == 'true'


if DEBUG:
	ALLOWED_HOSTS = []
elif 'DOMAIN' in environ:
	ALLOWED_HOSTS = [environ['DOMAIN']]
else:
	raise RuntimeError('Could not find a DOMAIN in environment')


# Application definition

INSTALLED_APPS = [
	'deleted_users.apps.DeletedUsersConfig',
	'plans.apps.PlansConfig',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'midna.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'midna.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASE_ROUTERS = ('midna.dbrouters.MySqlRouter',)

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': BASE_DIR / 'db.sqlite3',
	},
	'mysql': {
		'ENGINE': 'django.db.backends.mysql',
		'NAME': environ['DATABASE_NAME'],
		'USER': environ['DATABASE_USER'],
		'PASSWORD': environ['DATABASE_PASS'],
		'HOST': environ['DATABASE_HOST'],
		'PORT': environ['DATABASE_PORT'],
		'OPTIONS': {
			'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
		}
	}
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = '/var/midna/static/inside'


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


ADMIN_URL = 'twilight/'
LOGIN_REDIRECT_URL = f'/{ADMIN_URL}'
LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL
LOGIN_URL = f'{LOGIN_REDIRECT_URL}login/'

if not DEBUG:
	SECURE_HSTS_SECONDS = 60 * 60 * 24 * 30 # Unit is seconds
	SECURE_HSTS_PRELOAD = True
	SECURE_HSTS_INCLUDE_SUBDOMAINS = True
	SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
	SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

	SESSION_COOKIE_SECURE = True
	CSRF_COOKIE_SECURE = True

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'default': {
			'format': Boto3CloudWatchHandler.FORMAT,
			'style': '%',
		},
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'default',
		},
		'cloudwatch': {
			'level': 'DEBUG',
			'class': 'midna.cloudwatch.Boto3CloudWatchHandler',
			'formatter': 'default',
		},
	},
	'loggers': {
		'': {
			'handlers': ['console', 'cloudwatch'],
			'level': 'INFO',
			'propagate': False,
		},
		'django': {
			'handlers': ['console', 'cloudwatch'],
			'level': 'INFO',
			'propagate': False,
		},
		'botocore': {
			'handlers': ['console', 'cloudwatch'],
			'level': 'INFO',
			'propagate': False,
		},
		'urllib3': {
			'handlers': ['console', 'cloudwatch'],
			'level': 'INFO',
			'propagate': False,
		},
	}
}
