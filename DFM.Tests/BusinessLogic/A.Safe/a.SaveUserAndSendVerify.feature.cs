// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.A_Safe
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("a. Creation of User")]
    public partial class A_CreationOfUserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveUserAndSendVerify.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "a. Creation of User", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save user without e-mail (E)")]
        public virtual void _01_SaveUserWithoutE_MailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save user without e-mail (E)", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table1.AddRow(new string[] {
                        "",
                        "password"});
#line 4
 testRunner.Given("I have this user to create", ((string)(null)), table1);
#line 7
 testRunner.When("I try to save the user");
#line 8
 testRunner.Then("I will receive this core error: UserEmailInvalid");
#line 9
 testRunner.And("the user will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save user without password (E)")]
        public virtual void _02_SaveUserWithoutPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save user without password (E)", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table2.AddRow(new string[] {
                        "test@dontflymoney.com",
                        ""});
#line 12
 testRunner.Given("I have this user to create", ((string)(null)), table2);
#line 15
 testRunner.When("I try to save the user");
#line 16
 testRunner.Then("I will receive this core error: UserPasswordRequired");
#line 17
 testRunner.And("the user will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save user with invalid e-mail (E)")]
        public virtual void _03_SaveUserWithInvalidE_MailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save user with invalid e-mail (E)", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table3.AddRow(new string[] {
                        "test",
                        "password"});
#line 20
 testRunner.Given("I have this user to create", ((string)(null)), table3);
#line 23
 testRunner.When("I try to save the user");
#line 24
 testRunner.Then("I will receive this core error: UserEmailInvalid");
#line 25
 testRunner.And("the user will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save user with repeated e-mail (E)")]
        public virtual void _04_SaveUserWithRepeatedE_MailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save user with repeated e-mail (E)", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table4.AddRow(new string[] {
                        "repeated@dontflymoney.com",
                        "password"});
#line 28
 testRunner.Given("I have this user to create", ((string)(null)), table4);
#line 31
 testRunner.And("I already have created this user");
#line 32
 testRunner.When("I try to save the user");
#line 33
 testRunner.Then("I will receive this core error: UserAlreadyExists");
#line 34
 testRunner.And("the user will not be changed");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Save user too large e-mail (E)")]
        public virtual void _05_SaveUserTooLargeE_MailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Save user too large e-mail (E)", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table5.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh@dontflymoney.com",
                        "password"});
#line 37
 testRunner.Given("I have this user to create", ((string)(null)), table5);
#line 40
 testRunner.When("I try to save the user");
#line 41
 testRunner.Then("I will receive this core error: TooLargeData");
#line 42
 testRunner.And("the user will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Save user with exactly length e-mail (S)")]
        public virtual void _98_SaveUserWithExactlyLengthE_MailS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Save user with exactly length e-mail (S)", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table6.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg@dontflymoney.com",
                        "password"});
#line 46
 testRunner.Given("I have this user to create", ((string)(null)), table6);
#line 49
 testRunner.When("I try to save the user");
#line 50
 testRunner.Then("I will receive no core error");
#line 51
 testRunner.And("the user will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Save user with info all right (S)")]
        public virtual void _99_SaveUserWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Save user with info all right (S)", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table7.AddRow(new string[] {
                        "test@dontflymoney.com",
                        "password"});
#line 54
 testRunner.Given("I have this user to create", ((string)(null)), table7);
#line 57
 testRunner.When("I try to save the user");
#line 58
 testRunner.Then("I will receive no core error");
#line 59
 testRunner.And("the user will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
