// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.C_Money
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("b. Update move")]
    public partial class B_UpdateMoveFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "b.UpdateMove.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "b. Update move", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an user");
#line 5
 testRunner.And("I have two accounts");
#line 6
 testRunner.And("I have a category");
#line 7
 testRunner.And("I have a move with value 10");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Update the move date in 1 day")]
        public virtual void _01_UpdateTheMoveDateIn1Day()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Update the move date in 1 day", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I change the move date in -1 day");
#line 11
 testRunner.When("I update the move");
#line 12
 testRunner.Then("I will receive no core error");
#line 13
 testRunner.And("the accountOut value will not change");
#line 14
 testRunner.And("the month-category-accountOut value will not change");
#line 15
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Update the move date in 1 month")]
        public virtual void _02_UpdateTheMoveDateIn1Month()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Update the move date in 1 month", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I change the move date in -1 month");
#line 19
 testRunner.When("I update the move");
#line 20
 testRunner.Then("I will receive no core error");
#line 21
 testRunner.And("the accountOut value will not change");
#line 22
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 23
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 24
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Update the move date in 1 year")]
        public virtual void _03_UpdateTheMoveDateIn1Year()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Update the move date in 1 year", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I change the move date in -1 year");
#line 28
 testRunner.When("I update the move");
#line 29
 testRunner.Then("I will receive no core error");
#line 30
 testRunner.And("the accountOut value will not change");
#line 31
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 32
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 33
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 34
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Update the move Category")]
        public virtual void _04_UpdateTheMoveCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Update the move Category", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I change the category of the move");
#line 39
 testRunner.When("I update the move");
#line 40
 testRunner.Then("I will receive no core error");
#line 41
 testRunner.And("the accountOut value will not change");
#line 42
 testRunner.And("the month-accountOut value will not change");
#line 43
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 44
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 45
 testRunner.And("the year-accountOut value will not change");
#line 46
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 47
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Update the move Account")]
        public virtual void _05_UpdateTheMoveAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Update the move Account", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I change the account out of the move");
#line 52
 testRunner.When("I update the move");
#line 53
 testRunner.Then("I will receive no core error");
#line 54
 testRunner.And("the new-accountOut value will change in -10");
#line 55
 testRunner.And("the old-accountOut value will change in 10");
#line 56
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 57
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 58
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 59
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
