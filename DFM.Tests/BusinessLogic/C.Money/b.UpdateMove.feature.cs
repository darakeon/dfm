// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.C_Money
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("b. Update move")]
    public partial class B_UpdateMoveFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "b.UpdateMove.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "b. Update move", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an user");
#line 5
 testRunner.And("I have two accounts");
#line 6
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Update the move date in 1 day")]
        public virtual void _01_UpdateTheMoveDateIn1Day()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Update the move date in 1 day", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have a move with value 10 (Out)");
#line 10
 testRunner.And("I change the move date in -1 day");
#line 11
 testRunner.When("I update the move");
#line 12
 testRunner.Then("I will receive no core error");
#line 13
 testRunner.And("the accountOut value will not change");
#line 14
 testRunner.And("the month-category-accountOut value will not change");
#line 15
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Update the move date in 1 month")]
        public virtual void _02_UpdateTheMoveDateIn1Month()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Update the move date in 1 month", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have a move with value 10 (Out)");
#line 19
 testRunner.And("I change the move date in -1 month");
#line 20
 testRunner.When("I update the move");
#line 21
 testRunner.Then("I will receive no core error");
#line 22
 testRunner.And("the accountOut value will not change");
#line 23
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 24
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 25
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Update the move date in 1 year")]
        public virtual void _03_UpdateTheMoveDateIn1Year()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Update the move date in 1 year", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have a move with value 10 (Out)");
#line 29
 testRunner.And("I change the move date in -1 year");
#line 30
 testRunner.When("I update the move");
#line 31
 testRunner.Then("I will receive no core error");
#line 32
 testRunner.And("the accountOut value will not change");
#line 33
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 34
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 35
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 36
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Update the move Category")]
        public virtual void _04_UpdateTheMoveCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Update the move Category", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have a move with value 10 (Out)");
#line 41
 testRunner.And("I change the category of the move");
#line 42
 testRunner.When("I update the move");
#line 43
 testRunner.Then("I will receive no core error");
#line 44
 testRunner.And("the accountOut value will not change");
#line 45
 testRunner.And("the month-accountOut value will not change");
#line 46
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 47
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 48
 testRunner.And("the year-accountOut value will not change");
#line 49
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 50
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Update the move Account Out")]
        public virtual void _05_UpdateTheMoveAccountOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Update the move Account Out", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have a move with value 10 (Out)");
#line 55
 testRunner.And("I change the account out of the move");
#line 56
 testRunner.When("I update the move");
#line 57
 testRunner.Then("I will receive no core error");
#line 58
 testRunner.And("the new-accountOut value will change in -10");
#line 59
 testRunner.And("the old-accountOut value will change in 10");
#line 60
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 61
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 62
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 63
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06. Update the move Account In")]
        public virtual void _06_UpdateTheMoveAccountIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. Update the move Account In", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I have a move with value 10 (In)");
#line 68
 testRunner.And("I change the account in of the move");
#line 69
 testRunner.When("I update the move");
#line 70
 testRunner.Then("I will receive no core error");
#line 71
 testRunner.And("the new-accountIn value will change in 10");
#line 72
 testRunner.And("the old-accountIn value will change in -10");
#line 73
 testRunner.And("the new-month-category-accountIn value will change in 10");
#line 74
 testRunner.And("the old-month-category-accountIn value will change in -10");
#line 75
 testRunner.And("the new-year-category-accountIn value will change in 10");
#line 76
 testRunner.And("the old-year-category-accountIn value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07. Update the move Account Transfer (Out)")]
        public virtual void _07_UpdateTheMoveAccountTransferOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07. Update the move Account Transfer (Out)", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("I have a move with value 10 (Transfer)");
#line 81
 testRunner.And("I change the account out of the move");
#line 82
 testRunner.When("I update the move");
#line 83
 testRunner.Then("I will receive no core error");
#line 84
 testRunner.And("the new-accountOut value will change in -10");
#line 85
 testRunner.And("the old-accountOut value will change in 10");
#line 86
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 87
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 88
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 89
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08. Update the move Account Transfer (In)")]
        public virtual void _08_UpdateTheMoveAccountTransferIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08. Update the move Account Transfer (In)", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I have a move with value 10 (Transfer)");
#line 94
 testRunner.And("I change the account in of the move");
#line 95
 testRunner.When("I update the move");
#line 96
 testRunner.Then("I will receive no core error");
#line 97
 testRunner.And("the new-accountIn value will change in 10");
#line 98
 testRunner.And("the old-accountIn value will change in -10");
#line 99
 testRunner.And("the new-month-category-accountIn value will change in 10");
#line 100
 testRunner.And("the old-month-category-accountIn value will change in -10");
#line 101
 testRunner.And("the new-year-category-accountIn value will change in 10");
#line 102
 testRunner.And("the old-year-category-accountIn value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09. Update the move Account Transfer (Both)")]
        public virtual void _09_UpdateTheMoveAccountTransferBoth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09. Update the move Account Transfer (Both)", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I have a move with value 10 (Transfer)");
#line 107
 testRunner.And("I change the account out of the move");
#line 108
 testRunner.And("I change the account in of the move");
#line 109
 testRunner.When("I update the move");
#line 110
 testRunner.Then("I will receive no core error");
#line 111
 testRunner.And("the new-accountOut value will change in -10");
#line 112
 testRunner.And("the old-accountOut value will change in 10");
#line 113
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 114
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 115
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line 116
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line 117
 testRunner.And("the new-accountIn value will change in 10");
#line 118
 testRunner.And("the old-accountIn value will change in -10");
#line 119
 testRunner.And("the new-month-category-accountIn value will change in 10");
#line 120
 testRunner.And("the old-month-category-accountIn value will change in -10");
#line 121
 testRunner.And("the new-year-category-accountIn value will change in 10");
#line 122
 testRunner.And("the old-year-category-accountIn value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10. Update the move Out to In")]
        public virtual void _10_UpdateTheMoveOutToIn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10. Update the move Out to In", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I have a move with value 10 (Out)");
#line 127
 testRunner.And("I change the move out to in");
#line 128
 testRunner.When("I update the move");
#line 129
 testRunner.Then("I will receive no core error");
#line 130
 testRunner.And("the old-accountOut value will change in 10");
#line 131
 testRunner.And("the new-accountIn value will change in 10");
#line 132
 testRunner.And("the old-month-category-accountOut value will change in -10");
#line 133
 testRunner.And("the new-month-category-accountIn value will change in 10");
#line 134
 testRunner.And("the old-year-category-accountOut value will change in -10");
#line 135
 testRunner.And("the new-year-category-accountIn value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Update the move In to Out")]
        public virtual void _11_UpdateTheMoveInToOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Update the move In to Out", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 139
 testRunner.Given("I have a move with value 10 (In)");
#line 140
 testRunner.And("I change the move in to out");
#line 141
 testRunner.When("I update the move");
#line 142
 testRunner.Then("I will receive no core error");
#line 143
 testRunner.And("the old-accountIn value will change in -10");
#line 144
 testRunner.And("the new-accountOut value will change in -10");
#line 145
 testRunner.And("the old-month-category-accountIn value will change in -10");
#line 146
 testRunner.And("the new-month-category-accountOut value will change in 10");
#line 147
 testRunner.And("the old-year-category-accountIn value will change in -10");
#line 148
 testRunner.And("the new-year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
