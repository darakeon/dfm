// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.C_Money
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("a. Creation of Move")]
    public partial class A_CreationOfMoveFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveMove.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "a. Creation of Move", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I have two accounts");
#line 6
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save without Description (E)")]
        public virtual void _01_SaveWithoutDescriptionE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save without Description (E)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table1.AddRow(new string[] {
                        "",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 9
 testRunner.Given("I have this move to create", ((string)(null)), table1);
#line 12
 testRunner.And("it has no Details");
#line 13
 testRunner.And("it has a Category");
#line 14
 testRunner.And("it has an Account Out");
#line 15
 testRunner.And("it has no Account In");
#line 16
 testRunner.When("I try to save the move");
#line 17
 testRunner.Then("I will receive this core error: MoveDescriptionRequired");
#line 18
 testRunner.And("the move will not be saved");
#line 19
 testRunner.And("the accountOut value will not change");
#line 20
 testRunner.And("the month-category-accountOut value will not change");
#line 21
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save without Date (E)")]
        public virtual void _02_SaveWithoutDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save without Date (E)", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table2.AddRow(new string[] {
                        "Move Ca02",
                        "",
                        "Out",
                        "10"});
#line 24
 testRunner.Given("I have this move to create", ((string)(null)), table2);
#line 27
 testRunner.And("it has no Details");
#line 28
 testRunner.And("it has a Category");
#line 29
 testRunner.And("it has an Account Out");
#line 30
 testRunner.And("it has no Account In");
#line 31
 testRunner.When("I try to save the move");
#line 32
 testRunner.Then("I will receive this core error: MoveDateRequired");
#line 33
 testRunner.And("the move will not be saved");
#line 34
 testRunner.And("the accountOut value will not change");
#line 35
 testRunner.And("the month-category-accountOut value will not change");
#line 36
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save with future Date (E)")]
        public virtual void _03_SaveWithFutureDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save with future Date (E)", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table3.AddRow(new string[] {
                        "Move Ca03",
                        "2099-03-31",
                        "Out",
                        "10"});
#line 39
 testRunner.Given("I have this move to create", ((string)(null)), table3);
#line 42
 testRunner.And("it has no Details");
#line 43
 testRunner.And("it has a Category");
#line 44
 testRunner.And("it has an Account Out");
#line 45
 testRunner.And("it has no Account In");
#line 46
 testRunner.When("I try to save the move");
#line 47
 testRunner.Then("I will receive this core error: MoveDateInvalid");
#line 48
 testRunner.And("the move will not be saved");
#line 49
 testRunner.And("the accountOut value will not change");
#line 50
 testRunner.And("the month-category-accountOut value will not change");
#line 51
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save without Category (E)")]
        public virtual void _04_SaveWithoutCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save without Category (E)", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table4.AddRow(new string[] {
                        "Move Ca04",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 54
 testRunner.Given("I have this move to create", ((string)(null)), table4);
#line 57
 testRunner.And("it has no Details");
#line 58
 testRunner.And("it has no Category");
#line 59
 testRunner.And("it has an Account Out");
#line 60
 testRunner.And("it has no Account In");
#line 61
 testRunner.When("I try to save the move");
#line 62
 testRunner.Then("I will receive this core error: InvalidCategory");
#line 63
 testRunner.And("the move will not be saved");
#line 64
 testRunner.And("the accountOut value will not change");
#line 65
 testRunner.And("the month-category-accountOut value will not change");
#line 66
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Save with unknown Category (E)")]
        public virtual void _05_SaveWithUnknownCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Save with unknown Category (E)", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table5.AddRow(new string[] {
                        "Move Ca05",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 69
 testRunner.Given("I have this move to create", ((string)(null)), table5);
#line 72
 testRunner.And("it has no Details");
#line 73
 testRunner.And("it has an unknown Category");
#line 74
 testRunner.And("it has an Account Out");
#line 75
 testRunner.And("it has no Account In");
#line 76
 testRunner.When("I try to save the move");
#line 77
 testRunner.Then("I will receive this core error: InvalidCategory");
#line 78
 testRunner.And("the move will not be saved");
#line 79
 testRunner.And("the accountOut value will not change");
#line 80
 testRunner.And("the month-category-accountOut value will not change");
#line 81
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06. Save with Description too large (E)")]
        public virtual void _06_SaveWithDescriptionTooLargeE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. Save with Description too large (E)", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table6.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 84
 testRunner.Given("I have this move to create", ((string)(null)), table6);
#line 87
 testRunner.And("it has no Details");
#line 88
 testRunner.And("it has a Category");
#line 89
 testRunner.And("it has an Account Out");
#line 90
 testRunner.And("it has no Account In");
#line 91
 testRunner.When("I try to save the move");
#line 92
 testRunner.Then("I will receive this core error: TooLargeData");
#line 93
 testRunner.And("the move will not be saved");
#line 94
 testRunner.And("the accountOut value will not change");
#line 95
 testRunner.And("the month-category-accountOut value will not change");
#line 96
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _11_SaveWithNatureOutAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table7.AddRow(new string[] {
                        "Move Ca11",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 101
 testRunner.Given("I have this move to create", ((string)(null)), table7);
#line 104
 testRunner.And("it has no Details");
#line 105
 testRunner.And("it has a Category");
#line 106
 testRunner.And("it has no Account Out");
#line 107
 testRunner.And("it has no Account In");
#line 108
 testRunner.When("I try to save the move");
#line 109
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 110
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _12_SaveWithNatureOutAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table8.AddRow(new string[] {
                        "Move Ca12",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 113
 testRunner.Given("I have this move to create", ((string)(null)), table8);
#line 116
 testRunner.And("it has no Details");
#line 117
 testRunner.And("it has a Category");
#line 118
 testRunner.And("it has an Account Out");
#line 119
 testRunner.And("it has an Account In");
#line 120
 testRunner.When("I try to save the move");
#line 121
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 122
 testRunner.And("the move will not be saved");
#line 123
 testRunner.And("the accountOut value will not change");
#line 124
 testRunner.And("the month-category-accountOut value will not change");
#line 125
 testRunner.And("the year-category-accountOut value will not change");
#line 126
 testRunner.And("the accountIn value will not change");
#line 127
 testRunner.And("the month-category-accountIn value will not change");
#line 128
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _13_SaveWithNatureOutAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table9.AddRow(new string[] {
                        "Move Ca13",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 131
 testRunner.Given("I have this move to create", ((string)(null)), table9);
#line 134
 testRunner.And("it has no Details");
#line 135
 testRunner.And("it has a Category");
#line 136
 testRunner.And("it has no Account Out");
#line 137
 testRunner.And("it has an Account In");
#line 138
 testRunner.When("I try to save the move");
#line 139
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 140
 testRunner.And("the move will not be saved");
#line 141
 testRunner.And("the accountIn value will not change");
#line 142
 testRunner.And("the month-category-accountIn value will not change");
#line 143
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)")]
        public virtual void _14_SaveWithNatureOutAccountOutUnknownAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table10.AddRow(new string[] {
                        "Move Ca14",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 146
 testRunner.Given("I have this move to create", ((string)(null)), table10);
#line 149
 testRunner.And("it has no Details");
#line 150
 testRunner.And("it has a Category");
#line 151
 testRunner.And("it has an unknown Account Out");
#line 152
 testRunner.And("it has no Account In");
#line 153
 testRunner.When("I try to save the move");
#line 154
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 155
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _21_SaveWithNatureInAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 159
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table11.AddRow(new string[] {
                        "Move Ca21",
                        "2012-03-31",
                        "In",
                        "10"});
#line 160
 testRunner.Given("I have this move to create", ((string)(null)), table11);
#line 163
 testRunner.And("it has no Details");
#line 164
 testRunner.And("it has a Category");
#line 165
 testRunner.And("it has no Account Out");
#line 166
 testRunner.And("it has no Account In");
#line 167
 testRunner.When("I try to save the move");
#line 168
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 169
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _22_SaveWithNatureInAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 171
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table12.AddRow(new string[] {
                        "Move Ca22",
                        "2012-03-31",
                        "In",
                        "10"});
#line 172
 testRunner.Given("I have this move to create", ((string)(null)), table12);
#line 175
 testRunner.And("it has no Details");
#line 176
 testRunner.And("it has a Category");
#line 177
 testRunner.And("it has an Account Out");
#line 178
 testRunner.And("it has an Account In");
#line 179
 testRunner.When("I try to save the move");
#line 180
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 181
 testRunner.And("the move will not be saved");
#line 182
 testRunner.And("the accountOut value will not change");
#line 183
 testRunner.And("the month-category-accountOut value will not change");
#line 184
 testRunner.And("the year-category-accountOut value will not change");
#line 185
 testRunner.And("the accountIn value will not change");
#line 186
 testRunner.And("the month-category-accountIn value will not change");
#line 187
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _23_SaveWithNatureInAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 189
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table13.AddRow(new string[] {
                        "Move Ca23",
                        "2012-03-31",
                        "In",
                        "10"});
#line 190
 testRunner.Given("I have this move to create", ((string)(null)), table13);
#line 193
 testRunner.And("it has no Details");
#line 194
 testRunner.And("it has a Category");
#line 195
 testRunner.And("it has an Account Out");
#line 196
 testRunner.And("it has no Account In");
#line 197
 testRunner.When("I try to save the move");
#line 198
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 199
 testRunner.And("the move will not be saved");
#line 200
 testRunner.And("the accountOut value will not change");
#line 201
 testRunner.And("the month-category-accountOut value will not change");
#line 202
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)")]
        public virtual void _24_SaveWithNatureInAccountOutNoAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 204
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table14.AddRow(new string[] {
                        "Move Ca24",
                        "2012-03-31",
                        "In",
                        "10"});
#line 205
 testRunner.Given("I have this move to create", ((string)(null)), table14);
#line 208
 testRunner.And("it has no Details");
#line 209
 testRunner.And("it has a Category");
#line 210
 testRunner.And("it has no Account Out");
#line 211
 testRunner.And("it has an unknown Account In");
#line 212
 testRunner.When("I try to save the move");
#line 213
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 214
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _31_SaveWithNatureTransferAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 218
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table15.AddRow(new string[] {
                        "Move Ca31",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 219
 testRunner.Given("I have this move to create", ((string)(null)), table15);
#line 222
 testRunner.And("it has no Details");
#line 223
 testRunner.And("it has a Category");
#line 224
 testRunner.And("it has no Account Out");
#line 225
 testRunner.And("it has no Account In");
#line 226
 testRunner.When("I try to save the move");
#line 227
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 228
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _32_SaveWithNatureTransferAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 230
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table16.AddRow(new string[] {
                        "Move Ca32",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 231
 testRunner.Given("I have this move to create", ((string)(null)), table16);
#line 234
 testRunner.And("it has no Details");
#line 235
 testRunner.And("it has a Category");
#line 236
 testRunner.And("it has no Account Out");
#line 237
 testRunner.And("it has an Account In");
#line 238
 testRunner.When("I try to save the move");
#line 239
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 240
 testRunner.And("the move will not be saved");
#line 241
 testRunner.And("the accountIn value will not change");
#line 242
 testRunner.And("the month-category-accountIn value will not change");
#line 243
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _33_SaveWithNatureTransferAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 245
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table17.AddRow(new string[] {
                        "Move Ca33",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 246
 testRunner.Given("I have this move to create", ((string)(null)), table17);
#line 249
 testRunner.And("it has no Details");
#line 250
 testRunner.And("it has a Category");
#line 251
 testRunner.And("it has an Account Out");
#line 252
 testRunner.And("it has no Account In");
#line 253
 testRunner.When("I try to save the move");
#line 254
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 255
 testRunner.And("the move will not be saved");
#line 256
 testRunner.And("the accountOut value will not change");
#line 257
 testRunner.And("the month-category-accountOut value will not change");
#line 258
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)")]
        public virtual void _34_SaveWithNatureTransferAccountOutYesAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 260
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table18.AddRow(new string[] {
                        "Move Ca34",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 261
 testRunner.Given("I have this move to create", ((string)(null)), table18);
#line 264
 testRunner.And("it has no Details");
#line 265
 testRunner.And("it has a Category");
#line 266
 testRunner.And("it has an Account Out");
#line 267
 testRunner.And("it has an unknown Account In");
#line 268
 testRunner.When("I try to save the move");
#line 269
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 270
 testRunner.And("the move will not be saved");
#line 271
 testRunner.And("the accountOut value will not change");
#line 272
 testRunner.And("the month-category-accountOut value will not change");
#line 273
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)")]
        public virtual void _35_SaveWithNatureTransferAccountOutUnknownAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)", ((string[])(null)));
#line 275
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table19.AddRow(new string[] {
                        "Move Ca35",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 276
 testRunner.Given("I have this move to create", ((string)(null)), table19);
#line 279
 testRunner.And("it has no Details");
#line 280
 testRunner.And("it has a Category");
#line 281
 testRunner.And("it has an unknown Account Out");
#line 282
 testRunner.And("it has an Account In");
#line 283
 testRunner.When("I try to save the move");
#line 284
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 285
 testRunner.And("the move will not be saved");
#line 286
 testRunner.And("the accountIn value will not change");
#line 287
 testRunner.And("the month-category-accountIn value will not change");
#line 288
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)")]
        public virtual void _36_SaveWithNatureTransferAccountOutYesAccountInEqualToOutE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)", ((string[])(null)));
#line 290
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table20.AddRow(new string[] {
                        "Move Ca36",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 291
 testRunner.Given("I have this move to create", ((string)(null)), table20);
#line 294
 testRunner.And("it has no Details");
#line 295
 testRunner.And("it has a Category");
#line 296
 testRunner.And("it has an Account Out");
#line 297
 testRunner.And("it has an Account In equal to Out");
#line 298
 testRunner.When("I try to save the move");
#line 299
 testRunner.Then("I will receive this core error: MoveCircularTransfer");
#line 300
 testRunner.And("the move will not be saved");
#line 301
 testRunner.And("the accountOut value will not change");
#line 302
 testRunner.And("the month-category-accountOut value will not change");
#line 303
 testRunner.And("the year-category-accountOut value will not change");
#line 304
 testRunner.And("the accountIn value will not change");
#line 305
 testRunner.And("the month-category-accountIn value will not change");
#line 306
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("41. Save without Value or Details (E)")]
        public virtual void _41_SaveWithoutValueOrDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("41. Save without Value or Details (E)", ((string[])(null)));
#line 310
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table21.AddRow(new string[] {
                        "Move Ca41",
                        "2012-03-31",
                        "Out",
                        ""});
#line 311
 testRunner.Given("I have this move to create", ((string)(null)), table21);
#line 314
 testRunner.And("it has no Details");
#line 315
 testRunner.And("it has a Category");
#line 316
 testRunner.And("it has an Account Out");
#line 317
 testRunner.And("it has no Account In");
#line 318
 testRunner.When("I try to save the move");
#line 319
 testRunner.Then("I will receive this core error: MoveValueOrDetailRequired");
#line 320
 testRunner.And("the move will not be saved");
#line 321
 testRunner.And("the accountOut value will not change");
#line 322
 testRunner.And("the month-category-accountOut value will not change");
#line 323
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("42. Save with Value zero and no Details (E)")]
        public virtual void _42_SaveWithValueZeroAndNoDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("42. Save with Value zero and no Details (E)", ((string[])(null)));
#line 325
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table22.AddRow(new string[] {
                        "Move Ca42",
                        "2012-03-31",
                        "Out",
                        "0"});
#line 326
 testRunner.Given("I have this move to create", ((string)(null)), table22);
#line 329
 testRunner.And("it has no Details");
#line 330
 testRunner.And("it has a Category");
#line 331
 testRunner.And("it has an Account Out");
#line 332
 testRunner.And("it has no Account In");
#line 333
 testRunner.When("I try to save the move");
#line 334
 testRunner.Then("I will receive this core error: MoveValueOrDetailRequired");
#line 335
 testRunner.And("the move will not be saved");
#line 336
 testRunner.And("the accountOut value will not change");
#line 337
 testRunner.And("the month-category-accountOut value will not change");
#line 338
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("43. Save without value and without Description in Detail (E)")]
        public virtual void _43_SaveWithoutValueAndWithoutDescriptionInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("43. Save without value and without Description in Detail (E)", ((string[])(null)));
#line 340
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table23.AddRow(new string[] {
                        "Move Ca43",
                        "2012-03-31",
                        "Out",
                        ""});
#line 341
 testRunner.Given("I have this move to create", ((string)(null)), table23);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table24.AddRow(new string[] {
                        "",
                        "1",
                        "10"});
            table24.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 344
 testRunner.And("the move has this details", ((string)(null)), table24);
#line 348
 testRunner.And("it has a Category");
#line 349
 testRunner.And("it has an Account Out");
#line 350
 testRunner.And("it has no Account In");
#line 351
 testRunner.When("I try to save the move");
#line 352
 testRunner.Then("I will receive this core error: MoveDetailDescriptionRequired");
#line 353
 testRunner.And("the move will not be saved");
#line 354
 testRunner.And("the accountOut value will not change");
#line 355
 testRunner.And("the month-category-accountOut value will not change");
#line 356
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("44. Save without value and with Amount zero in Detail (E)")]
        public virtual void _44_SaveWithoutValueAndWithAmountZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("44. Save without value and with Amount zero in Detail (E)", ((string[])(null)));
#line 358
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table25.AddRow(new string[] {
                        "Move Ca44",
                        "2012-03-31",
                        "Out",
                        ""});
#line 359
 testRunner.Given("I have this move to create", ((string)(null)), table25);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table26.AddRow(new string[] {
                        "Detail 1",
                        "0",
                        "10"});
            table26.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 362
 testRunner.And("the move has this details", ((string)(null)), table26);
#line 366
 testRunner.And("it has a Category");
#line 367
 testRunner.And("it has an Account Out");
#line 368
 testRunner.And("it has no Account In");
#line 369
 testRunner.When("I try to save the move");
#line 370
 testRunner.Then("I will receive this core error: MoveDetailAmountRequired");
#line 371
 testRunner.And("the move will not be saved");
#line 372
 testRunner.And("the accountOut value will not change");
#line 373
 testRunner.And("the month-category-accountOut value will not change");
#line 374
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("45. Save without value and with Value zero in Detail (E)")]
        public virtual void _45_SaveWithoutValueAndWithValueZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("45. Save without value and with Value zero in Detail (E)", ((string[])(null)));
#line 376
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table27.AddRow(new string[] {
                        "Move Ca45",
                        "2012-03-31",
                        "Out",
                        ""});
#line 377
 testRunner.Given("I have this move to create", ((string)(null)), table27);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table28.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "0"});
            table28.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 380
 testRunner.And("the move has this details", ((string)(null)), table28);
#line 384
 testRunner.And("it has a Category");
#line 385
 testRunner.And("it has an Account Out");
#line 386
 testRunner.And("it has no Account In");
#line 387
 testRunner.When("I try to save the move");
#line 388
 testRunner.Then("I will receive this core error: MoveDetailValueRequired");
#line 389
 testRunner.And("the move will not be saved");
#line 390
 testRunner.And("the accountOut value will not change");
#line 391
 testRunner.And("the month-category-accountOut value will not change");
#line 392
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("46. Save with Description too large in Detail (E)")]
        public virtual void _46_SaveWithDescriptionTooLargeInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("46. Save with Description too large in Detail (E)", ((string[])(null)));
#line 394
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table29.AddRow(new string[] {
                        "Move Ca46",
                        "2012-03-31",
                        "Out",
                        ""});
#line 395
 testRunner.Given("I have this move to create", ((string)(null)), table29);
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table30.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy",
                        "1",
                        "10"});
#line 398
 testRunner.And("the move has this details", ((string)(null)), table30);
#line 401
 testRunner.And("it has a Category");
#line 402
 testRunner.And("it has an Account Out");
#line 403
 testRunner.And("it has no Account In");
#line 404
 testRunner.When("I try to save the move");
#line 405
 testRunner.Then("I will receive this core error: TooLargeData");
#line 406
 testRunner.And("the move will not be saved");
#line 407
 testRunner.And("the accountOut value will not change");
#line 408
 testRunner.And("the month-category-accountOut value will not change");
#line 409
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("51. Save with disabled Category (E)")]
        public virtual void _51_SaveWithDisabledCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("51. Save with disabled Category (E)", ((string[])(null)));
#line 413
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table31.AddRow(new string[] {
                        "Move Ca51",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 414
 testRunner.Given("I have this move to create", ((string)(null)), table31);
#line 417
 testRunner.And("it has no Details");
#line 418
 testRunner.And("it has a disabled Category");
#line 419
 testRunner.And("it has an Account Out");
#line 420
 testRunner.And("it has no Account In");
#line 421
 testRunner.When("I try to save the move");
#line 422
 testRunner.Then("I will receive this core error: DisabledCategory");
#line 423
 testRunner.And("the move will not be saved");
#line 424
 testRunner.And("the accountOut value will not change");
#line 425
 testRunner.And("the month-category-accountOut value will not change");
#line 426
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("52. Save with closed AccountOut (E)")]
        public virtual void _52_SaveWithClosedAccountOutE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("52. Save with closed AccountOut (E)", ((string[])(null)));
#line 428
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table32.AddRow(new string[] {
                        "Move Ca52",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 429
 testRunner.Given("I have this move to create", ((string)(null)), table32);
#line 432
 testRunner.And("it has no Details");
#line 433
 testRunner.And("it has a Category");
#line 434
 testRunner.And("it has a closed Account Out");
#line 435
 testRunner.And("it has no Account In");
#line 436
 testRunner.When("I try to save the move");
#line 437
 testRunner.Then("I will receive this core error: ClosedAccount");
#line 438
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("53. Save with closed AccountOut (E)")]
        public virtual void _53_SaveWithClosedAccountOutE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("53. Save with closed AccountOut (E)", ((string[])(null)));
#line 440
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table33.AddRow(new string[] {
                        "Move Ca53",
                        "2012-03-31",
                        "In",
                        "10"});
#line 441
 testRunner.Given("I have this move to create", ((string)(null)), table33);
#line 444
 testRunner.And("it has no Details");
#line 445
 testRunner.And("it has a Category");
#line 446
 testRunner.And("it has no Account Out");
#line 447
 testRunner.And("it has a closed Account In");
#line 448
 testRunner.When("I try to save the move");
#line 449
 testRunner.Then("I will receive this core error: ClosedAccount");
#line 450
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Save with info all right (Out) (S)")]
        public virtual void _91_SaveWithInfoAllRightOutS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Save with info all right (Out) (S)", ((string[])(null)));
#line 454
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table34.AddRow(new string[] {
                        "Move Ca91",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 455
 testRunner.Given("I have this move to create", ((string)(null)), table34);
#line 458
 testRunner.And("it has no Details");
#line 459
 testRunner.And("it has a Category");
#line 460
 testRunner.And("it has an Account Out");
#line 461
 testRunner.And("it has no Account In");
#line 462
 testRunner.When("I try to save the move");
#line 463
 testRunner.Then("I will receive no core error");
#line 464
 testRunner.And("the move will be saved");
#line 465
 testRunner.And("the accountOut value will change in -10");
#line 466
 testRunner.And("the month-category-accountOut value will change in 10");
#line 467
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Save with info all right (In) (S)")]
        public virtual void _92_SaveWithInfoAllRightInS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Save with info all right (In) (S)", ((string[])(null)));
#line 469
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table35.AddRow(new string[] {
                        "Move Ca92",
                        "2012-03-31",
                        "In",
                        "10"});
#line 470
 testRunner.Given("I have this move to create", ((string)(null)), table35);
#line 473
 testRunner.And("it has no Details");
#line 474
 testRunner.And("it has a Category");
#line 475
 testRunner.And("it has no Account Out");
#line 476
 testRunner.And("it has an Account In");
#line 477
 testRunner.When("I try to save the move");
#line 478
 testRunner.Then("I will receive no core error");
#line 479
 testRunner.And("the move will be saved");
#line 480
 testRunner.And("the accountIn value will change in 10");
#line 481
 testRunner.And("the month-category-accountIn value will change in 10");
#line 482
 testRunner.And("the year-category-accountIn value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("93. Save with info all right (Transfer) (S)")]
        public virtual void _93_SaveWithInfoAllRightTransferS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("93. Save with info all right (Transfer) (S)", ((string[])(null)));
#line 484
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table36.AddRow(new string[] {
                        "Move Ca93",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 485
 testRunner.Given("I have this move to create", ((string)(null)), table36);
#line 488
 testRunner.And("it has no Details");
#line 489
 testRunner.And("it has a Category");
#line 490
 testRunner.And("it has an Account Out");
#line 491
 testRunner.And("it has an Account In");
#line 492
 testRunner.When("I try to save the move");
#line 493
 testRunner.Then("I will receive no core error");
#line 494
 testRunner.And("the move will be saved");
#line 495
 testRunner.And("the accountOut value will change in -10");
#line 496
 testRunner.And("the month-category-accountOut value will change in 10");
#line 497
 testRunner.And("the year-category-accountOut value will change in 10");
#line 498
 testRunner.And("the accountIn value will change in 10");
#line 499
 testRunner.And("the month-category-accountIn value will change in 10");
#line 500
 testRunner.And("the year-category-accountIn value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("94. Save with info all right (value) (S)")]
        public virtual void _94_SaveWithInfoAllRightValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("94. Save with info all right (value) (S)", ((string[])(null)));
#line 502
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table37.AddRow(new string[] {
                        "Move Ca94",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 503
 testRunner.Given("I have this move to create", ((string)(null)), table37);
#line 506
 testRunner.And("it has no Details");
#line 507
 testRunner.And("it has a Category");
#line 508
 testRunner.And("it has an Account Out");
#line 509
 testRunner.And("it has no Account In");
#line 510
 testRunner.When("I try to save the move");
#line 511
 testRunner.Then("I will receive no core error");
#line 512
 testRunner.And("the move will be saved");
#line 513
 testRunner.And("the accountOut value will change in -10");
#line 514
 testRunner.And("the month-category-accountOut value will change in 10");
#line 515
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Save with info all right (details) (S)")]
        public virtual void _95_SaveWithInfoAllRightDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Save with info all right (details) (S)", ((string[])(null)));
#line 517
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table38.AddRow(new string[] {
                        "Move Ca95",
                        "2012-03-31",
                        "Out",
                        ""});
#line 518
 testRunner.Given("I have this move to create", ((string)(null)), table38);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table39.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "10"});
            table39.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 521
 testRunner.And("the move has this details", ((string)(null)), table39);
#line 525
 testRunner.And("it has a Category");
#line 526
 testRunner.And("it has an Account Out");
#line 527
 testRunner.And("it has no Account In");
#line 528
 testRunner.When("I try to save the move");
#line 529
 testRunner.Then("I will receive no core error");
#line 530
 testRunner.And("the move will be saved");
#line 531
 testRunner.And("the accountOut value will change in -20");
#line 532
 testRunner.And("the month-category-accountOut value will change in 20");
#line 533
 testRunner.And("the year-category-accountOut value will change in 20");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Save negative (value) (S)")]
        public virtual void _96_SaveNegativeValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Save negative (value) (S)", ((string[])(null)));
#line 535
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table40.AddRow(new string[] {
                        "Move Ca96",
                        "2012-03-31",
                        "Out",
                        "-10"});
#line 536
 testRunner.Given("I have this move to create", ((string)(null)), table40);
#line 539
 testRunner.And("it has no Details");
#line 540
 testRunner.And("it has a Category");
#line 541
 testRunner.And("it has an Account Out");
#line 542
 testRunner.And("it has no Account In");
#line 543
 testRunner.When("I try to save the move");
#line 544
 testRunner.Then("I will receive no core error");
#line 545
 testRunner.And("the move will be saved");
#line 546
 testRunner.And("the accountOut value will change in -10");
#line 547
 testRunner.And("the month-category-accountOut value will change in 10");
#line 548
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Save negative (details) (S)")]
        public virtual void _97_SaveNegativeDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Save negative (details) (S)", ((string[])(null)));
#line 550
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table41.AddRow(new string[] {
                        "Move Ca97",
                        "2012-03-31",
                        "Out",
                        ""});
#line 551
 testRunner.Given("I have this move to create", ((string)(null)), table41);
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table42.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "-10"});
            table42.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "-10"});
#line 554
 testRunner.And("the move has this details", ((string)(null)), table42);
#line 558
 testRunner.And("it has a Category");
#line 559
 testRunner.And("it has an Account Out");
#line 560
 testRunner.And("it has no Account In");
#line 561
 testRunner.When("I try to save the move");
#line 562
 testRunner.Then("I will receive no core error");
#line 563
 testRunner.And("the move will be saved");
#line 564
 testRunner.And("the accountOut value will change in -20");
#line 565
 testRunner.And("the month-category-accountOut value will change in 20");
#line 566
 testRunner.And("the year-category-accountOut value will change in 20");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Save with exactly length in Description of Detail (S)")]
        public virtual void _98_SaveWithExactlyLengthInDescriptionOfDetailS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Save with exactly length in Description of Detail (S)", ((string[])(null)));
#line 568
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table43.AddRow(new string[] {
                        "Move Ca98",
                        "2012-03-31",
                        "Out",
                        ""});
#line 569
 testRunner.Given("I have this move to create", ((string)(null)), table43);
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table44.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx",
                        "1",
                        "10"});
#line 572
 testRunner.And("the move has this details", ((string)(null)), table44);
#line 575
 testRunner.And("it has a Category");
#line 576
 testRunner.And("it has an Account Out");
#line 577
 testRunner.And("it has no Account In");
#line 578
 testRunner.When("I try to save the move");
#line 579
 testRunner.Then("I will receive no core error");
#line 580
 testRunner.And("the move will be saved");
#line 581
 testRunner.And("the accountOut value will change in -10");
#line 582
 testRunner.And("the month-category-accountOut value will change in 10");
#line 583
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Save with exactly length in Description (S)")]
        public virtual void _99_SaveWithExactlyLengthInDescriptionS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Save with exactly length in Description (S)", ((string[])(null)));
#line 585
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table45.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 586
 testRunner.Given("I have this move to create", ((string)(null)), table45);
#line 589
 testRunner.And("it has no Details");
#line 590
 testRunner.And("it has a Category");
#line 591
 testRunner.And("it has an Account Out");
#line 592
 testRunner.And("it has no Account In");
#line 593
 testRunner.When("I try to save the move");
#line 594
 testRunner.Then("I will receive no core error");
#line 595
 testRunner.And("the move will be saved");
#line 596
 testRunner.And("the accountOut value will change in -10");
#line 597
 testRunner.And("the month-category-accountOut value will change in 10");
#line 598
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
