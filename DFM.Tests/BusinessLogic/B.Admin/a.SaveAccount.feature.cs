// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.B_Admin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("a. Creation of Account")]
    public partial class A_CreationOfAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveAccount.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "a. Creation of Account", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an user");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save Account without name (E)")]
        public virtual void _01_SaveAccountWithoutNameE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save Account without name (E)", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 7
 testRunner.Given("I have this account to create", ((string)(null)), table1);
#line 10
 testRunner.When("I try to save the account");
#line 11
 testRunner.Then("I will receive this core error: AccountNameRequired");
#line 12
 testRunner.And("the account will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save Account with red limit bigger than yellow limit (E)")]
        public virtual void _02_SaveAccountWithRedLimitBiggerThanYellowLimitE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save Account with red limit bigger than yellow limit (E)", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table2.AddRow(new string[] {
                        "Account Ba02",
                        "100",
                        "200"});
#line 15
 testRunner.Given("I have this account to create", ((string)(null)), table2);
#line 18
 testRunner.When("I try to save the account");
#line 19
 testRunner.Then("I will receive this core error: RedLimitAboveYellowLimit");
#line 20
 testRunner.And("the account will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save Account with name that already exists (E)")]
        public virtual void _03_SaveAccountWithNameThatAlreadyExistsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save Account with name that already exists (E)", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table3.AddRow(new string[] {
                        "Account Ba03",
                        "",
                        ""});
#line 23
 testRunner.Given("I have this account to create", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table4.AddRow(new string[] {
                        "Account Ba03",
                        "200",
                        "100"});
#line 26
 testRunner.And("I already have this account", ((string)(null)), table4);
#line 29
 testRunner.When("I try to save the account");
#line 30
 testRunner.Then("I will receive this core error: AccountAlreadyExists");
#line 31
 testRunner.And("the account will not be changed");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save Account with too big name (E)")]
        public virtual void _04_SaveAccountWithTooBigNameE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save Account with too big name (E)", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table5.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTU",
                        "",
                        ""});
#line 34
 testRunner.Given("I have this account to create", ((string)(null)), table5);
#line 37
 testRunner.When("I try to save the account");
#line 38
 testRunner.Then("I will receive this core error: TooLargeData");
#line 39
 testRunner.And("the account will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Save Account with exactly length name (S)")]
        public virtual void _95_SaveAccountWithExactlyLengthNameS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Save Account with exactly length name (S)", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table6.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRST",
                        "",
                        ""});
#line 43
 testRunner.Given("I have this account to create", ((string)(null)), table6);
#line 46
 testRunner.When("I try to save the account");
#line 47
 testRunner.Then("I will receive no core error");
#line 48
 testRunner.And("the account will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Save Account with info all right (without limits) (S)")]
        public virtual void _96_SaveAccountWithInfoAllRightWithoutLimitsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Save Account with info all right (without limits) (S)", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table7.AddRow(new string[] {
                        "Account Ba96",
                        "",
                        ""});
#line 51
 testRunner.Given("I have this account to create", ((string)(null)), table7);
#line 54
 testRunner.When("I try to save the account");
#line 55
 testRunner.Then("I will receive no core error");
#line 56
 testRunner.And("the account will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Save Account with just yellow limit (S)")]
        public virtual void _97_SaveAccountWithJustYellowLimitS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Save Account with just yellow limit (S)", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table8.AddRow(new string[] {
                        "Account Ba97",
                        "100",
                        ""});
#line 59
 testRunner.Given("I have this account to create", ((string)(null)), table8);
#line 62
 testRunner.When("I try to save the account");
#line 63
 testRunner.Then("I will receive no core error");
#line 64
 testRunner.And("the account will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Save Account with just red limit (S)")]
        public virtual void _98_SaveAccountWithJustRedLimitS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Save Account with just red limit (S)", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table9.AddRow(new string[] {
                        "Account Ba98",
                        "",
                        "100"});
#line 67
 testRunner.Given("I have this account to create", ((string)(null)), table9);
#line 70
 testRunner.When("I try to save the account");
#line 71
 testRunner.Then("I will receive no core error");
#line 72
 testRunner.And("the account will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Save Account with info all right (with limits) (S)")]
        public virtual void _99_SaveAccountWithInfoAllRightWithLimitsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Save Account with info all right (with limits) (S)", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Yellow",
                        "Red"});
            table10.AddRow(new string[] {
                        "Account Ba99",
                        "200",
                        "100"});
#line 75
 testRunner.Given("I have this account to create", ((string)(null)), table10);
#line 78
 testRunner.When("I try to save the account");
#line 79
 testRunner.Then("I will receive no core error");
#line 80
 testRunner.And("the account will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
