// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.D_Robot
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("a. Creation of schedules")]
    public partial class A_CreationOfSchedulesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "a. Creation of schedules", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an user");
#line 5
 testRunner.And("I have two accounts");
#line 6
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save without Description (E)")]
        public virtual void _01_SaveWithoutDescriptionE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save without Description (E)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table1.AddRow(new string[] {
                        "",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 9
 testRunner.Given("I have this move to create", ((string)(null)), table1);
#line 12
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table2.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 13
 testRunner.And("the move has this schedule", ((string)(null)), table2);
#line 16
 testRunner.And("it has a Category");
#line 17
 testRunner.And("it has an Account Out");
#line 18
 testRunner.And("it has no Account In");
#line 19
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table3.AddRow(new string[] {
                        "MoveDescriptionRequired"});
#line 20
 testRunner.Then("I will receive this error", ((string)(null)), table3);
#line 23
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save without Date (E)")]
        public virtual void _02_SaveWithoutDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save without Date (E)", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table4.AddRow(new string[] {
                        "Move Ca02",
                        "",
                        "Out",
                        "10"});
#line 26
 testRunner.Given("I have this move to create", ((string)(null)), table4);
#line 29
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table5.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 30
 testRunner.And("the move has this schedule", ((string)(null)), table5);
#line 33
 testRunner.And("it has a Category");
#line 34
 testRunner.And("it has an Account Out");
#line 35
 testRunner.And("it has no Account In");
#line 36
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table6.AddRow(new string[] {
                        "MoveDateRequired"});
#line 37
 testRunner.Then("I will receive this error", ((string)(null)), table6);
#line 40
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save without Category (E)")]
        public virtual void _03_SaveWithoutCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save without Category (E)", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table7.AddRow(new string[] {
                        "Move Ca04",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 43
 testRunner.Given("I have this move to create", ((string)(null)), table7);
#line 46
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table8.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 47
 testRunner.And("the move has this schedule", ((string)(null)), table8);
#line 50
 testRunner.And("it has no Category");
#line 51
 testRunner.And("it has an Account Out");
#line 52
 testRunner.And("it has no Account In");
#line 53
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table9.AddRow(new string[] {
                        "MoveCategoryRequired"});
#line 54
 testRunner.Then("I will receive this error", ((string)(null)), table9);
#line 57
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save with unknown Category (E)")]
        public virtual void _04_SaveWithUnknownCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save with unknown Category (E)", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table10.AddRow(new string[] {
                        "Move Ca05",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 60
 testRunner.Given("I have this move to create", ((string)(null)), table10);
#line 63
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table11.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 64
 testRunner.And("the move has this schedule", ((string)(null)), table11);
#line 67
 testRunner.And("it has an unknown Category");
#line 68
 testRunner.And("it has an Account Out");
#line 69
 testRunner.And("it has no Account In");
#line 70
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table12.AddRow(new string[] {
                        "MoveCategoryInvalid"});
#line 71
 testRunner.Then("I will receive this error", ((string)(null)), table12);
#line 74
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _11_SaveWithNatureOutAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table13.AddRow(new string[] {
                        "Move Ca11",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 79
 testRunner.Given("I have this move to create", ((string)(null)), table13);
#line 82
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table14.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 83
 testRunner.And("the move has this schedule", ((string)(null)), table14);
#line 86
 testRunner.And("it has a Category");
#line 87
 testRunner.And("it has no Account Out");
#line 88
 testRunner.And("it has no Account In");
#line 89
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table15.AddRow(new string[] {
                        "OutMoveWrong"});
#line 90
 testRunner.Then("I will receive this error", ((string)(null)), table15);
#line 93
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _12_SaveWithNatureOutAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table16.AddRow(new string[] {
                        "Move Ca12",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 96
 testRunner.Given("I have this move to create", ((string)(null)), table16);
#line 99
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table17.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 100
 testRunner.And("the move has this schedule", ((string)(null)), table17);
#line 103
 testRunner.And("it has a Category");
#line 104
 testRunner.And("it has an Account Out");
#line 105
 testRunner.And("it has an Account In");
#line 106
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table18.AddRow(new string[] {
                        "OutMoveWrong"});
#line 107
 testRunner.Then("I will receive this error", ((string)(null)), table18);
#line 110
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _13_SaveWithNatureOutAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table19.AddRow(new string[] {
                        "Move Ca13",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 113
 testRunner.Given("I have this move to create", ((string)(null)), table19);
#line 116
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table20.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 117
 testRunner.And("the move has this schedule", ((string)(null)), table20);
#line 120
 testRunner.And("it has a Category");
#line 121
 testRunner.And("it has no Account Out");
#line 122
 testRunner.And("it has an Account In");
#line 123
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table21.AddRow(new string[] {
                        "OutMoveWrong"});
#line 124
 testRunner.Then("I will receive this error", ((string)(null)), table21);
#line 127
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)")]
        public virtual void _14_SaveWithNatureOutAccountOutUnknownAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table22.AddRow(new string[] {
                        "Move Ca14",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 130
 testRunner.Given("I have this move to create", ((string)(null)), table22);
#line 133
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table23.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 134
 testRunner.And("the move has this schedule", ((string)(null)), table23);
#line 137
 testRunner.And("it has a Category");
#line 138
 testRunner.And("it has an unknown Account Out");
#line 139
 testRunner.And("it has no Account In");
#line 140
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table24.AddRow(new string[] {
                        "OutMoveWrong"});
#line 141
 testRunner.Then("I will receive this error", ((string)(null)), table24);
#line 144
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _21_SaveWithNatureInAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 148
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table25.AddRow(new string[] {
                        "Move Ca21",
                        "31/03/2012",
                        "In",
                        "10"});
#line 149
 testRunner.Given("I have this move to create", ((string)(null)), table25);
#line 152
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table26.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 153
 testRunner.And("the move has this schedule", ((string)(null)), table26);
#line 156
 testRunner.And("it has a Category");
#line 157
 testRunner.And("it has no Account Out");
#line 158
 testRunner.And("it has no Account In");
#line 159
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table27.AddRow(new string[] {
                        "InMoveWrong"});
#line 160
 testRunner.Then("I will receive this error", ((string)(null)), table27);
#line 163
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _22_SaveWithNatureInAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 165
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table28.AddRow(new string[] {
                        "Move Ca22",
                        "31/03/2012",
                        "In",
                        "10"});
#line 166
 testRunner.Given("I have this move to create", ((string)(null)), table28);
#line 169
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table29.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 170
 testRunner.And("the move has this schedule", ((string)(null)), table29);
#line 173
 testRunner.And("it has a Category");
#line 174
 testRunner.And("it has an Account Out");
#line 175
 testRunner.And("it has an Account In");
#line 176
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table30.AddRow(new string[] {
                        "InMoveWrong"});
#line 177
 testRunner.Then("I will receive this error", ((string)(null)), table30);
#line 180
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _23_SaveWithNatureInAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 182
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table31.AddRow(new string[] {
                        "Move Ca23",
                        "31/03/2012",
                        "In",
                        "10"});
#line 183
 testRunner.Given("I have this move to create", ((string)(null)), table31);
#line 186
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table32.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 187
 testRunner.And("the move has this schedule", ((string)(null)), table32);
#line 190
 testRunner.And("it has a Category");
#line 191
 testRunner.And("it has an Account Out");
#line 192
 testRunner.And("it has no Account In");
#line 193
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table33.AddRow(new string[] {
                        "InMoveWrong"});
#line 194
 testRunner.Then("I will receive this error", ((string)(null)), table33);
#line 197
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)")]
        public virtual void _24_SaveWithNatureInAccountOutNoAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table34.AddRow(new string[] {
                        "Move Ca24",
                        "31/03/2012",
                        "In",
                        "10"});
#line 200
 testRunner.Given("I have this move to create", ((string)(null)), table34);
#line 203
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table35.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 204
 testRunner.And("the move has this schedule", ((string)(null)), table35);
#line 207
 testRunner.And("it has a Category");
#line 208
 testRunner.And("it has no Account Out");
#line 209
 testRunner.And("it has an unknown Account In");
#line 210
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table36.AddRow(new string[] {
                        "InMoveWrong"});
#line 211
 testRunner.Then("I will receive this error", ((string)(null)), table36);
#line 214
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _31_SaveWithNatureTransferAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 218
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table37.AddRow(new string[] {
                        "Move Ca31",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 219
 testRunner.Given("I have this move to create", ((string)(null)), table37);
#line 222
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table38.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 223
 testRunner.And("the move has this schedule", ((string)(null)), table38);
#line 226
 testRunner.And("it has a Category");
#line 227
 testRunner.And("it has no Account Out");
#line 228
 testRunner.And("it has no Account In");
#line 229
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table39.AddRow(new string[] {
                        "TransferMoveWrong"});
#line 230
 testRunner.Then("I will receive this error", ((string)(null)), table39);
#line 233
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _32_SaveWithNatureTransferAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 235
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table40.AddRow(new string[] {
                        "Move Ca32",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 236
 testRunner.Given("I have this move to create", ((string)(null)), table40);
#line 239
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table41.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 240
 testRunner.And("the move has this schedule", ((string)(null)), table41);
#line 243
 testRunner.And("it has a Category");
#line 244
 testRunner.And("it has no Account Out");
#line 245
 testRunner.And("it has an Account In");
#line 246
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table42.AddRow(new string[] {
                        "TransferMoveWrong"});
#line 247
 testRunner.Then("I will receive this error", ((string)(null)), table42);
#line 250
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _33_SaveWithNatureTransferAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 252
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table43.AddRow(new string[] {
                        "Move Ca33",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 253
 testRunner.Given("I have this move to create", ((string)(null)), table43);
#line 256
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table44.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 257
 testRunner.And("the move has this schedule", ((string)(null)), table44);
#line 260
 testRunner.And("it has a Category");
#line 261
 testRunner.And("it has an Account Out");
#line 262
 testRunner.And("it has no Account In");
#line 263
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table45.AddRow(new string[] {
                        "TransferMoveWrong"});
#line 264
 testRunner.Then("I will receive this error", ((string)(null)), table45);
#line 267
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)")]
        public virtual void _34_SaveWithNatureTransferAccountOutYesAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 269
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table46.AddRow(new string[] {
                        "Move Ca34",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 270
 testRunner.Given("I have this move to create", ((string)(null)), table46);
#line 273
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table47.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 274
 testRunner.And("the move has this schedule", ((string)(null)), table47);
#line 277
 testRunner.And("it has a Category");
#line 278
 testRunner.And("it has an Account Out");
#line 279
 testRunner.And("it has an unknown Account In");
#line 280
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table48.AddRow(new string[] {
                        "TransferMoveWrong"});
#line 281
 testRunner.Then("I will receive this error", ((string)(null)), table48);
#line 284
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)")]
        public virtual void _35_SaveWithNatureTransferAccountOutUnknownAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table49.AddRow(new string[] {
                        "Move Ca35",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 287
 testRunner.Given("I have this move to create", ((string)(null)), table49);
#line 290
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table50.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 291
 testRunner.And("the move has this schedule", ((string)(null)), table50);
#line 294
 testRunner.And("it has a Category");
#line 295
 testRunner.And("it has an unknown Account Out");
#line 296
 testRunner.And("it has an Account In");
#line 297
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table51.AddRow(new string[] {
                        "TransferMoveWrong"});
#line 298
 testRunner.Then("I will receive this error", ((string)(null)), table51);
#line 301
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)")]
        public virtual void _36_SaveWithNatureTransferAccountOutYesAccountInEqualToOutE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)", ((string[])(null)));
#line 303
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table52.AddRow(new string[] {
                        "Move Ca35",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 304
 testRunner.Given("I have this move to create", ((string)(null)), table52);
#line 307
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table53.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 308
 testRunner.And("the move has this schedule", ((string)(null)), table53);
#line 311
 testRunner.And("it has a Category");
#line 312
 testRunner.And("it has an Account Out");
#line 313
 testRunner.And("it has an Account In equal to Out");
#line 314
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table54.AddRow(new string[] {
                        "MoveCircularTransfer"});
#line 315
 testRunner.Then("I will receive this error", ((string)(null)), table54);
#line 318
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("41. Save without Value or Details (E)")]
        public virtual void _41_SaveWithoutValueOrDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("41. Save without Value or Details (E)", ((string[])(null)));
#line 322
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table55.AddRow(new string[] {
                        "Move Ca41",
                        "31/03/2012",
                        "Out",
                        ""});
#line 323
 testRunner.Given("I have this move to create", ((string)(null)), table55);
#line 326
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table56.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 327
 testRunner.And("the move has this schedule", ((string)(null)), table56);
#line 330
 testRunner.And("it has a Category");
#line 331
 testRunner.And("it has an Account Out");
#line 332
 testRunner.And("it has no Account In");
#line 333
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table57.AddRow(new string[] {
                        "MoveValueOrDetailRequired"});
#line 334
 testRunner.Then("I will receive this error", ((string)(null)), table57);
#line 337
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("42. Save with Value zero and no Details (E)")]
        public virtual void _42_SaveWithValueZeroAndNoDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("42. Save with Value zero and no Details (E)", ((string[])(null)));
#line 339
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table58.AddRow(new string[] {
                        "Move Ca42",
                        "31/03/2012",
                        "Out",
                        "0"});
#line 340
 testRunner.Given("I have this move to create", ((string)(null)), table58);
#line 343
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table59.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 344
 testRunner.And("the move has this schedule", ((string)(null)), table59);
#line 347
 testRunner.And("it has a Category");
#line 348
 testRunner.And("it has an Account Out");
#line 349
 testRunner.And("it has no Account In");
#line 350
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table60.AddRow(new string[] {
                        "MoveValueOrDetailRequired"});
#line 351
 testRunner.Then("I will receive this error", ((string)(null)), table60);
#line 354
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("43. Save without value and without Description in Detail (E)")]
        public virtual void _43_SaveWithoutValueAndWithoutDescriptionInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("43. Save without value and without Description in Detail (E)", ((string[])(null)));
#line 356
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table61.AddRow(new string[] {
                        "Move Ca43",
                        "31/03/2012",
                        "Out",
                        ""});
#line 357
 testRunner.Given("I have this move to create", ((string)(null)), table61);
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table62.AddRow(new string[] {
                        "",
                        "1",
                        "10"});
            table62.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 360
 testRunner.And("the move has this details", ((string)(null)), table62);
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table63.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 364
 testRunner.And("the move has this schedule", ((string)(null)), table63);
#line 367
 testRunner.And("it has a Category");
#line 368
 testRunner.And("it has an Account Out");
#line 369
 testRunner.And("it has no Account In");
#line 370
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table64.AddRow(new string[] {
                        "MoveDetailDescriptionRequired"});
#line 371
 testRunner.Then("I will receive this error", ((string)(null)), table64);
#line 374
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("44. Save without value and with Amount zero in Detail (E)")]
        public virtual void _44_SaveWithoutValueAndWithAmountZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("44. Save without value and with Amount zero in Detail (E)", ((string[])(null)));
#line 376
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table65.AddRow(new string[] {
                        "Move Ca44",
                        "31/03/2012",
                        "Out",
                        ""});
#line 377
 testRunner.Given("I have this move to create", ((string)(null)), table65);
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table66.AddRow(new string[] {
                        "Detail 1",
                        "0",
                        "10"});
            table66.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 380
 testRunner.And("the move has this details", ((string)(null)), table66);
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table67.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 384
 testRunner.And("the move has this schedule", ((string)(null)), table67);
#line 387
 testRunner.And("it has a Category");
#line 388
 testRunner.And("it has an Account Out");
#line 389
 testRunner.And("it has no Account In");
#line 390
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table68.AddRow(new string[] {
                        "MoveDetailAmountRequired"});
#line 391
 testRunner.Then("I will receive this error", ((string)(null)), table68);
#line 394
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("45. Save without value and with Value zero in Detail (E)")]
        public virtual void _45_SaveWithoutValueAndWithValueZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("45. Save without value and with Value zero in Detail (E)", ((string[])(null)));
#line 396
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table69.AddRow(new string[] {
                        "Move Ca45",
                        "31/03/2012",
                        "Out",
                        ""});
#line 397
 testRunner.Given("I have this move to create", ((string)(null)), table69);
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table70.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "0"});
            table70.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 400
 testRunner.And("the move has this details", ((string)(null)), table70);
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table71.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 404
 testRunner.And("the move has this schedule", ((string)(null)), table71);
#line 407
 testRunner.And("it has a Category");
#line 408
 testRunner.And("it has an Account Out");
#line 409
 testRunner.And("it has no Account In");
#line 410
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table72.AddRow(new string[] {
                        "MoveDetailValueRequired"});
#line 411
 testRunner.Then("I will receive this error", ((string)(null)), table72);
#line 414
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("51. Save without Schedule (E)")]
        public virtual void _51_SaveWithoutScheduleE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("51. Save without Schedule (E)", ((string[])(null)));
#line 418
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table73.AddRow(new string[] {
                        "Move Ca91",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 419
 testRunner.Given("I have this move to create", ((string)(null)), table73);
#line 422
 testRunner.And("it has no Details");
#line 423
 testRunner.And("the move has no schedule");
#line 424
 testRunner.And("it has a Category");
#line 425
 testRunner.And("it has an Account Out");
#line 426
 testRunner.And("it has no Account In");
#line 427
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table74.AddRow(new string[] {
                        "MoveScheduleRequired"});
#line 428
 testRunner.Then("I will receive this error", ((string)(null)), table74);
#line 431
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("52. Save with Schedule Times zero and bounded (E)")]
        public virtual void _52_SaveWithScheduleTimesZeroAndBoundedE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("52. Save with Schedule Times zero and bounded (E)", ((string[])(null)));
#line 433
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table75.AddRow(new string[] {
                        "Move Ca91",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 434
 testRunner.Given("I have this move to create", ((string)(null)), table75);
#line 437
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table76.AddRow(new string[] {
                        "0",
                        "False",
                        "Monthly",
                        "False"});
#line 438
 testRunner.And("the move has this schedule", ((string)(null)), table76);
#line 441
 testRunner.And("it has a Category");
#line 442
 testRunner.And("it has an Account Out");
#line 443
 testRunner.And("it has no Account In");
#line 444
 testRunner.When("I try to save the schedule");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table77.AddRow(new string[] {
                        "ScheduleTimesCantBeZero"});
#line 445
 testRunner.Then("I will receive this error", ((string)(null)), table77);
#line 448
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Save with info all right (Out) (S)")]
        public virtual void _91_SaveWithInfoAllRightOutS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Save with info all right (Out) (S)", ((string[])(null)));
#line 452
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table78.AddRow(new string[] {
                        "Move Ca91",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 453
 testRunner.Given("I have this move to create", ((string)(null)), table78);
#line 456
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table79.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 457
 testRunner.And("the move has this schedule", ((string)(null)), table79);
#line 460
 testRunner.And("it has a Category");
#line 461
 testRunner.And("it has an Account Out");
#line 462
 testRunner.And("it has no Account In");
#line 463
 testRunner.When("I try to save the schedule");
#line 464
 testRunner.Then("I will receive no error");
#line 465
 testRunner.And("the schedule will be saved");
#line 466
 testRunner.And("the month-category-accountOut value will not change");
#line 467
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Save with info all right (In) (S)")]
        public virtual void _92_SaveWithInfoAllRightInS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Save with info all right (In) (S)", ((string[])(null)));
#line 469
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table80.AddRow(new string[] {
                        "Move Ca92",
                        "31/03/2012",
                        "In",
                        "10"});
#line 470
 testRunner.Given("I have this move to create", ((string)(null)), table80);
#line 473
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table81.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 474
 testRunner.And("the move has this schedule", ((string)(null)), table81);
#line 477
 testRunner.And("it has a Category");
#line 478
 testRunner.And("it has no Account Out");
#line 479
 testRunner.And("it has an Account In");
#line 480
 testRunner.When("I try to save the schedule");
#line 481
 testRunner.Then("I will receive no error");
#line 482
 testRunner.And("the schedule will be saved");
#line 483
 testRunner.And("the month-category-accountIn value will not change");
#line 484
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("93. Save with info all right (Transfer) (S)")]
        public virtual void _93_SaveWithInfoAllRightTransferS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("93. Save with info all right (Transfer) (S)", ((string[])(null)));
#line 486
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table82.AddRow(new string[] {
                        "Move Ca93",
                        "31/03/2012",
                        "Transfer",
                        "10"});
#line 487
 testRunner.Given("I have this move to create", ((string)(null)), table82);
#line 490
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table83.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 491
 testRunner.And("the move has this schedule", ((string)(null)), table83);
#line 494
 testRunner.And("it has a Category");
#line 495
 testRunner.And("it has an Account Out");
#line 496
 testRunner.And("it has an Account In");
#line 497
 testRunner.When("I try to save the schedule");
#line 498
 testRunner.Then("I will receive no error");
#line 499
 testRunner.And("the schedule will be saved");
#line 500
 testRunner.And("the month-category-accountOut value will not change");
#line 501
 testRunner.And("the month-category-accountIn value will not change");
#line 502
 testRunner.And("the year-category-accountOut value will not change");
#line 503
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("94. Save with info all right (value) (S)")]
        public virtual void _94_SaveWithInfoAllRightValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("94. Save with info all right (value) (S)", ((string[])(null)));
#line 505
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table84.AddRow(new string[] {
                        "Move Ca91",
                        "31/03/2012",
                        "Out",
                        "10"});
#line 506
 testRunner.Given("I have this move to create", ((string)(null)), table84);
#line 509
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table85.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 510
 testRunner.And("the move has this schedule", ((string)(null)), table85);
#line 513
 testRunner.And("it has a Category");
#line 514
 testRunner.And("it has an Account Out");
#line 515
 testRunner.And("it has no Account In");
#line 516
 testRunner.When("I try to save the schedule");
#line 517
 testRunner.Then("I will receive no error");
#line 518
 testRunner.And("the schedule will be saved");
#line 519
 testRunner.And("the month-category-accountOut value will not change");
#line 520
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Save with info all right (details) (S)")]
        public virtual void _95_SaveWithInfoAllRightDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Save with info all right (details) (S)", ((string[])(null)));
#line 522
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table86.AddRow(new string[] {
                        "Move Ca94",
                        "31/03/2012",
                        "Out",
                        ""});
#line 523
 testRunner.Given("I have this move to create", ((string)(null)), table86);
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table87.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "10"});
            table87.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 526
 testRunner.And("the move has this details", ((string)(null)), table87);
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table88.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 530
 testRunner.And("the move has this schedule", ((string)(null)), table88);
#line 533
 testRunner.And("it has a Category");
#line 534
 testRunner.And("it has an Account Out");
#line 535
 testRunner.And("it has no Account In");
#line 536
 testRunner.When("I try to save the schedule");
#line 537
 testRunner.Then("I will receive no error");
#line 538
 testRunner.And("the schedule will be saved");
#line 539
 testRunner.And("the month-category-accountOut value will not change");
#line 540
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Save negative (value) (S)")]
        public virtual void _96_SaveNegativeValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Save negative (value) (S)", ((string[])(null)));
#line 542
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table89.AddRow(new string[] {
                        "Move Ca95",
                        "31/03/2012",
                        "Out",
                        "-10"});
#line 543
 testRunner.Given("I have this move to create", ((string)(null)), table89);
#line 546
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table90.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 547
 testRunner.And("the move has this schedule", ((string)(null)), table90);
#line 550
 testRunner.And("it has a Category");
#line 551
 testRunner.And("it has an Account Out");
#line 552
 testRunner.And("it has no Account In");
#line 553
 testRunner.When("I try to save the schedule");
#line 554
 testRunner.Then("I will receive no error");
#line 555
 testRunner.And("the schedule will be saved");
#line 556
 testRunner.And("the month-category-accountOut value will not change");
#line 557
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Save negative (details) (S)")]
        public virtual void _97_SaveNegativeDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Save negative (details) (S)", ((string[])(null)));
#line 559
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table91.AddRow(new string[] {
                        "Move Ca96",
                        "31/03/2012",
                        "Out",
                        ""});
#line 560
 testRunner.Given("I have this move to create", ((string)(null)), table91);
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table92.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "-10"});
            table92.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 563
 testRunner.And("the move has this details", ((string)(null)), table92);
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table93.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 567
 testRunner.And("the move has this schedule", ((string)(null)), table93);
#line 570
 testRunner.And("it has a Category");
#line 571
 testRunner.And("it has an Account Out");
#line 572
 testRunner.And("it has no Account In");
#line 573
 testRunner.When("I try to save the schedule");
#line 574
 testRunner.Then("I will receive no error");
#line 575
 testRunner.And("the schedule will be saved");
#line 576
 testRunner.And("the month-category-accountOut value will not change");
#line 577
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
