// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.D_Robot
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Robot that execute periodic tasks")]
    public partial class RobotThatExecutePeriodicTasksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveOrUpdateSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Robot that execute periodic tasks", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save without Description (E)")]
        public virtual void _01_SaveWithoutDescriptionE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save without Description (E)", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save without Date (E)")]
        public virtual void _02_SaveWithoutDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save without Date (E)", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save with future Date (E)")]
        public virtual void _03_SaveWithFutureDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save with future Date (E)", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save without Category (E)")]
        public virtual void _04_SaveWithoutCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save without Category (E)", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Save with not known Category (E)")]
        public virtual void _05_SaveWithNotKnownCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Save with not known Category (E)", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06. Save with (Nature: Out) (AccountIn:No) (AccountOut:No) (E)")]
        public virtual void _06_SaveWithNatureOutAccountInNoAccountOutNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. Save with (Nature: Out) (AccountIn:No) (AccountOut:No) (E)", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07. Save with (Nature: Out) (AccountIn:Yes) (AccountOut:Yes) (E)")]
        public virtual void _07_SaveWithNatureOutAccountInYesAccountOutYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07. Save with (Nature: Out) (AccountIn:Yes) (AccountOut:Yes) (E)", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08. Save with (Nature: Out) (AccountIn:Yes) (AccountOut:No) (E)")]
        public virtual void _08_SaveWithNatureOutAccountInYesAccountOutNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08. Save with (Nature: Out) (AccountIn:Yes) (AccountOut:No) (E)", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09. Save with (Nature: In) (AccountIn:No) (AccountOut:No) (E)")]
        public virtual void _09_SaveWithNatureInAccountInNoAccountOutNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09. Save with (Nature: In) (AccountIn:No) (AccountOut:No) (E)", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10. Save with (Nature: In) (AccountIn:Yes) (AccountOut:Yes) (E)")]
        public virtual void _10_SaveWithNatureInAccountInYesAccountOutYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10. Save with (Nature: In) (AccountIn:Yes) (AccountOut:Yes) (E)", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Save with (Nature: In) (AccountIn:No) (AccountOut:Yes) (E)")]
        public virtual void _11_SaveWithNatureInAccountInNoAccountOutYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Save with (Nature: In) (AccountIn:No) (AccountOut:Yes) (E)", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12. Save with (Nature: Transfer) (AccountIn:No) (AccountOut:No) (E)")]
        public virtual void _12_SaveWithNatureTransferAccountInNoAccountOutNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. Save with (Nature: Transfer) (AccountIn:No) (AccountOut:No) (E)", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13. Save with (Nature: Transfer) (AccountIn:Yes) (AccountOut:No) (E)")]
        public virtual void _13_SaveWithNatureTransferAccountInYesAccountOutNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. Save with (Nature: Transfer) (AccountIn:Yes) (AccountOut:No) (E)", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14. Save with (Nature: Transfer) (AccountIn:No) (AccountOut:Yes) (E)")]
        public virtual void _14_SaveWithNatureTransferAccountInNoAccountOutYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14. Save with (Nature: Transfer) (AccountIn:No) (AccountOut:Yes) (E)", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("15. Save without Value or Details (E)")]
        public virtual void _15_SaveWithoutValueOrDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("15. Save without Value or Details (E)", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("16. Save with Value zero (E)")]
        public virtual void _16_SaveWithValueZeroE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("16. Save with Value zero (E)", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("17. Save without Description in Detail (E)")]
        public virtual void _17_SaveWithoutDescriptionInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("17. Save without Description in Detail (E)", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("18. Save with Amount zero in Detail (E)")]
        public virtual void _18_SaveWithAmountZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("18. Save with Amount zero in Detail (E)", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("19. Save with Value zero in Detail (E)")]
        public virtual void _19_SaveWithValueZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("19. Save with Value zero in Detail (E)", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("20. Save without Schedule (E)")]
        public virtual void _20_SaveWithoutScheduleE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("20. Save without Schedule (E)", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21. Save with Schedule Times zero and bounded (E)")]
        public virtual void _21_SaveWithScheduleTimesZeroAndBoundedE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21. Save with Schedule Times zero and bounded (E)", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Save with info all right (value) (S)")]
        public virtual void _96_SaveWithInfoAllRightValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Save with info all right (value) (S)", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Save with info all right (details) (S)")]
        public virtual void _97_SaveWithInfoAllRightDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Save with info all right (details) (S)", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Save negative (value) (S)")]
        public virtual void _98_SaveNegativeValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Save negative (value) (S)", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Save negative (details) (S)")]
        public virtual void _99_SaveNegativeDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Save negative (details) (S)", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
