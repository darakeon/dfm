// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create and security of User")]
    public partial class CreateAndSecurityOfUserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "A.Safe.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create and security of User", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("001. Save user without email (E)")]
        [NUnit.Framework.CategoryAttribute("SaveUserAndSendVerify")]
        public virtual void _001_SaveUserWithoutEmailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("001. Save user without email (E)", new string[] {
                        "SaveUserAndSendVerify"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("002. Save user without password (E)")]
        public virtual void _002_SaveUserWithoutPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("002. Save user without password (E)", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("003. Save user with invalid email (E)")]
        public virtual void _003_SaveUserWithInvalidEmailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("003. Save user with invalid email (E)", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("099. Save user with info all right (S)")]
        public virtual void _099_SaveUserWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("099. Save user with info all right (S)", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("101. Activate user with invalid token (E)")]
        [NUnit.Framework.CategoryAttribute("ActivateUser")]
        public virtual void _101_ActivateUserWithInvalidTokenE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("101. Activate user with invalid token (E)", new string[] {
                        "ActivateUser"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("102. Activate user with token of reset password (E)")]
        public virtual void _102_ActivateUserWithTokenOfResetPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("102. Activate user with token of reset password (E)", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("199. Activate user with info all right (S)")]
        public virtual void _199_ActivateUserWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("199. Activate user with info all right (S)", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("201. Validate without email (E)")]
        [NUnit.Framework.CategoryAttribute("ValidateAndGetUser")]
        public virtual void _201_ValidateWithoutEmailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("201. Validate without email (E)", new string[] {
                        "ValidateAndGetUser"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("202. Validate without password (E)")]
        public virtual void _202_ValidateWithoutPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("202. Validate without password (E)", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("203. Validate with wrong email (E)")]
        public virtual void _203_ValidateWithWrongEmailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("203. Validate with wrong email (E)", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("204. Validate with wrong password (E)")]
        public virtual void _204_ValidateWithWrongPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("204. Validate with wrong password (E)", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("299. Validate with info all right (S)")]
        public virtual void _299_ValidateWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("299. Validate with info all right (S)", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("301. Select with email that doesn\'t exist (E)")]
        [NUnit.Framework.CategoryAttribute("SelectUserByEmail")]
        public virtual void _301_SelectWithEmailThatDoesnTExistE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("301. Select with email that doesn\'t exist (E)", new string[] {
                        "SelectUserByEmail"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("399. Select with info all right (S)")]
        public virtual void _399_SelectWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("399. Select with info all right (S)", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("401. Send with email that doesn\'t exist (E)")]
        [NUnit.Framework.CategoryAttribute("SendUserVerify")]
        public virtual void _401_SendWithEmailThatDoesnTExistE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("401. Send with email that doesn\'t exist (E)", new string[] {
                        "SendUserVerify"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("499. Send with info all right (S)")]
        public virtual void _499_SendWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("499. Send with info all right (S)", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("501. Send with email that doesn\'t exist (E)")]
        [NUnit.Framework.CategoryAttribute("SendPasswordReset")]
        public virtual void _501_SendWithEmailThatDoesnTExistE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("501. Send with email that doesn\'t exist (E)", new string[] {
                        "SendPasswordReset"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("599. Send with info all right (S)")]
        public virtual void _599_SendWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("599. Send with info all right (S)", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("601. Password reset with invalid token (E)")]
        [NUnit.Framework.CategoryAttribute("PasswordReset")]
        public virtual void _601_PasswordResetWithInvalidTokenE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("601. Password reset with invalid token (E)", new string[] {
                        "PasswordReset"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("602. Password reset with token of validate user (E)")]
        public virtual void _602_PasswordResetWithTokenOfValidateUserE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("602. Password reset with token of validate user (E)", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("603. Password reset with no password (E)")]
        public virtual void _603_PasswordResetWithNoPasswordE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("603. Password reset with no password (E)", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("699. Password reset with info all right (S)")]
        public virtual void _699_PasswordResetWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("699. Password reset with info all right (S)", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("701. Test with no token (E)")]
        [NUnit.Framework.CategoryAttribute("TestSecurityToken")]
        public virtual void _701_TestWithNoTokenE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("701. Test with no token (E)", new string[] {
                        "TestSecurityToken"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("702. Test with token of other action (E)")]
        public virtual void _702_TestWithTokenOfOtherActionE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("702. Test with token of other action (E)", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("799. Test with info all right (S)")]
        public virtual void _799_TestWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("799. Test with info all right (S)", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("801. Deactivate with invalid token (E)")]
        [NUnit.Framework.CategoryAttribute("Deactivate")]
        public virtual void _801_DeactivateWithInvalidTokenE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("801. Deactivate with invalid token (E)", new string[] {
                        "Deactivate"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("899. Deactivate with info all right (S)")]
        public virtual void _899_DeactivateWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("899. Deactivate with info all right (S)", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
