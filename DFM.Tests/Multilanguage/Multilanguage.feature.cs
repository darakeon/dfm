// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.Multilanguage
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("E-mail sending")]
    public partial class E_MailSendingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Multilanguage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "E-mail sending", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("the dictionary is initialized");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language"});
            table1.AddRow(new string[] {
                        "en-US"});
            table1.AddRow(new string[] {
                        "pt-BR"});
#line 5
 testRunner.And("I have these languages", ((string)(null)), table1);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Get translations of e-mail names")]
        public virtual void _01_GetTranslationsOfE_MailNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Get translations of e-mail names", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table2.AddRow(new string[] {
                        "Email",
                        "MoveNotificationIn"});
            table2.AddRow(new string[] {
                        "Email",
                        "MoveNotificationOut"});
            table2.AddRow(new string[] {
                        "Email",
                        "MoveNotificationTransfer"});
            table2.AddRow(new string[] {
                        "Email",
                        "UserVerification"});
            table2.AddRow(new string[] {
                        "Email",
                        "PasswordReset"});
#line 12
 testRunner.Given("I have these keys", ((string)(null)), table2);
#line 19
 testRunner.When("I try get the translate");
#line 20
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Get layouts of e-mails")]
        public virtual void _02_GetLayoutsOfE_Mails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Get layouts of e-mails", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phrase"});
            table3.AddRow(new string[] {
                        "MoveNotificationIn"});
            table3.AddRow(new string[] {
                        "MoveNotificationOut"});
            table3.AddRow(new string[] {
                        "MoveNotificationTransfer"});
            table3.AddRow(new string[] {
                        "UserVerification"});
            table3.AddRow(new string[] {
                        "PasswordReset"});
#line 24
 testRunner.Given("I have these e-mail types", ((string)(null)), table3);
#line 31
 testRunner.When("I try get the layout");
#line 32
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Get translations of Enums")]
        public virtual void _03_GetTranslationsOfEnums()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Get translations of Enums", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table4.AddRow(new string[] {
                        "Move",
                        "In"});
            table4.AddRow(new string[] {
                        "Move",
                        "Out"});
            table4.AddRow(new string[] {
                        "Move",
                        "Transfer"});
            table4.AddRow(new string[] {
                        "Move",
                        "Daily"});
            table4.AddRow(new string[] {
                        "Move",
                        "Monthly"});
            table4.AddRow(new string[] {
                        "Move",
                        "Yearly"});
            table4.AddRow(new string[] {
                        "Token",
                        "UserVerification"});
            table4.AddRow(new string[] {
                        "Token",
                        "PasswordReset"});
#line 36
 testRunner.Given("I have these keys", ((string)(null)), table4);
#line 46
 testRunner.When("I try get the translate");
#line 47
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Get translations of Errors")]
        public virtual void _03_GetTranslationsOfErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Get translations of Errors", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table5.AddRow(new string[] {
                        "Error",
                        "Unauthorized"});
            table5.AddRow(new string[] {
                        "Error",
                        "FailOnEmailSend"});
            table5.AddRow(new string[] {
                        "Error",
                        "TooLargeData"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidToken"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidUser"});
            table5.AddRow(new string[] {
                        "Error",
                        "UserAlreadyExists"});
            table5.AddRow(new string[] {
                        "Error",
                        "UserEmailInvalid"});
            table5.AddRow(new string[] {
                        "Error",
                        "UserPasswordRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "AccountNameRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "AccountAlreadyExists"});
            table5.AddRow(new string[] {
                        "Error",
                        "CantCloseEmptyAccount"});
            table5.AddRow(new string[] {
                        "Error",
                        "CantDeleteAccountWithMoves"});
            table5.AddRow(new string[] {
                        "Error",
                        "ClosedAccount"});
            table5.AddRow(new string[] {
                        "Error",
                        "DuplicatedAccountName"});
            table5.AddRow(new string[] {
                        "Error",
                        "RedLimitAboveYellowLimit"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidAccount"});
            table5.AddRow(new string[] {
                        "Error",
                        "CategoryNameRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "CategoryAlreadyExists"});
            table5.AddRow(new string[] {
                        "Error",
                        "DisabledCategory"});
            table5.AddRow(new string[] {
                        "Error",
                        "EnabledCategory"});
            table5.AddRow(new string[] {
                        "Error",
                        "DuplicatedCategoryName"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidCategory"});
            table5.AddRow(new string[] {
                        "Error",
                        "InMoveWrong"});
            table5.AddRow(new string[] {
                        "Error",
                        "OutMoveWrong"});
            table5.AddRow(new string[] {
                        "Error",
                        "TransferMoveWrong"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveCircularTransfer"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDescriptionRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDateRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDateInvalid"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveValueOrDetailRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidMove"});
            table5.AddRow(new string[] {
                        "Error",
                        "DetailWithoutMove"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDetailDescriptionRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDetailAmountRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "MoveDetailValueRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidDetail"});
            table5.AddRow(new string[] {
                        "Error",
                        "ScheduleRequired"});
            table5.AddRow(new string[] {
                        "Error",
                        "ScheduleFrequencyNotRecognized"});
            table5.AddRow(new string[] {
                        "Error",
                        "ScheduleWithNoMoves"});
            table5.AddRow(new string[] {
                        "Error",
                        "ScheduleTimesCantBeZero"});
            table5.AddRow(new string[] {
                        "Error",
                        "SummaryNatureNotFound"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidYear"});
            table5.AddRow(new string[] {
                        "Error",
                        "InvalidMonth"});
#line 51
 testRunner.Given("I have these keys", ((string)(null)), table5);
#line 96
 testRunner.When("I try get the translate");
#line 97
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Get translate of Interface (move)")]
        public virtual void _04_GetTranslateOfInterfaceMove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Get translate of Interface (move)", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table6.AddRow(new string[] {
                        "Move",
                        "Create"});
            table6.AddRow(new string[] {
                        "Move",
                        "Edit"});
            table6.AddRow(new string[] {
                        "Move",
                        "Schedule"});
            table6.AddRow(new string[] {
                        "Move",
                        "Move"});
            table6.AddRow(new string[] {
                        "Move",
                        "DayNames"});
            table6.AddRow(new string[] {
                        "Move",
                        "Frequency"});
            table6.AddRow(new string[] {
                        "Move",
                        "Boundless"});
            table6.AddRow(new string[] {
                        "Move",
                        "Repeat"});
            table6.AddRow(new string[] {
                        "Move",
                        "Times"});
            table6.AddRow(new string[] {
                        "Move",
                        "ShowInstallment"});
            table6.AddRow(new string[] {
                        "Move",
                        "Description"});
            table6.AddRow(new string[] {
                        "Move",
                        "CharactersMax"});
            table6.AddRow(new string[] {
                        "Move",
                        "Date"});
            table6.AddRow(new string[] {
                        "Move",
                        "Category"});
            table6.AddRow(new string[] {
                        "Move",
                        "Select"});
            table6.AddRow(new string[] {
                        "Move",
                        "Create"});
            table6.AddRow(new string[] {
                        "Move",
                        "Category"});
            table6.AddRow(new string[] {
                        "Move",
                        "Nature"});
            table6.AddRow(new string[] {
                        "Move",
                        "JustOneValue"});
            table6.AddRow(new string[] {
                        "Move",
                        "Detailed"});
            table6.AddRow(new string[] {
                        "Move",
                        "Add"});
            table6.AddRow(new string[] {
                        "Move",
                        "Detail"});
            table6.AddRow(new string[] {
                        "Move",
                        "Value"});
            table6.AddRow(new string[] {
                        "Move",
                        "Amount"});
#line 101
 testRunner.Given("I have these keys", ((string)(null)), table6);
#line 127
 testRunner.When("I try get the translate");
#line 128
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Get translate of Interface (report)")]
        public virtual void _05_GetTranslateOfInterfaceReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Get translate of Interface (report)", ((string[])(null)));
#line 131
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table7.AddRow(new string[] {
                        "Report",
                        "ShortDateFormat"});
            table7.AddRow(new string[] {
                        "Report",
                        "Summary"});
            table7.AddRow(new string[] {
                        "Report",
                        "Go"});
            table7.AddRow(new string[] {
                        "Report",
                        "NoMonthMoves"});
            table7.AddRow(new string[] {
                        "Report",
                        "Description"});
            table7.AddRow(new string[] {
                        "Report",
                        "Category"});
            table7.AddRow(new string[] {
                        "Report",
                        "Date"});
            table7.AddRow(new string[] {
                        "Report",
                        "In"});
            table7.AddRow(new string[] {
                        "Report",
                        "Out"});
            table7.AddRow(new string[] {
                        "Report",
                        "TODO"});
            table7.AddRow(new string[] {
                        "Report",
                        "Edit"});
            table7.AddRow(new string[] {
                        "Report",
                        "Move"});
            table7.AddRow(new string[] {
                        "Report",
                        "Delete"});
            table7.AddRow(new string[] {
                        "Report",
                        "ConfirmDeleteMove"});
            table7.AddRow(new string[] {
                        "Report",
                        "NoYearMoves"});
            table7.AddRow(new string[] {
                        "Report",
                        "Month"});
            table7.AddRow(new string[] {
                        "Report",
                        "Value"});
#line 132
 testRunner.Given("I have these keys", ((string)(null)), table7);
#line 151
 testRunner.When("I try get the translate");
#line 152
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06. Get translate of Interface (account)")]
        public virtual void _06_GetTranslateOfInterfaceAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. Get translate of Interface (account)", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table8.AddRow(new string[] {
                        "Account",
                        "Create"});
            table8.AddRow(new string[] {
                        "Account",
                        "Edit"});
            table8.AddRow(new string[] {
                        "Account",
                        "Account"});
            table8.AddRow(new string[] {
                        "Account",
                        "Name"});
            table8.AddRow(new string[] {
                        "Account",
                        "CharactersMax"});
            table8.AddRow(new string[] {
                        "Account",
                        "AccountHasLimit"});
            table8.AddRow(new string[] {
                        "Account",
                        "RedLimit"});
            table8.AddRow(new string[] {
                        "Account",
                        "YellowLimit"});
            table8.AddRow(new string[] {
                        "Account",
                        "LimitExplanation"});
            table8.AddRow(new string[] {
                        "Account",
                        "Accounts"});
            table8.AddRow(new string[] {
                        "Account",
                        "NoAccounts"});
            table8.AddRow(new string[] {
                        "Account",
                        "BeginDate"});
            table8.AddRow(new string[] {
                        "Account",
                        "Value"});
            table8.AddRow(new string[] {
                        "Account",
                        "TODO"});
            table8.AddRow(new string[] {
                        "Account",
                        "Create"});
            table8.AddRow(new string[] {
                        "Account",
                        "Move"});
            table8.AddRow(new string[] {
                        "Account",
                        "Schedule"});
            table8.AddRow(new string[] {
                        "Account",
                        "Edit"});
            table8.AddRow(new string[] {
                        "Account",
                        "Account"});
            table8.AddRow(new string[] {
                        "Account",
                        "Delete"});
            table8.AddRow(new string[] {
                        "Account",
                        "Close"});
            table8.AddRow(new string[] {
                        "Account",
                        "CloseConfirm"});
            table8.AddRow(new string[] {
                        "Account",
                        "DeleteConfirm"});
            table8.AddRow(new string[] {
                        "Account",
                        "ClosedAccounts"});
            table8.AddRow(new string[] {
                        "Account",
                        "NoClosedAccounts"});
            table8.AddRow(new string[] {
                        "Account",
                        "Name"});
            table8.AddRow(new string[] {
                        "Account",
                        "BeginDate"});
            table8.AddRow(new string[] {
                        "Account",
                        "EndDate"});
            table8.AddRow(new string[] {
                        "Account",
                        "Value"});
            table8.AddRow(new string[] {
                        "Account",
                        "GOTO"});
            table8.AddRow(new string[] {
                        "Account",
                        "MonthMoves"});
            table8.AddRow(new string[] {
                        "Account",
                        "YearMoves"});
#line 156
 testRunner.Given("I have these keys", ((string)(null)), table8);
#line 190
 testRunner.When("I try get the translate");
#line 191
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07. Get translate of Interface (category)")]
        public virtual void _07_GetTranslateOfInterfaceCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07. Get translate of Interface (category)", ((string[])(null)));
#line 194
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table9.AddRow(new string[] {
                        "Category",
                        "Create"});
            table9.AddRow(new string[] {
                        "Category",
                        "Edit"});
            table9.AddRow(new string[] {
                        "Category",
                        "Category"});
            table9.AddRow(new string[] {
                        "Category",
                        "CharactersMax"});
            table9.AddRow(new string[] {
                        "Category",
                        "Categories"});
            table9.AddRow(new string[] {
                        "Category",
                        "NoCategories"});
            table9.AddRow(new string[] {
                        "Category",
                        "Name"});
            table9.AddRow(new string[] {
                        "Category",
                        "TODO"});
            table9.AddRow(new string[] {
                        "Category",
                        "Enable"});
            table9.AddRow(new string[] {
                        "Category",
                        "Disable"});
            table9.AddRow(new string[] {
                        "Category",
                        "Create"});
#line 195
 testRunner.Given("I have these keys", ((string)(null)), table9);
#line 208
 testRunner.When("I try get the translate");
#line 209
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08. Get translate of Interface (token)")]
        public virtual void _08_GetTranslateOfInterfaceToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08. Get translate of Interface (token)", ((string[])(null)));
#line 212
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table10.AddRow(new string[] {
                        "Token",
                        "RetypeWrong"});
            table10.AddRow(new string[] {
                        "Token",
                        "NotRecognizedAction"});
            table10.AddRow(new string[] {
                        "Token",
                        "RetypeWrong"});
            table10.AddRow(new string[] {
                        "Token",
                        "NotRecognizedAction"});
            table10.AddRow(new string[] {
                        "Token",
                        "TokenDeactivate"});
            table10.AddRow(new string[] {
                        "Token",
                        "TokenDeactivateSuccess"});
            table10.AddRow(new string[] {
                        "Token",
                        "TokenInvalid"});
            table10.AddRow(new string[] {
                        "Token",
                        "TokenInvalidMessage"});
            table10.AddRow(new string[] {
                        "Token",
                        "PasswordReset"});
            table10.AddRow(new string[] {
                        "Token",
                        "Password"});
            table10.AddRow(new string[] {
                        "Token",
                        "RetypePassword"});
            table10.AddRow(new string[] {
                        "Token",
                        "Reset"});
            table10.AddRow(new string[] {
                        "Token",
                        "PasswordReset"});
            table10.AddRow(new string[] {
                        "Token",
                        "PasswordResetSuccess"});
            table10.AddRow(new string[] {
                        "Token",
                        "TokenReceivedByEmail"});
            table10.AddRow(new string[] {
                        "Token",
                        "Token"});
            table10.AddRow(new string[] {
                        "Token",
                        "SecurityAction"});
            table10.AddRow(new string[] {
                        "Token",
                        "Select"});
            table10.AddRow(new string[] {
                        "Token",
                        "Go"});
            table10.AddRow(new string[] {
                        "Token",
                        "UserVerification"});
            table10.AddRow(new string[] {
                        "Token",
                        "UserVerificationSuccess"});
#line 213
 testRunner.Given("I have these keys", ((string)(null)), table10);
#line 236
 testRunner.When("I try get the translate");
#line 237
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09. Get translate of Interface (user)")]
        public virtual void _09_GetTranslateOfInterfaceUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09. Get translate of Interface (user)", ((string[])(null)));
#line 240
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table11.AddRow(new string[] {
                        "User",
                        "ForgotPassword"});
            table11.AddRow(new string[] {
                        "User",
                        "Email"});
            table11.AddRow(new string[] {
                        "User",
                        "Send"});
            table11.AddRow(new string[] {
                        "User",
                        "ForgotPassword"});
            table11.AddRow(new string[] {
                        "User",
                        "FollowEmailIntructions"});
            table11.AddRow(new string[] {
                        "User",
                        "Welcome"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Introdution"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_PossibleNowADays"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Moves"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Transfer"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Categories"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Reports"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_ReportMonth"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_ReportYear"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Close"});
            table11.AddRow(new string[] {
                        "User",
                        "Index_Finish"});
            table11.AddRow(new string[] {
                        "User",
                        "Logon"});
            table11.AddRow(new string[] {
                        "User",
                        "Enter"});
            table11.AddRow(new string[] {
                        "User",
                        "Email"});
            table11.AddRow(new string[] {
                        "User",
                        "Password"});
            table11.AddRow(new string[] {
                        "User",
                        "RememberMe"});
            table11.AddRow(new string[] {
                        "User",
                        "ForgotPassword"});
            table11.AddRow(new string[] {
                        "User",
                        "TokenReceivedByEmail"});
            table11.AddRow(new string[] {
                        "User",
                        "LogonDeactivated"});
            table11.AddRow(new string[] {
                        "User",
                        "FollowEmailIntructions"});
            table11.AddRow(new string[] {
                        "User",
                        "SignUp"});
            table11.AddRow(new string[] {
                        "User",
                        "Email"});
            table11.AddRow(new string[] {
                        "User",
                        "CharactersMax"});
            table11.AddRow(new string[] {
                        "User",
                        "Password"});
            table11.AddRow(new string[] {
                        "User",
                        "RetypePassword"});
            table11.AddRow(new string[] {
                        "User",
                        "Create"});
            table11.AddRow(new string[] {
                        "User",
                        "SignUpSuccess"});
            table11.AddRow(new string[] {
                        "User",
                        "FollowEmailIntructions"});
#line 241
 testRunner.Given("I have these keys", ((string)(null)), table11);
#line 276
 testRunner.When("I try get the translate");
#line 277
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10. Get translate of Interface (ops)")]
        public virtual void _10_GetTranslateOfInterfaceOps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10. Get translate of Interface (ops)", ((string[])(null)));
#line 280
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table12.AddRow(new string[] {
                        "Ops",
                        "NotFound"});
            table12.AddRow(new string[] {
                        "Ops",
                        "InternalMessageSent"});
            table12.AddRow(new string[] {
                        "Ops",
                        "InternalMessageNotSent"});
            table12.AddRow(new string[] {
                        "Ops",
                        "CommunicationError"});
#line 281
 testRunner.Given("I have these keys", ((string)(null)), table12);
#line 287
 testRunner.When("I try get the translate");
#line 288
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Get translate of Interface (general)")]
        public virtual void _11_GetTranslateOfInterfaceGeneral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Get translate of Interface (general)", ((string[])(null)));
#line 291
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table13.AddRow(new string[] {
                        "General",
                        "LogOff"});
            table13.AddRow(new string[] {
                        "General",
                        "MonthMoves"});
            table13.AddRow(new string[] {
                        "General",
                        "YearMoves"});
            table13.AddRow(new string[] {
                        "General",
                        "Create"});
            table13.AddRow(new string[] {
                        "General",
                        "Schedule"});
            table13.AddRow(new string[] {
                        "General",
                        "Move"});
            table13.AddRow(new string[] {
                        "General",
                        "Categories"});
            table13.AddRow(new string[] {
                        "General",
                        "Accounts"});
            table13.AddRow(new string[] {
                        "General",
                        "WeirdMenuExplanation"});
#line 292
 testRunner.Given("I have these keys", ((string)(null)), table13);
#line 303
 testRunner.When("I try get the translate");
#line 304
 testRunner.Then("I will receive no multilanguage error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
