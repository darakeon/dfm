// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFM.Tests.Multilanguage
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Translation")]
    public partial class TranslationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Multilanguage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Translation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("the dictionary is initialized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language"});
            table1.AddRow(new string[] {
                        "en-US"});
            table1.AddRow(new string[] {
                        "pt-BR"});
#line 5
  testRunner.And("I have these languages", ((string)(null)), table1, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML01. Get layouts of e-mails")]
        public virtual void ML01_GetLayoutsOfE_Mails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML01. Get layouts of e-mails", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phrase"});
            table2.AddRow(new string[] {
                        "MoveNotification"});
            table2.AddRow(new string[] {
                        "SecurityAction"});
#line 11
 testRunner.Given("I have these e-mail types", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phrase"});
            table3.AddRow(new string[] {
                        "Dark"});
            table3.AddRow(new string[] {
                        "Light"});
#line 15
  testRunner.And("I have these themes", ((string)(null)), table3, "And ");
#line 19
 testRunner.When("I try get the layout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML02. Get translations of Enums")]
        public virtual void ML02_GetTranslationsOfEnums()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML02. Get translations of Enums", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Enum"});
            table4.AddRow(new string[] {
                        "Moves",
                        "MoveNature"});
            table4.AddRow(new string[] {
                        "Schedules",
                        "ScheduleFrequency"});
            table4.AddRow(new string[] {
                        "Tokens",
                        "SecurityAction"});
#line 23
 testRunner.Given("I have these entity enums", ((string)(null)), table4, "Given ");
#line 28
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML03. Get translations of Errors")]
        public virtual void ML03_GetTranslationsOfErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML03. Get translations of Errors", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 32
 testRunner.Given("I have the error enum", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML04. Get translate of Interface (moves)")]
        public virtual void ML04_GetTranslateOfInterfaceMoves()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML04. Get translate of Interface (moves)", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Create"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Edit"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Move"});
            table5.AddRow(new string[] {
                        "Moves",
                        "DayNames"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Description"});
            table5.AddRow(new string[] {
                        "Moves",
                        "CharactersMax"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Date"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Category"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Select"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Create"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Category"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Nature"});
            table5.AddRow(new string[] {
                        "Moves",
                        "JustOneValue"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Detailed"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Add"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Detail"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Value"});
            table5.AddRow(new string[] {
                        "Moves",
                        "Amount"});
            table5.AddRow(new string[] {
                        "Moves",
                        "ToMove"});
            table5.AddRow(new string[] {
                        "Moves",
                        "MoveSave"});
            table5.AddRow(new string[] {
                        "Moves",
                        "MoveNotFound"});
            table5.AddRow(new string[] {
                        "Moves",
                        "MoveDeleted"});
            table5.AddRow(new string[] {
                        "Moves",
                        "MoveDeletedWithoutEmail"});
#line 37
 testRunner.Given("I have these keys", ((string)(null)), table5, "Given ");
#line 62
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML05. Get translate of Interface (reports)")]
        public virtual void ML05_GetTranslateOfInterfaceReports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML05. Get translate of Interface (reports)", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table6.AddRow(new string[] {
                        "Reports",
                        "ShortDateFormat"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Summary"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Go"});
            table6.AddRow(new string[] {
                        "Reports",
                        "NoMonthMoves"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Description"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Category"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Date"});
            table6.AddRow(new string[] {
                        "Reports",
                        "In"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Out"});
            table6.AddRow(new string[] {
                        "Reports",
                        "TODO"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Edit"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Move"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Delete"});
            table6.AddRow(new string[] {
                        "Reports",
                        "ConfirmDeleteMove"});
            table6.AddRow(new string[] {
                        "Reports",
                        "NoYearMoves"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Month"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Value"});
            table6.AddRow(new string[] {
                        "Reports",
                        "ToMove"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Check"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Uncheck"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Checked"});
            table6.AddRow(new string[] {
                        "Reports",
                        "Unchecked"});
#line 66
 testRunner.Given("I have these keys", ((string)(null)), table6, "Given ");
#line 90
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML06. Get translate of Interface (accounts)")]
        public virtual void ML06_GetTranslateOfInterfaceAccounts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML06. Get translate of Interface (accounts)", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Create"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Edit"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Account"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Name"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "CharactersMax"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "AccountHasLimit"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "RedLimit"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "YellowLimit"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "LimitExplanation"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Accounts"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "NoAccounts"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "BeginDate"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Value"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "TODO"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Create"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Move"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Schedule"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Edit"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Account"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Delete"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Close"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "DeleteConfirm"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "CloseConfirm"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "ClosedAccounts"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "NoClosedAccounts"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Name"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "BeginDate"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "EndDate"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Value"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "GOTO"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "MonthMoves"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "YearMoves"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "Url"});
            table7.AddRow(new string[] {
                        "Accounts",
                        "AcceptedUrlCharacters"});
#line 94
 testRunner.Given("I have these keys", ((string)(null)), table7, "Given ");
#line 130
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML07. Get translate of Interface (categories)")]
        public virtual void ML07_GetTranslateOfInterfaceCategories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML07. Get translate of Interface (categories)", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Create"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Edit"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Category"});
            table8.AddRow(new string[] {
                        "Categories",
                        "CharactersMax"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Categories"});
            table8.AddRow(new string[] {
                        "Categories",
                        "NoCategories"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Name"});
            table8.AddRow(new string[] {
                        "Categories",
                        "TODO"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Enable"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Disable"});
            table8.AddRow(new string[] {
                        "Categories",
                        "Create"});
#line 134
 testRunner.Given("I have these keys", ((string)(null)), table8, "Given ");
#line 147
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML08. Get translate of Interface (tokens)")]
        public virtual void ML08_GetTranslateOfInterfaceTokens()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML08. Get translate of Interface (tokens)", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "NotRecognizedAction"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "TokenDisable"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "TokenDisableSuccess"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "TokenInvalid"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "TokenInvalidMessage"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "PasswordReset"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "Password"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "RetypePassword"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "Reset"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "PasswordResetSuccess"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "TokenReceivedByEmail"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "Token"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "SecurityAction"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "Select"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "Go"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "UserVerification"});
            table9.AddRow(new string[] {
                        "Tokens",
                        "UserVerificationSuccess"});
#line 151
 testRunner.Given("I have these keys", ((string)(null)), table9, "Given ");
#line 170
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML09. Get translate of Interface (users)")]
        public virtual void ML09_GetTranslateOfInterfaceUsers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML09. Get translate of Interface (users)", ((string[])(null)));
#line 173
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table10.AddRow(new string[] {
                        "Users",
                        "ForgotPassword"});
            table10.AddRow(new string[] {
                        "Users",
                        "Email"});
            table10.AddRow(new string[] {
                        "Users",
                        "Send"});
            table10.AddRow(new string[] {
                        "Users",
                        "FollowEmailIntructions"});
            table10.AddRow(new string[] {
                        "Users",
                        "PayAttentionSender"});
            table10.AddRow(new string[] {
                        "Users",
                        "Index_Welcome"});
            table10.AddRow(new string[] {
                        "Users",
                        "Index_Introdution"});
            table10.AddRow(new string[] {
                        "Users",
                        "Index_Explanation"});
            table10.AddRow(new string[] {
                        "Users",
                        "Index_Close"});
            table10.AddRow(new string[] {
                        "Users",
                        "Logon"});
            table10.AddRow(new string[] {
                        "Users",
                        "Login"});
            table10.AddRow(new string[] {
                        "Users",
                        "Enter"});
            table10.AddRow(new string[] {
                        "Users",
                        "Email"});
            table10.AddRow(new string[] {
                        "Users",
                        "Password"});
            table10.AddRow(new string[] {
                        "Users",
                        "RememberMe"});
            table10.AddRow(new string[] {
                        "Users",
                        "ForgotPassword"});
            table10.AddRow(new string[] {
                        "Users",
                        "TokenReceivedByEmail"});
            table10.AddRow(new string[] {
                        "Users",
                        "LogonDisabled"});
            table10.AddRow(new string[] {
                        "Users",
                        "SignUp"});
            table10.AddRow(new string[] {
                        "Users",
                        "Email"});
            table10.AddRow(new string[] {
                        "Users",
                        "CharactersMax"});
            table10.AddRow(new string[] {
                        "Users",
                        "Password"});
            table10.AddRow(new string[] {
                        "Users",
                        "RetypePassword"});
            table10.AddRow(new string[] {
                        "Users",
                        "Create"});
            table10.AddRow(new string[] {
                        "Users",
                        "SignUpSuccess"});
            table10.AddRow(new string[] {
                        "Users",
                        "Settings"});
            table10.AddRow(new string[] {
                        "Users",
                        "UseCategories"});
            table10.AddRow(new string[] {
                        "Users",
                        "SendMoveEmail"});
            table10.AddRow(new string[] {
                        "Users",
                        "MoveCheck"});
            table10.AddRow(new string[] {
                        "Users",
                        "Language"});
            table10.AddRow(new string[] {
                        "Users",
                        "TimeZone"});
            table10.AddRow(new string[] {
                        "Users",
                        "LanguageEnus"});
            table10.AddRow(new string[] {
                        "Users",
                        "LanguagePtbr"});
            table10.AddRow(new string[] {
                        "Users",
                        "Save"});
            table10.AddRow(new string[] {
                        "Users",
                        "ConfigChanged"});
            table10.AddRow(new string[] {
                        "Users",
                        "CurrentPassword"});
            table10.AddRow(new string[] {
                        "Users",
                        "NewPassword"});
            table10.AddRow(new string[] {
                        "Users",
                        "EmailToChange"});
            table10.AddRow(new string[] {
                        "Users",
                        "EmailUpdated"});
            table10.AddRow(new string[] {
                        "Users",
                        "PasswordChanged"});
            table10.AddRow(new string[] {
                        "Users",
                        "OptionsSettings"});
            table10.AddRow(new string[] {
                        "Users",
                        "PasswordSettings"});
            table10.AddRow(new string[] {
                        "Users",
                        "EmailSettings"});
#line 174
 testRunner.Given("I have these keys", ((string)(null)), table10, "Given ");
#line 219
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML10. Get translate of Interface (ops)")]
        public virtual void ML10_GetTranslateOfInterfaceOps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML10. Get translate of Interface (ops)", ((string[])(null)));
#line 222
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table11.AddRow(new string[] {
                        "Ops",
                        "NotFound"});
            table11.AddRow(new string[] {
                        "Ops",
                        "InternalMessageSent"});
            table11.AddRow(new string[] {
                        "Ops",
                        "InternalMessageNotSent"});
            table11.AddRow(new string[] {
                        "Ops",
                        "CommunicationError"});
#line 223
 testRunner.Given("I have these keys", ((string)(null)), table11, "Given ");
#line 229
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML11. Get translate of Interface (general)")]
        public virtual void ML11_GetTranslateOfInterfaceGeneral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML11. Get translate of Interface (general)", ((string[])(null)));
#line 232
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table12.AddRow(new string[] {
                        "General",
                        "LogOff"});
            table12.AddRow(new string[] {
                        "General",
                        "MonthMoves"});
            table12.AddRow(new string[] {
                        "General",
                        "YearMoves"});
            table12.AddRow(new string[] {
                        "General",
                        "Create"});
            table12.AddRow(new string[] {
                        "General",
                        "Schedule"});
            table12.AddRow(new string[] {
                        "General",
                        "Move"});
            table12.AddRow(new string[] {
                        "General",
                        "Categories"});
            table12.AddRow(new string[] {
                        "General",
                        "Accounts"});
            table12.AddRow(new string[] {
                        "General",
                        "ScheduleRun"});
            table12.AddRow(new string[] {
                        "General",
                        "Total"});
            table12.AddRow(new string[] {
                        "General",
                        "Schedules"});
            table12.AddRow(new string[] {
                        "General",
                        "TheSchedule"});
            table12.AddRow(new string[] {
                        "General",
                        "Logins"});
            table12.AddRow(new string[] {
                        "General",
                        "AndroidRobotLicenseText"});
            table12.AddRow(new string[] {
                        "General",
                        "Status"});
            table12.AddRow(new string[] {
                        "General",
                        "Available"});
            table12.AddRow(new string[] {
                        "General",
                        "Invisible"});
#line 233
 testRunner.Given("I have these keys", ((string)(null)), table12, "Given ");
#line 252
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML12. Get translate of Interface (schedules)")]
        public virtual void ML12_GetTranslateOfInterfaceSchedules()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML12. Get translate of Interface (schedules)", ((string[])(null)));
#line 255
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Create"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Edit"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Schedule"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Move"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "DayNames"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Frequency"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Boundless"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Repeat"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Times"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "ShowInstallment"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Description"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "CharactersMax"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Date"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Category"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Select"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Create"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Category"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Nature"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "JustOneValue"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Detailed"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Add"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Detail"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Value"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "Amount"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "ToMove"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "NoSchedules"});
            table13.AddRow(new string[] {
                        "Schedules",
                        "ConfirmDeleteSchedule"});
#line 256
 testRunner.Given("I have these keys", ((string)(null)), table13, "Given ");
#line 285
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML13. Get translate of Interface (logins)")]
        public virtual void ML13_GetTranslateOfInterfaceLogins()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML13. Get translate of Interface (logins)", ((string[])(null)));
#line 288
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table14.AddRow(new string[] {
                        "Logins",
                        "Creation"});
            table14.AddRow(new string[] {
                        "Logins",
                        "Expiration"});
            table14.AddRow(new string[] {
                        "Logins",
                        "Type"});
            table14.AddRow(new string[] {
                        "Logins",
                        "Mobile"});
            table14.AddRow(new string[] {
                        "Logins",
                        "Browser"});
            table14.AddRow(new string[] {
                        "Logins",
                        "ConfirmDeleteLogin"});
            table14.AddRow(new string[] {
                        "Logins",
                        "LoginRegister"});
            table14.AddRow(new string[] {
                        "Logins",
                        "NoLogins"});
#line 289
 testRunner.Given("I have these keys", ((string)(null)), table14, "Given ");
#line 299
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 300
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ML14. Get translations of E-mail Stati")]
        public virtual void ML14_GetTranslationsOfE_MailStati()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ML14. Get translations of E-mail Stati", ((string[])(null)));
#line 302
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Section",
                        "Phrase"});
            table15.AddRow(new string[] {
                        "Email",
                        "EmailDisabled"});
            table15.AddRow(new string[] {
                        "Email",
                        "EmailSent"});
            table15.AddRow(new string[] {
                        "Email",
                        "InvalidSubject"});
            table15.AddRow(new string[] {
                        "Email",
                        "InvalidBody"});
            table15.AddRow(new string[] {
                        "Email",
                        "InvalidAddress"});
            table15.AddRow(new string[] {
                        "Email",
                        "EmailNotSent"});
#line 303
 testRunner.Given("I have these keys", ((string)(null)), table15, "Given ");
#line 311
 testRunner.When("I try get the translate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 312
 testRunner.Then("I will receive no multilanguage error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
