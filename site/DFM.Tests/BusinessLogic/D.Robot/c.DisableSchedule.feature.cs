// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.D_Robot
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("c. Disable schedule")]
    public partial class C_DisableScheduleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "c.DisableSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "c. Disable schedule", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I enable Categories use");
#line 6
 testRunner.And("I have two accounts");
#line 7
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Disable a Schedule that doesn\'t exist (E)")]
        public virtual void _01_DisableAScheduleThatDoesnTExistE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Disable a Schedule that doesn\'t exist (E)", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I pass an id of Schedule that doesn\'t exist");
#line 11
 testRunner.When("I try to disable the Schedule");
#line 12
 testRunner.Then("I will receive this core error: InvalidSchedule");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Disable a Schedule already disabled (E)")]
        public virtual void _02_DisableAScheduleAlreadyDisabledE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Disable a Schedule already disabled (E)", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table1.AddRow(new string[] {
                        "Move Db91",
                        "2012-03-31",
                        "Out",
                        "10",
                        "1",
                        "False",
                        "Monthly",
                        "False"});
#line 15
 testRunner.Given("I have this schedule to create", ((string)(null)), table1);
#line 18
 testRunner.And("it has no Details");
#line 19
 testRunner.And("it has a Category");
#line 20
 testRunner.And("it has an Account Out");
#line 21
 testRunner.And("it has no Account In");
#line 22
 testRunner.And("I save the schedule");
#line 23
 testRunner.And("I already have disabled the Schedule");
#line 24
 testRunner.When("I try to disable the Schedule");
#line 25
 testRunner.Then("I will receive this core error: DisabledSchedule");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Disable a Schedule with info all right (S)")]
        public virtual void _99_DisableAScheduleWithInfoAllRightS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Disable a Schedule with info all right (S)", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table2.AddRow(new string[] {
                        "Move Db91",
                        "2012-03-31",
                        "Out",
                        "10",
                        "1",
                        "False",
                        "Monthly",
                        "False"});
#line 28
 testRunner.Given("I have this schedule to create", ((string)(null)), table2);
#line 31
 testRunner.And("it has no Details");
#line 32
 testRunner.And("it has a Category");
#line 33
 testRunner.And("it has an Account Out");
#line 34
 testRunner.And("it has no Account In");
#line 35
 testRunner.And("I save the schedule");
#line 36
 testRunner.When("I try to disable the Schedule");
#line 37
 testRunner.Then("I will receive no core error");
#line 38
 testRunner.And("the Schedule will be disabled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
