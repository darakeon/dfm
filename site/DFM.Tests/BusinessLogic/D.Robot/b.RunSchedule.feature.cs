// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.D_Robot
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("b. Run the schedules for an user")]
    public partial class B_RunTheSchedulesForAnUserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "b.RunSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "b. Run the schedules for an user", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I enable Categories use");
#line 6
 testRunner.And("I have two accounts");
#line 7
 testRunner.And("I have a category");
#line 8
 testRunner.And("I run the scheduler to cleanup older tests");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Run with unlogged user (E)")]
        public virtual void _01_RunWithUnloggedUserE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Run with unlogged user (E)", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I have no logged user (logoff)");
#line 12
 testRunner.When("I try to run the scheduler");
#line 13
 testRunner.Then("I will receive this core error: Unauthorized");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Run with bounded schedule (S)")]
        public virtual void _91_RunWithBoundedScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Run with bounded schedule (S)", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table1.AddRow(new string[] {
                        "Move Db91",
                        "2012-03-31",
                        "Out",
                        "10",
                        "1",
                        "False",
                        "Monthly",
                        "False"});
#line 17
 testRunner.Given("I have this schedule to create", ((string)(null)), table1);
#line 20
 testRunner.And("it has no Details");
#line 21
 testRunner.And("it has a Category");
#line 22
 testRunner.And("it has an Account Out");
#line 23
 testRunner.And("it has no Account In");
#line 24
 testRunner.And("I save the schedule");
#line 25
 testRunner.When("I try to run the scheduler");
#line 26
 testRunner.Then("I will receive no core error");
#line 27
 testRunner.And("the accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Run with boundless schedule (S)")]
        public virtual void _92_RunWithBoundlessScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Run with boundless schedule (S)", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table2.AddRow(new string[] {
                        "Move Db92",
                        "",
                        "Out",
                        "10",
                        "",
                        "True",
                        "Monthly",
                        "False"});
#line 30
 testRunner.Given("I have this schedule to create", ((string)(null)), table2);
#line 33
 testRunner.And("its Date is 3 months ago");
#line 34
 testRunner.And("it has no Details");
#line 35
 testRunner.And("it has a Category");
#line 36
 testRunner.And("it has an Account Out");
#line 37
 testRunner.And("it has no Account In");
#line 38
 testRunner.And("I save the schedule");
#line 39
 testRunner.When("I try to run the scheduler");
#line 40
 testRunner.Then("I will receive no core error");
#line 41
 testRunner.And("the accountOut value will change in -40");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("93. Run schedule that will finish (S)")]
        public virtual void _93_RunScheduleThatWillFinishS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("93. Run schedule that will finish (S)", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table3.AddRow(new string[] {
                        "Move Db93",
                        "",
                        "Out",
                        "10",
                        "3",
                        "False",
                        "Daily",
                        "False"});
#line 44
 testRunner.Given("I have this schedule to create", ((string)(null)), table3);
#line 47
 testRunner.And("its Date is 5 days ago");
#line 48
 testRunner.And("it has no Details");
#line 49
 testRunner.And("it has a Category");
#line 50
 testRunner.And("it has an Account Out");
#line 51
 testRunner.And("it has no Account In");
#line 52
 testRunner.And("I save the schedule");
#line 53
 testRunner.When("I try to run the scheduler");
#line 54
 testRunner.Then("I will receive no core error");
#line 55
 testRunner.And("the accountOut value will change in -30");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("94. Run schedule that wont finish (S)")]
        public virtual void _94_RunScheduleThatWontFinishS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("94. Run schedule that wont finish (S)", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table4.AddRow(new string[] {
                        "Move Db94",
                        "",
                        "Out",
                        "10",
                        "7",
                        "False",
                        "Daily",
                        "False"});
#line 58
 testRunner.Given("I have this schedule to create", ((string)(null)), table4);
#line 61
 testRunner.And("its Date is 5 days ago");
#line 62
 testRunner.And("it has no Details");
#line 63
 testRunner.And("it has a Category");
#line 64
 testRunner.And("it has an Account Out");
#line 65
 testRunner.And("it has no Account In");
#line 66
 testRunner.And("I save the schedule");
#line 67
 testRunner.When("I try to run the scheduler");
#line 68
 testRunner.Then("I will receive no core error");
#line 69
 testRunner.And("the accountOut value will change in -60");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Run with daily schedule (S)")]
        public virtual void _95_RunWithDailyScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Run with daily schedule (S)", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table5.AddRow(new string[] {
                        "Move Db95",
                        "",
                        "Out",
                        "10",
                        "10",
                        "False",
                        "Daily",
                        "False"});
#line 72
 testRunner.Given("I have this schedule to create", ((string)(null)), table5);
#line 75
 testRunner.And("its Date is 20 days ago");
#line 76
 testRunner.And("it has no Details");
#line 77
 testRunner.And("it has a Category");
#line 78
 testRunner.And("it has an Account Out");
#line 79
 testRunner.And("it has no Account In");
#line 80
 testRunner.And("I save the schedule");
#line 81
 testRunner.When("I try to run the scheduler");
#line 82
 testRunner.Then("I will receive no core error");
#line 83
 testRunner.And("the accountOut value will change in -100");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Run with monthly schedule (S)")]
        public virtual void _96_RunWithMonthlyScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Run with monthly schedule (S)", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table6.AddRow(new string[] {
                        "Move Db96",
                        "",
                        "Out",
                        "10",
                        "6",
                        "False",
                        "Monthly",
                        "False"});
#line 86
 testRunner.Given("I have this schedule to create", ((string)(null)), table6);
#line 89
 testRunner.And("its Date is 7 months ago");
#line 90
 testRunner.And("it has no Details");
#line 91
 testRunner.And("it has a Category");
#line 92
 testRunner.And("it has an Account Out");
#line 93
 testRunner.And("it has no Account In");
#line 94
 testRunner.And("I save the schedule");
#line 95
 testRunner.When("I try to run the scheduler");
#line 96
 testRunner.Then("I will receive no core error");
#line 97
 testRunner.And("the accountOut value will change in -60");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Run with yearly schedule (S)")]
        public virtual void _97_RunWithYearlyScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Run with yearly schedule (S)", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table7.AddRow(new string[] {
                        "Move Db97",
                        "",
                        "Out",
                        "10",
                        "2",
                        "False",
                        "Monthly",
                        "False"});
#line 100
 testRunner.Given("I have this schedule to create", ((string)(null)), table7);
#line 103
 testRunner.And("its Date is 2 years ago");
#line 104
 testRunner.And("it has no Details");
#line 105
 testRunner.And("it has a Category");
#line 106
 testRunner.And("it has an Account Out");
#line 107
 testRunner.And("it has no Account In");
#line 108
 testRunner.And("I save the schedule");
#line 109
 testRunner.When("I try to run the scheduler");
#line 110
 testRunner.Then("I will receive no core error");
#line 111
 testRunner.And("the accountOut value will change in -20");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Run with details in schedule (S)")]
        public virtual void _98_RunWithDetailsInScheduleS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Run with details in schedule (S)", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table8.AddRow(new string[] {
                        "Move Db98",
                        "",
                        "Out",
                        "",
                        "5",
                        "False",
                        "Daily",
                        "False"});
#line 114
 testRunner.Given("I have this schedule to create", ((string)(null)), table8);
#line 117
 testRunner.And("its Date is 10 days ago");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table9.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "10"});
            table9.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 118
 testRunner.And("the move has this details", ((string)(null)), table9);
#line 122
 testRunner.And("it has a Category");
#line 123
 testRunner.And("it has an Account Out");
#line 124
 testRunner.And("it has no Account In");
#line 125
 testRunner.And("I save the schedule");
#line 126
 testRunner.When("I try to run the scheduler");
#line 127
 testRunner.Then("I will receive no core error");
#line 128
 testRunner.And("the accountOut value will change in -100");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Run with e-mail system out (S)")]
        public virtual void _99_RunWithE_MailSystemOutS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Run with e-mail system out (S)", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table10.AddRow(new string[] {
                        "Move Db99",
                        "2014-03-22",
                        "Out",
                        "10",
                        "1",
                        "False",
                        "Monthly",
                        "False"});
#line 133
 testRunner.Given("I have this schedule to create", ((string)(null)), table10);
#line 136
 testRunner.And("it has no Details");
#line 137
 testRunner.And("it has a Category");
#line 138
 testRunner.And("it has an Account Out");
#line 139
 testRunner.And("it has no Account In");
#line 140
 testRunner.And("I save the schedule");
#line 141
 testRunner.When("I try to run the scheduler with e-mail system out");
#line 142
 testRunner.Then("I will receive no core error");
#line 143
 testRunner.And("the accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("9A. Run with e-mail system ok (S)")]
        public virtual void _9A_RunWithE_MailSystemOkS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9A. Run with e-mail system ok (S)", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table11.AddRow(new string[] {
                        "Move Db9A",
                        "2014-03-22",
                        "Out",
                        "10",
                        "1",
                        "False",
                        "Monthly",
                        "False"});
#line 146
 testRunner.Given("I have this schedule to create", ((string)(null)), table11);
#line 149
 testRunner.And("it has no Details");
#line 150
 testRunner.And("it has a Category");
#line 151
 testRunner.And("it has an Account Out");
#line 152
 testRunner.And("it has no Account In");
#line 153
 testRunner.And("I save the schedule");
#line 154
 testRunner.When("I try to run the scheduler with e-mail system ok");
#line 155
 testRunner.Then("I will receive no core error");
#line 156
 testRunner.And("the accountOut value will change in -10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("9B. Run with schedule start in past and end in future (S)")]
        public virtual void _9B_RunWithScheduleStartInPastAndEndInFutureS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9B. Run with schedule start in past and end in future (S)", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table12.AddRow(new string[] {
                        "Move Db9B",
                        "",
                        "Out",
                        "10",
                        "5",
                        "False",
                        "Monthly",
                        "False"});
#line 161
 testRunner.Given("I have this schedule to create", ((string)(null)), table12);
#line 164
 testRunner.And("its Date is 2 months ago");
#line 165
 testRunner.And("it has no Details");
#line 166
 testRunner.And("it has a Category");
#line 167
 testRunner.And("it has an Account Out");
#line 168
 testRunner.And("it has no Account In");
#line 169
 testRunner.And("I save the schedule");
#line 170
 testRunner.When("I try to run the scheduler");
#line 171
 testRunner.Then("I will receive no core error");
#line 172
 testRunner.And("the accountOut value will change in -30");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
