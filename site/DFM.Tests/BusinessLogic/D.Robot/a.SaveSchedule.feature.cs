// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.D_Robot
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("a. Creation of schedules")]
    public partial class A_CreationOfSchedulesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "a.SaveSchedule.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "a. Creation of schedules", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I enable Categories use");
#line 6
 testRunner.And("I have two accounts");
#line 7
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Save without Description (E)")]
        public virtual void _01_SaveWithoutDescriptionE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Save without Description (E)", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table1.AddRow(new string[] {
                        "",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 10
 testRunner.Given("I have this future move to create", ((string)(null)), table1);
#line 13
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table2.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 14
 testRunner.And("the move has this schedule", ((string)(null)), table2);
#line 17
 testRunner.And("it has a Category");
#line 18
 testRunner.And("it has an Account Out");
#line 19
 testRunner.And("it has no Account In");
#line 20
 testRunner.When("I try to save the schedule");
#line 21
 testRunner.Then("I will receive this core error: MoveDescriptionRequired");
#line 22
 testRunner.And("the schedule will not be saved");
#line 23
 testRunner.And("the accountOut value will not change");
#line 24
 testRunner.And("the month-category-accountOut value will not change");
#line 25
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Save without Date (E)")]
        public virtual void _02_SaveWithoutDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Save without Date (E)", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table3.AddRow(new string[] {
                        "Move Da02",
                        "",
                        "Out",
                        "10"});
#line 28
 testRunner.Given("I have this future move to create", ((string)(null)), table3);
#line 31
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table4.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 32
 testRunner.And("the move has this schedule", ((string)(null)), table4);
#line 35
 testRunner.And("it has a Category");
#line 36
 testRunner.And("it has an Account Out");
#line 37
 testRunner.And("it has no Account In");
#line 38
 testRunner.When("I try to save the schedule");
#line 39
 testRunner.Then("I will receive this core error: MoveDateRequired");
#line 40
 testRunner.And("the schedule will not be saved");
#line 41
 testRunner.And("the accountOut value will not change");
#line 42
 testRunner.And("the month-category-accountOut value will not change");
#line 43
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Save without Category (E)")]
        public virtual void _03_SaveWithoutCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Save without Category (E)", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table5.AddRow(new string[] {
                        "Move Da03",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 46
 testRunner.Given("I have this future move to create", ((string)(null)), table5);
#line 49
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table6.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 50
 testRunner.And("the move has this schedule", ((string)(null)), table6);
#line 53
 testRunner.And("it has no Category");
#line 54
 testRunner.And("it has an Account Out");
#line 55
 testRunner.And("it has no Account In");
#line 56
 testRunner.When("I try to save the schedule");
#line 57
 testRunner.Then("I will receive this core error: InvalidCategory");
#line 58
 testRunner.And("the schedule will not be saved");
#line 59
 testRunner.And("the accountOut value will not change");
#line 60
 testRunner.And("the month-category-accountOut value will not change");
#line 61
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Save with unknown Category (E)")]
        public virtual void _04_SaveWithUnknownCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Save with unknown Category (E)", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table7.AddRow(new string[] {
                        "Move Da04",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 64
 testRunner.Given("I have this future move to create", ((string)(null)), table7);
#line 67
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table8.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 68
 testRunner.And("the move has this schedule", ((string)(null)), table8);
#line 71
 testRunner.And("it has an unknown Category");
#line 72
 testRunner.And("it has an Account Out");
#line 73
 testRunner.And("it has no Account In");
#line 74
 testRunner.When("I try to save the schedule");
#line 75
 testRunner.Then("I will receive this core error: InvalidCategory");
#line 76
 testRunner.And("the schedule will not be saved");
#line 77
 testRunner.And("the accountOut value will not change");
#line 78
 testRunner.And("the month-category-accountOut value will not change");
#line 79
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Save with Description too large (E)")]
        public virtual void _05_SaveWithDescriptionTooLargeE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Save with Description too large (E)", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table9.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 82
 testRunner.Given("I have this future move to create", ((string)(null)), table9);
#line 85
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table10.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 86
 testRunner.And("the move has this schedule", ((string)(null)), table10);
#line 89
 testRunner.And("it has a Category");
#line 90
 testRunner.And("it has an Account Out");
#line 91
 testRunner.And("it has no Account In");
#line 92
 testRunner.When("I try to save the schedule");
#line 93
 testRunner.Then("I will receive this core error: TooLargeData");
#line 94
 testRunner.And("the schedule will not be saved");
#line 95
 testRunner.And("the accountOut value will not change");
#line 96
 testRunner.And("the month-category-accountOut value will not change");
#line 97
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _11_SaveWithNatureOutAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Save with (Nature: Out) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 101
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table11.AddRow(new string[] {
                        "Move Da11",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 102
 testRunner.Given("I have this future move to create", ((string)(null)), table11);
#line 105
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table12.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 106
 testRunner.And("the move has this schedule", ((string)(null)), table12);
#line 109
 testRunner.And("it has a Category");
#line 110
 testRunner.And("it has no Account Out");
#line 111
 testRunner.And("it has no Account In");
#line 112
 testRunner.When("I try to save the schedule");
#line 113
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 114
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _12_SaveWithNatureOutAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. Save with (Nature: Out) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table13.AddRow(new string[] {
                        "Move Da12",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 117
 testRunner.Given("I have this future move to create", ((string)(null)), table13);
#line 120
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table14.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 121
 testRunner.And("the move has this schedule", ((string)(null)), table14);
#line 124
 testRunner.And("it has a Category");
#line 125
 testRunner.And("it has an Account Out");
#line 126
 testRunner.And("it has an Account In");
#line 127
 testRunner.When("I try to save the schedule");
#line 128
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 129
 testRunner.And("the schedule will not be saved");
#line 130
 testRunner.And("the accountOut value will not change");
#line 131
 testRunner.And("the month-category-accountOut value will not change");
#line 132
 testRunner.And("the year-category-accountOut value will not change");
#line 133
 testRunner.And("the accountIn value will not change");
#line 134
 testRunner.And("the month-category-accountIn value will not change");
#line 135
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _13_SaveWithNatureOutAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. Save with (Nature: Out) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table15.AddRow(new string[] {
                        "Move Da13",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 138
 testRunner.Given("I have this future move to create", ((string)(null)), table15);
#line 141
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table16.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 142
 testRunner.And("the move has this schedule", ((string)(null)), table16);
#line 145
 testRunner.And("it has a Category");
#line 146
 testRunner.And("it has no Account Out");
#line 147
 testRunner.And("it has an Account In");
#line 148
 testRunner.When("I try to save the schedule");
#line 149
 testRunner.Then("I will receive this core error: OutMoveWrong");
#line 150
 testRunner.And("the schedule will not be saved");
#line 151
 testRunner.And("the accountIn value will not change");
#line 152
 testRunner.And("the month-category-accountIn value will not change");
#line 153
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)")]
        public virtual void _14_SaveWithNatureOutAccountOutUnknownAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14. Save with (Nature: Out) (AccountOut:Unknown) (AccountIn:No) (E)", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table17.AddRow(new string[] {
                        "Move Da14",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 156
 testRunner.Given("I have this future move to create", ((string)(null)), table17);
#line 159
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table18.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 160
 testRunner.And("the move has this schedule", ((string)(null)), table18);
#line 163
 testRunner.And("it has a Category");
#line 164
 testRunner.And("it has an unknown Account Out");
#line 165
 testRunner.And("it has no Account In");
#line 166
 testRunner.When("I try to save the schedule");
#line 167
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 168
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _21_SaveWithNatureInAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21. Save with (Nature: In) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table19.AddRow(new string[] {
                        "Move Da21",
                        "2012-03-31",
                        "In",
                        "10"});
#line 173
 testRunner.Given("I have this future move to create", ((string)(null)), table19);
#line 176
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table20.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 177
 testRunner.And("the move has this schedule", ((string)(null)), table20);
#line 180
 testRunner.And("it has a Category");
#line 181
 testRunner.And("it has no Account Out");
#line 182
 testRunner.And("it has no Account In");
#line 183
 testRunner.When("I try to save the schedule");
#line 184
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 185
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)")]
        public virtual void _22_SaveWithNatureInAccountOutYesAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("22. Save with (Nature: In) (AccountOut:Yes) (AccountIn:Yes) (E)", ((string[])(null)));
#line 187
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table21.AddRow(new string[] {
                        "Move Da22",
                        "2012-03-31",
                        "In",
                        "10"});
#line 188
 testRunner.Given("I have this future move to create", ((string)(null)), table21);
#line 191
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table22.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 192
 testRunner.And("the move has this schedule", ((string)(null)), table22);
#line 195
 testRunner.And("it has a Category");
#line 196
 testRunner.And("it has an Account Out");
#line 197
 testRunner.And("it has an Account In");
#line 198
 testRunner.When("I try to save the schedule");
#line 199
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 200
 testRunner.And("the schedule will not be saved");
#line 201
 testRunner.And("the accountOut value will not change");
#line 202
 testRunner.And("the month-category-accountOut value will not change");
#line 203
 testRunner.And("the year-category-accountOut value will not change");
#line 204
 testRunner.And("the accountIn value will not change");
#line 205
 testRunner.And("the month-category-accountIn value will not change");
#line 206
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _23_SaveWithNatureInAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("23. Save with (Nature: In) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 208
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table23.AddRow(new string[] {
                        "Move Da23",
                        "2012-03-31",
                        "In",
                        "10"});
#line 209
 testRunner.Given("I have this future move to create", ((string)(null)), table23);
#line 212
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table24.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 213
 testRunner.And("the move has this schedule", ((string)(null)), table24);
#line 216
 testRunner.And("it has a Category");
#line 217
 testRunner.And("it has an Account Out");
#line 218
 testRunner.And("it has no Account In");
#line 219
 testRunner.When("I try to save the schedule");
#line 220
 testRunner.Then("I will receive this core error: InMoveWrong");
#line 221
 testRunner.And("the schedule will not be saved");
#line 222
 testRunner.And("the accountOut value will not change");
#line 223
 testRunner.And("the month-category-accountOut value will not change");
#line 224
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)")]
        public virtual void _24_SaveWithNatureInAccountOutNoAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("24. Save with (Nature: In) (AccountOut:No) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 226
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table25.AddRow(new string[] {
                        "Move Da24",
                        "2012-03-31",
                        "In",
                        "10"});
#line 227
 testRunner.Given("I have this future move to create", ((string)(null)), table25);
#line 230
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table26.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 231
 testRunner.And("the move has this schedule", ((string)(null)), table26);
#line 234
 testRunner.And("it has a Category");
#line 235
 testRunner.And("it has no Account Out");
#line 236
 testRunner.And("it has an unknown Account In");
#line 237
 testRunner.When("I try to save the schedule");
#line 238
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 239
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)")]
        public virtual void _31_SaveWithNatureTransferAccountOutNoAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:No) (E)", ((string[])(null)));
#line 243
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table27.AddRow(new string[] {
                        "Move Da31",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 244
 testRunner.Given("I have this future move to create", ((string)(null)), table27);
#line 247
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table28.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 248
 testRunner.And("the move has this schedule", ((string)(null)), table28);
#line 251
 testRunner.And("it has a Category");
#line 252
 testRunner.And("it has no Account Out");
#line 253
 testRunner.And("it has no Account In");
#line 254
 testRunner.When("I try to save the schedule");
#line 255
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 256
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)")]
        public virtual void _32_SaveWithNatureTransferAccountOutNoAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("32. Save with (Nature: Transfer) (AccountOut:No) (AccountIn:Yes) (E)", ((string[])(null)));
#line 258
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table29.AddRow(new string[] {
                        "Move Da32",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 259
 testRunner.Given("I have this future move to create", ((string)(null)), table29);
#line 262
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table30.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 263
 testRunner.And("the move has this schedule", ((string)(null)), table30);
#line 266
 testRunner.And("it has a Category");
#line 267
 testRunner.And("it has no Account Out");
#line 268
 testRunner.And("it has an Account In");
#line 269
 testRunner.When("I try to save the schedule");
#line 270
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 271
 testRunner.And("the schedule will not be saved");
#line 272
 testRunner.And("the accountIn value will not change");
#line 273
 testRunner.And("the month-category-accountIn value will not change");
#line 274
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)")]
        public virtual void _33_SaveWithNatureTransferAccountOutYesAccountInNoE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("33. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:No) (E)", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table31.AddRow(new string[] {
                        "Move Da33",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 277
 testRunner.Given("I have this future move to create", ((string)(null)), table31);
#line 280
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table32.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 281
 testRunner.And("the move has this schedule", ((string)(null)), table32);
#line 284
 testRunner.And("it has a Category");
#line 285
 testRunner.And("it has an Account Out");
#line 286
 testRunner.And("it has no Account In");
#line 287
 testRunner.When("I try to save the schedule");
#line 288
 testRunner.Then("I will receive this core error: TransferMoveWrong");
#line 289
 testRunner.And("the schedule will not be saved");
#line 290
 testRunner.And("the accountOut value will not change");
#line 291
 testRunner.And("the month-category-accountOut value will not change");
#line 292
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)")]
        public virtual void _34_SaveWithNatureTransferAccountOutYesAccountInUnknownE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("34. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Unknown) (E)", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table33.AddRow(new string[] {
                        "Move Da34",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 295
 testRunner.Given("I have this future move to create", ((string)(null)), table33);
#line 298
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table34.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 299
 testRunner.And("the move has this schedule", ((string)(null)), table34);
#line 302
 testRunner.And("it has a Category");
#line 303
 testRunner.And("it has an Account Out");
#line 304
 testRunner.And("it has an unknown Account In");
#line 305
 testRunner.When("I try to save the schedule");
#line 306
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 307
 testRunner.And("the schedule will not be saved");
#line 308
 testRunner.And("the accountOut value will not change");
#line 309
 testRunner.And("the month-category-accountOut value will not change");
#line 310
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)")]
        public virtual void _35_SaveWithNatureTransferAccountOutUnknownAccountInYesE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("35. Save with (Nature: Transfer) (AccountOut:Unknown) (AccountIn:Yes) (E)", ((string[])(null)));
#line 312
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table35.AddRow(new string[] {
                        "Move Da35",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 313
 testRunner.Given("I have this future move to create", ((string)(null)), table35);
#line 316
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table36.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 317
 testRunner.And("the move has this schedule", ((string)(null)), table36);
#line 320
 testRunner.And("it has a Category");
#line 321
 testRunner.And("it has an unknown Account Out");
#line 322
 testRunner.And("it has an Account In");
#line 323
 testRunner.When("I try to save the schedule");
#line 324
 testRunner.Then("I will receive this core error: InvalidAccount");
#line 325
 testRunner.And("the schedule will not be saved");
#line 326
 testRunner.And("the accountIn value will not change");
#line 327
 testRunner.And("the month-category-accountIn value will not change");
#line 328
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)")]
        public virtual void _36_SaveWithNatureTransferAccountOutYesAccountInEqualToOutE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("36. Save with (Nature: Transfer) (AccountOut:Yes) (AccountIn:Equal to Out) (E)", ((string[])(null)));
#line 330
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table37.AddRow(new string[] {
                        "Move Da36",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 331
 testRunner.Given("I have this future move to create", ((string)(null)), table37);
#line 334
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table38.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 335
 testRunner.And("the move has this schedule", ((string)(null)), table38);
#line 338
 testRunner.And("it has a Category");
#line 339
 testRunner.And("it has an Account Out");
#line 340
 testRunner.And("it has an Account In equal to Out");
#line 341
 testRunner.When("I try to save the schedule");
#line 342
 testRunner.Then("I will receive this core error: MoveCircularTransfer");
#line 343
 testRunner.And("the schedule will not be saved");
#line 344
 testRunner.And("the accountOut value will not change");
#line 345
 testRunner.And("the month-category-accountOut value will not change");
#line 346
 testRunner.And("the year-category-accountOut value will not change");
#line 347
 testRunner.And("the accountIn value will not change");
#line 348
 testRunner.And("the month-category-accountIn value will not change");
#line 349
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("41. Save without Value or Details (E)")]
        public virtual void _41_SaveWithoutValueOrDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("41. Save without Value or Details (E)", ((string[])(null)));
#line 353
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table39.AddRow(new string[] {
                        "Move Da41",
                        "2012-03-31",
                        "Out",
                        ""});
#line 354
 testRunner.Given("I have this future move to create", ((string)(null)), table39);
#line 357
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table40.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 358
 testRunner.And("the move has this schedule", ((string)(null)), table40);
#line 361
 testRunner.And("it has a Category");
#line 362
 testRunner.And("it has an Account Out");
#line 363
 testRunner.And("it has no Account In");
#line 364
 testRunner.When("I try to save the schedule");
#line 365
 testRunner.Then("I will receive this core error: MoveValueOrDetailRequired");
#line 366
 testRunner.And("the schedule will not be saved");
#line 367
 testRunner.And("the accountOut value will not change");
#line 368
 testRunner.And("the month-category-accountOut value will not change");
#line 369
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("42. Save with Value zero and no Details (E)")]
        public virtual void _42_SaveWithValueZeroAndNoDetailsE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("42. Save with Value zero and no Details (E)", ((string[])(null)));
#line 371
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table41.AddRow(new string[] {
                        "Move Da42",
                        "2012-03-31",
                        "Out",
                        "0"});
#line 372
 testRunner.Given("I have this future move to create", ((string)(null)), table41);
#line 375
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table42.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 376
 testRunner.And("the move has this schedule", ((string)(null)), table42);
#line 379
 testRunner.And("it has a Category");
#line 380
 testRunner.And("it has an Account Out");
#line 381
 testRunner.And("it has no Account In");
#line 382
 testRunner.When("I try to save the schedule");
#line 383
 testRunner.Then("I will receive this core error: MoveValueOrDetailRequired");
#line 384
 testRunner.And("the schedule will not be saved");
#line 385
 testRunner.And("the accountOut value will not change");
#line 386
 testRunner.And("the month-category-accountOut value will not change");
#line 387
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("43. Save without value and without Description in Detail (E)")]
        public virtual void _43_SaveWithoutValueAndWithoutDescriptionInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("43. Save without value and without Description in Detail (E)", ((string[])(null)));
#line 389
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table43.AddRow(new string[] {
                        "Move Da43",
                        "2012-03-31",
                        "Out",
                        ""});
#line 390
 testRunner.Given("I have this future move to create", ((string)(null)), table43);
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table44.AddRow(new string[] {
                        "",
                        "1",
                        "10"});
            table44.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 393
 testRunner.And("the move has this details", ((string)(null)), table44);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table45.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 397
 testRunner.And("the move has this schedule", ((string)(null)), table45);
#line 400
 testRunner.And("it has a Category");
#line 401
 testRunner.And("it has an Account Out");
#line 402
 testRunner.And("it has no Account In");
#line 403
 testRunner.When("I try to save the schedule");
#line 404
 testRunner.Then("I will receive this core error: MoveDetailDescriptionRequired");
#line 405
 testRunner.And("the schedule will not be saved");
#line 406
 testRunner.And("the accountOut value will not change");
#line 407
 testRunner.And("the month-category-accountOut value will not change");
#line 408
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("44. Save without value and with Amount zero in Detail (E)")]
        public virtual void _44_SaveWithoutValueAndWithAmountZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("44. Save without value and with Amount zero in Detail (E)", ((string[])(null)));
#line 410
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table46.AddRow(new string[] {
                        "Move Da44",
                        "2012-03-31",
                        "Out",
                        ""});
#line 411
 testRunner.Given("I have this future move to create", ((string)(null)), table46);
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table47.AddRow(new string[] {
                        "Detail 1",
                        "0",
                        "10"});
            table47.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 414
 testRunner.And("the move has this details", ((string)(null)), table47);
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table48.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 418
 testRunner.And("the move has this schedule", ((string)(null)), table48);
#line 421
 testRunner.And("it has a Category");
#line 422
 testRunner.And("it has an Account Out");
#line 423
 testRunner.And("it has no Account In");
#line 424
 testRunner.When("I try to save the schedule");
#line 425
 testRunner.Then("I will receive this core error: MoveDetailAmountRequired");
#line 426
 testRunner.And("the schedule will not be saved");
#line 427
 testRunner.And("the accountOut value will not change");
#line 428
 testRunner.And("the month-category-accountOut value will not change");
#line 429
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("45. Save without value and with Value zero in Detail (E)")]
        public virtual void _45_SaveWithoutValueAndWithValueZeroInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("45. Save without value and with Value zero in Detail (E)", ((string[])(null)));
#line 431
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table49.AddRow(new string[] {
                        "Move Da45",
                        "2012-03-31",
                        "Out",
                        ""});
#line 432
 testRunner.Given("I have this future move to create", ((string)(null)), table49);
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table50.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "0"});
            table50.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 435
 testRunner.And("the move has this details", ((string)(null)), table50);
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table51.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 439
 testRunner.And("the move has this schedule", ((string)(null)), table51);
#line 442
 testRunner.And("it has a Category");
#line 443
 testRunner.And("it has an Account Out");
#line 444
 testRunner.And("it has no Account In");
#line 445
 testRunner.When("I try to save the schedule");
#line 446
 testRunner.Then("I will receive this core error: MoveDetailValueRequired");
#line 447
 testRunner.And("the schedule will not be saved");
#line 448
 testRunner.And("the accountOut value will not change");
#line 449
 testRunner.And("the month-category-accountOut value will not change");
#line 450
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("46. Save with Description too large in Detail (E)")]
        public virtual void _46_SaveWithDescriptionTooLargeInDetailE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("46. Save with Description too large in Detail (E)", ((string[])(null)));
#line 452
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table52.AddRow(new string[] {
                        "Move Da46",
                        "2012-03-31",
                        "Out",
                        ""});
#line 453
 testRunner.Given("I have this future move to create", ((string)(null)), table52);
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table53.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy",
                        "1",
                        "10"});
#line 456
 testRunner.And("the move has this details", ((string)(null)), table53);
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table54.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 459
 testRunner.And("the move has this schedule", ((string)(null)), table54);
#line 462
 testRunner.And("it has a Category");
#line 463
 testRunner.And("it has an Account Out");
#line 464
 testRunner.And("it has no Account In");
#line 465
 testRunner.When("I try to save the schedule");
#line 466
 testRunner.Then("I will receive this core error: TooLargeData");
#line 467
 testRunner.And("the schedule will not be saved");
#line 468
 testRunner.And("the accountOut value will not change");
#line 469
 testRunner.And("the month-category-accountOut value will not change");
#line 470
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("51. Save without Schedule (E)")]
        public virtual void _51_SaveWithoutScheduleE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("51. Save without Schedule (E)", ((string[])(null)));
#line 474
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table55.AddRow(new string[] {
                        "Move Da51",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 475
 testRunner.Given("I have this future move to create", ((string)(null)), table55);
#line 478
 testRunner.And("it has no Details");
#line 479
 testRunner.And("the move has no schedule");
#line 480
 testRunner.And("it has a Category");
#line 481
 testRunner.And("it has an Account Out");
#line 482
 testRunner.And("it has no Account In");
#line 483
 testRunner.When("I try to save the schedule");
#line 484
 testRunner.Then("I will receive this core error: ScheduleRequired");
#line 485
 testRunner.And("the schedule will not be saved");
#line 486
 testRunner.And("the accountOut value will not change");
#line 487
 testRunner.And("the month-category-accountOut value will not change");
#line 488
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("52. Save with Schedule Times zero and bounded (E)")]
        public virtual void _52_SaveWithScheduleTimesZeroAndBoundedE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("52. Save with Schedule Times zero and bounded (E)", ((string[])(null)));
#line 490
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table56.AddRow(new string[] {
                        "Move Da52",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 491
 testRunner.Given("I have this future move to create", ((string)(null)), table56);
#line 494
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table57.AddRow(new string[] {
                        "0",
                        "False",
                        "Monthly",
                        "False"});
#line 495
 testRunner.And("the move has this schedule", ((string)(null)), table57);
#line 498
 testRunner.And("it has a Category");
#line 499
 testRunner.And("it has an Account Out");
#line 500
 testRunner.And("it has no Account In");
#line 501
 testRunner.When("I try to save the schedule");
#line 502
 testRunner.Then("I will receive this core error: ScheduleTimesCantBeZero");
#line 503
 testRunner.And("the schedule will not be saved");
#line 504
 testRunner.And("the accountOut value will not change");
#line 505
 testRunner.And("the month-category-accountOut value will not change");
#line 506
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Save with info all right (Out) (S)")]
        public virtual void _91_SaveWithInfoAllRightOutS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Save with info all right (Out) (S)", ((string[])(null)));
#line 510
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table58.AddRow(new string[] {
                        "Move Da91",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 511
 testRunner.Given("I have this future move to create", ((string)(null)), table58);
#line 514
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table59.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 515
 testRunner.And("the move has this schedule", ((string)(null)), table59);
#line 518
 testRunner.And("it has a Category");
#line 519
 testRunner.And("it has an Account Out");
#line 520
 testRunner.And("it has no Account In");
#line 521
 testRunner.When("I try to save the schedule");
#line 522
 testRunner.Then("I will receive no core error");
#line 523
 testRunner.And("the schedule will be saved");
#line 524
 testRunner.And("the accountOut value will not change");
#line 525
 testRunner.And("the month-category-accountOut value will not change");
#line 526
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Save with info all right (In) (S)")]
        public virtual void _92_SaveWithInfoAllRightInS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Save with info all right (In) (S)", ((string[])(null)));
#line 528
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table60.AddRow(new string[] {
                        "Move Da92",
                        "2012-03-31",
                        "In",
                        "10"});
#line 529
 testRunner.Given("I have this future move to create", ((string)(null)), table60);
#line 532
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table61.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 533
 testRunner.And("the move has this schedule", ((string)(null)), table61);
#line 536
 testRunner.And("it has a Category");
#line 537
 testRunner.And("it has no Account Out");
#line 538
 testRunner.And("it has an Account In");
#line 539
 testRunner.When("I try to save the schedule");
#line 540
 testRunner.Then("I will receive no core error");
#line 541
 testRunner.And("the schedule will be saved");
#line 542
 testRunner.And("the accountIn value will not change");
#line 543
 testRunner.And("the month-category-accountIn value will not change");
#line 544
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("93. Save with info all right (Transfer) (S)")]
        public virtual void _93_SaveWithInfoAllRightTransferS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("93. Save with info all right (Transfer) (S)", ((string[])(null)));
#line 546
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table62.AddRow(new string[] {
                        "Move Da93",
                        "2012-03-31",
                        "Transfer",
                        "10"});
#line 547
 testRunner.Given("I have this future move to create", ((string)(null)), table62);
#line 550
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table63.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 551
 testRunner.And("the move has this schedule", ((string)(null)), table63);
#line 554
 testRunner.And("it has a Category");
#line 555
 testRunner.And("it has an Account Out");
#line 556
 testRunner.And("it has an Account In");
#line 557
 testRunner.When("I try to save the schedule");
#line 558
 testRunner.Then("I will receive no core error");
#line 559
 testRunner.And("the schedule will be saved");
#line 560
 testRunner.And("the accountOut value will not change");
#line 561
 testRunner.And("the month-category-accountOut value will not change");
#line 562
 testRunner.And("the year-category-accountOut value will not change");
#line 563
 testRunner.And("the accountIn value will not change");
#line 564
 testRunner.And("the month-category-accountIn value will not change");
#line 565
 testRunner.And("the year-category-accountIn value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("94. Save with info all right (value) (S)")]
        public virtual void _94_SaveWithInfoAllRightValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("94. Save with info all right (value) (S)", ((string[])(null)));
#line 567
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table64.AddRow(new string[] {
                        "Move Da94",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 568
 testRunner.Given("I have this future move to create", ((string)(null)), table64);
#line 571
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table65.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 572
 testRunner.And("the move has this schedule", ((string)(null)), table65);
#line 575
 testRunner.And("it has a Category");
#line 576
 testRunner.And("it has an Account Out");
#line 577
 testRunner.And("it has no Account In");
#line 578
 testRunner.When("I try to save the schedule");
#line 579
 testRunner.Then("I will receive no core error");
#line 580
 testRunner.And("the schedule will be saved");
#line 581
 testRunner.And("the accountOut value will not change");
#line 582
 testRunner.And("the month-category-accountOut value will not change");
#line 583
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Save with info all right (details) (S)")]
        public virtual void _95_SaveWithInfoAllRightDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Save with info all right (details) (S)", ((string[])(null)));
#line 585
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table66.AddRow(new string[] {
                        "Move Da95",
                        "2012-03-31",
                        "Out",
                        ""});
#line 586
 testRunner.Given("I have this future move to create", ((string)(null)), table66);
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table67.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "10"});
            table67.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 589
 testRunner.And("the move has this details", ((string)(null)), table67);
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table68.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 593
 testRunner.And("the move has this schedule", ((string)(null)), table68);
#line 596
 testRunner.And("it has a Category");
#line 597
 testRunner.And("it has an Account Out");
#line 598
 testRunner.And("it has no Account In");
#line 599
 testRunner.When("I try to save the schedule");
#line 600
 testRunner.Then("I will receive no core error");
#line 601
 testRunner.And("the schedule will be saved");
#line 602
 testRunner.And("the accountOut value will not change");
#line 603
 testRunner.And("the month-category-accountOut value will not change");
#line 604
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Save negative (value) (S)")]
        public virtual void _96_SaveNegativeValueS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Save negative (value) (S)", ((string[])(null)));
#line 606
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table69.AddRow(new string[] {
                        "Move Da96",
                        "2012-03-31",
                        "Out",
                        "-10"});
#line 607
 testRunner.Given("I have this future move to create", ((string)(null)), table69);
#line 610
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table70.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 611
 testRunner.And("the move has this schedule", ((string)(null)), table70);
#line 614
 testRunner.And("it has a Category");
#line 615
 testRunner.And("it has an Account Out");
#line 616
 testRunner.And("it has no Account In");
#line 617
 testRunner.When("I try to save the schedule");
#line 618
 testRunner.Then("I will receive no core error");
#line 619
 testRunner.And("the schedule will be saved");
#line 620
 testRunner.And("the accountOut value will not change");
#line 621
 testRunner.And("the month-category-accountOut value will not change");
#line 622
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Save negative (details) (S)")]
        public virtual void _97_SaveNegativeDetailsS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Save negative (details) (S)", ((string[])(null)));
#line 624
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table71.AddRow(new string[] {
                        "Move Da97",
                        "2012-03-31",
                        "Out",
                        ""});
#line 625
 testRunner.Given("I have this future move to create", ((string)(null)), table71);
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table72.AddRow(new string[] {
                        "Detail 1",
                        "1",
                        "-10"});
            table72.AddRow(new string[] {
                        "Detail 2",
                        "1",
                        "10"});
#line 628
 testRunner.And("the move has this details", ((string)(null)), table72);
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table73.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 632
 testRunner.And("the move has this schedule", ((string)(null)), table73);
#line 635
 testRunner.And("it has a Category");
#line 636
 testRunner.And("it has an Account Out");
#line 637
 testRunner.And("it has no Account In");
#line 638
 testRunner.When("I try to save the schedule");
#line 639
 testRunner.Then("I will receive no core error");
#line 640
 testRunner.And("the schedule will be saved");
#line 641
 testRunner.And("the accountOut value will not change");
#line 642
 testRunner.And("the month-category-accountOut value will not change");
#line 643
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Save with future Date (E)")]
        public virtual void _98_SaveWithFutureDateE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Save with future Date (E)", ((string[])(null)));
#line 645
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table74.AddRow(new string[] {
                        "Move Da98",
                        "2099-03-31",
                        "Out",
                        "10"});
#line 646
 testRunner.Given("I have this future move to create", ((string)(null)), table74);
#line 649
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table75.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 650
 testRunner.And("the move has this schedule", ((string)(null)), table75);
#line 653
 testRunner.And("it has a Category");
#line 654
 testRunner.And("it has an Account Out");
#line 655
 testRunner.And("it has no Account In");
#line 656
 testRunner.When("I try to save the schedule");
#line 657
 testRunner.Then("I will receive no core error");
#line 658
 testRunner.And("the schedule will be saved");
#line 659
 testRunner.And("the accountOut value will not change");
#line 660
 testRunner.And("the month-category-accountOut value will not change");
#line 661
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Save with exactly length in Description of Detail (S)")]
        public virtual void _99_SaveWithExactlyLengthInDescriptionOfDetailS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Save with exactly length in Description of Detail (S)", ((string[])(null)));
#line 663
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table76.AddRow(new string[] {
                        "Move Da99",
                        "2010-03-31",
                        "Out",
                        ""});
#line 664
 testRunner.Given("I have this future move to create", ((string)(null)), table76);
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table77.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx",
                        "1",
                        "10"});
#line 667
 testRunner.And("the move has this details", ((string)(null)), table77);
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table78.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 670
 testRunner.And("the move has this schedule", ((string)(null)), table78);
#line 673
 testRunner.And("it has a Category");
#line 674
 testRunner.And("it has an Account Out");
#line 675
 testRunner.And("it has no Account In");
#line 676
 testRunner.When("I try to save the schedule");
#line 677
 testRunner.Then("I will receive no core error");
#line 678
 testRunner.And("the schedule will be saved");
#line 679
 testRunner.And("the accountOut value will not change");
#line 680
 testRunner.And("the month-category-accountOut value will not change");
#line 681
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("9A. Save with exactly length in Description (S)")]
        public virtual void _9A_SaveWithExactlyLengthInDescriptionS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9A. Save with exactly length in Description (S)", ((string[])(null)));
#line 683
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table79.AddRow(new string[] {
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx",
                        "2010-03-31",
                        "Out",
                        "10"});
#line 684
 testRunner.Given("I have this future move to create", ((string)(null)), table79);
#line 687
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table80.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 688
 testRunner.And("the move has this schedule", ((string)(null)), table80);
#line 691
 testRunner.And("it has a Category");
#line 692
 testRunner.And("it has an Account Out");
#line 693
 testRunner.And("it has no Account In");
#line 694
 testRunner.When("I try to save the schedule");
#line 695
 testRunner.Then("I will receive no core error");
#line 696
 testRunner.And("the schedule will be saved");
#line 697
 testRunner.And("the accountOut value will not change");
#line 698
 testRunner.And("the month-category-accountOut value will not change");
#line 699
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("9B. Save with details with same description (S)")]
        public virtual void _9B_SaveWithDetailsWithSameDescriptionS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("9B. Save with details with same description (S)", ((string[])(null)));
#line 701
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table81.AddRow(new string[] {
                        "Move Da9D",
                        "2012-03-31",
                        "Out",
                        ""});
#line 702
 testRunner.Given("I have this future move to create", ((string)(null)), table81);
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Amount",
                        "Value"});
            table82.AddRow(new string[] {
                        "Move Da9D",
                        "1",
                        "10"});
#line 705
 testRunner.And("the future move has this details", ((string)(null)), table82);
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table83.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 708
 testRunner.And("the move has this schedule", ((string)(null)), table83);
#line 711
 testRunner.And("it has a Category");
#line 712
 testRunner.And("it has an Account Out");
#line 713
 testRunner.And("it has no Account In");
#line 714
 testRunner.When("I try to save the schedule");
#line 715
 testRunner.Then("I will receive no core error");
#line 716
 testRunner.And("the schedule will be saved");
#line 717
 testRunner.And("the accountOut value will not change");
#line 718
 testRunner.And("the month-category-accountOut value will not change");
#line 719
 testRunner.And("the year-category-accountOut value will not change");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
