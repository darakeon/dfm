// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.B_Admin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("k. Update Config")]
    public partial class K_UpdateConfigFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "k.UpdateConfig.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "k. Update Config", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I enable Categories use");
#line 6
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Disable categories use and save move with category (E)")]
        public virtual void _01_DisableCategoriesUseAndSaveMoveWithCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Disable categories use and save move with category (E)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table1.AddRow(new string[] {
                        "Move Bk01",
                        "2014-03-04",
                        "Out",
                        "10"});
#line 10
 testRunner.And("I have this move to create", ((string)(null)), table1);
#line 13
 testRunner.And("it has no Details");
#line 14
 testRunner.And("it has a Category");
#line 15
 testRunner.And("it has an Account Out");
#line 16
 testRunner.And("it has no Account In");
#line 17
 testRunner.When("I try to save the move");
#line 18
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 19
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Disable categories use and save schedule with category (E)")]
        public virtual void _02_DisableCategoriesUseAndSaveScheduleWithCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Disable categories use and save schedule with category (E)", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table2.AddRow(new string[] {
                        "Schedule Bk02",
                        "2014-03-04",
                        "Out",
                        "10",
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 23
 testRunner.And("I have this schedule to create", ((string)(null)), table2);
#line 26
 testRunner.And("it has no Details");
#line 27
 testRunner.And("it has a Category");
#line 28
 testRunner.And("it has an Account Out");
#line 29
 testRunner.And("it has no Account In");
#line 30
 testRunner.When("I try to save the schedule");
#line 31
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 32
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Disable categories use and create a category (E)")]
        public virtual void _03_DisableCategoriesUseAndCreateACategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Disable categories use and create a category (E)", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Category Bk03"});
#line 36
 testRunner.And("I have this category to create", ((string)(null)), table3);
#line 39
 testRunner.When("I try to save the category");
#line 40
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 41
 testRunner.And("the category will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Disable categories use and select a category (E)")]
        public virtual void _04_DisableCategoriesUseAndSelectACategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Disable categories use and select a category (E)", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I pass a valid category name");
#line 45
 testRunner.And("I disable Categories use");
#line 46
 testRunner.When("I try to get the category by its name");
#line 47
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 48
 testRunner.And("I will receive no category");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05. Disable categories use and disable a category (E)")]
        public virtual void _05_DisableCategoriesUseAndDisableACategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. Disable categories use and disable a category (E)", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I give the enabled category Bk05");
#line 52
 testRunner.And("I disable Categories use");
#line 53
 testRunner.When("I try to disable the category");
#line 54
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06. Disable categories use and enable a category (E)")]
        public virtual void _06_DisableCategoriesUseAndEnableACategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. Disable categories use and enable a category (E)", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I give the disabled category Bk06");
#line 58
 testRunner.And("I disable Categories use");
#line 59
 testRunner.When("I try to enable the category");
#line 60
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11. Change language to en-US")]
        public virtual void _11_ChangeLanguageToEn_US()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. Change language to en-US", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.When("I try to change the language to zz-ZZ");
#line 64
 testRunner.Then("I will receive this core error: LanguageUnkown");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21. Change timezone to en-US")]
        public virtual void _21_ChangeTimezoneToEn_US()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21. Change timezone to en-US", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.When("I try to change the timezone to Someplace");
#line 68
 testRunner.Then("I will receive this core error: TimezoneUnkown");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Disable categories use")]
        public virtual void _91_DisableCategoriesUse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Disable categories use", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I enable Categories use");
#line 74
 testRunner.When("I try to disable Categories use");
#line 75
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Enable categories use")]
        public virtual void _92_EnableCategoriesUse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Enable categories use", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I disable Categories use");
#line 79
 testRunner.When("I try to enable Categories use");
#line 80
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("93. Disable categories use and save move without category (S)")]
        public virtual void _93_DisableCategoriesUseAndSaveMoveWithoutCategoryS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("93. Disable categories use and save move without category (S)", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table4.AddRow(new string[] {
                        "Move Bk93",
                        "2014-03-04",
                        "Out",
                        "10"});
#line 84
 testRunner.And("I have this move to create", ((string)(null)), table4);
#line 87
 testRunner.And("it has no Details");
#line 88
 testRunner.And("it has no Category");
#line 89
 testRunner.And("it has an Account Out");
#line 90
 testRunner.And("it has no Account In");
#line 91
 testRunner.When("I try to save the move");
#line 92
 testRunner.Then("I will receive no core error");
#line 93
 testRunner.And("the move will be saved");
#line 94
 testRunner.And("the accountOut value will change in -10");
#line 95
 testRunner.And("the month-category-accountOut value will change in 10");
#line 96
 testRunner.And("the year-category-accountOut value will change in 10");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("94. Disable categories use and save schedule without category (S)")]
        public virtual void _94_DisableCategoriesUseAndSaveScheduleWithoutCategoryS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("94. Disable categories use and save schedule without category (S)", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value",
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table5.AddRow(new string[] {
                        "Schedule Bk94",
                        "2012-03-31",
                        "Out",
                        "10",
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 100
 testRunner.And("I have this schedule to create", ((string)(null)), table5);
#line 103
 testRunner.And("it has no Details");
#line 104
 testRunner.And("it has no Category");
#line 105
 testRunner.And("it has an Account Out");
#line 106
 testRunner.And("it has no Account In");
#line 107
 testRunner.When("I try to save the schedule");
#line 108
 testRunner.Then("I will receive no core error");
#line 109
 testRunner.And("the schedule will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("95. Change language to pt-BR")]
        public virtual void _95_ChangeLanguageToPt_BR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("95. Change language to pt-BR", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.When("I try to change the language to pt-BR");
#line 113
 testRunner.Then("I will receive no core error");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Translated"});
            table6.AddRow(new string[] {
                        "language",
                        "português"});
#line 114
  testRunner.And("the translation will be", ((string)(null)), table6);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("96. Change language to en-US")]
        public virtual void _96_ChangeLanguageToEn_US()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("96. Change language to en-US", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.When("I try to change the language to en-US");
#line 120
 testRunner.Then("I will receive no core error");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Translated"});
            table7.AddRow(new string[] {
                        "language",
                        "english"});
#line 121
  testRunner.And("the translation will be", ((string)(null)), table7);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("97. Change timezone")]
        public virtual void _97_ChangeTimezone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("97. Change timezone", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.When("I try to change the timezone to E. South America Standard Time");
#line 127
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("98. Disable move send e-mail")]
        public virtual void _98_DisableMoveSendE_Mail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("98. Disable move send e-mail", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
 testRunner.Given("I enable move send e-mail");
#line 131
 testRunner.When("I try to disable move send e-mail");
#line 132
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("99. Enable move send e-mail")]
        public virtual void _99_EnableMoveSendE_Mail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("99. Enable move send e-mail", ((string[])(null)));
#line 134
this.ScenarioSetup(scenarioInfo);
#line 135
 testRunner.Given("I disable move send e-mail");
#line 136
 testRunner.When("I try to enable move send e-mail");
#line 137
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
