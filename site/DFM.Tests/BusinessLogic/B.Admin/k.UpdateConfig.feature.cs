// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.B_Admin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("k. Update Config")]
    public partial class K_UpdateConfigFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "k.UpdateConfig.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "k. Update Config", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user");
#line 5
 testRunner.And("I enable Categories use");
#line 6
 testRunner.And("I have a category");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Disable categories use and save move with category (E)")]
        public virtual void _01_DisableCategoriesUseAndSaveMoveWithCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Disable categories use and save move with category (E)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table1.AddRow(new string[] {
                        "Move Bk01",
                        "2014-03-04",
                        "Out",
                        "10"});
#line 10
 testRunner.And("I have this move to create", ((string)(null)), table1);
#line 13
 testRunner.And("it has no Details");
#line 14
 testRunner.And("it has a Category");
#line 15
 testRunner.And("it has an Account Out");
#line 16
 testRunner.And("it has no Account In");
#line 17
 testRunner.When("I try to save the move");
#line 18
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 19
 testRunner.And("the move will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Disable categories use and save schedule with category (E)")]
        public virtual void _02_DisableCategoriesUseAndSaveScheduleWithCategoryE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Disable categories use and save schedule with category (E)", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table2.AddRow(new string[] {
                        "Schedule Bk02",
                        "2014-03-04",
                        "Out",
                        "10"});
#line 23
 testRunner.Given("I have this future move to create", ((string)(null)), table2);
#line 26
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table3.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 27
 testRunner.And("the move has this schedule", ((string)(null)), table3);
#line 30
 testRunner.And("it has a Category");
#line 31
 testRunner.And("it has an Account Out");
#line 32
 testRunner.And("it has no Account In");
#line 33
 testRunner.When("I try to save the schedule");
#line 34
 testRunner.Then("I will receive this core error: CategoriesDisabled");
#line 35
 testRunner.And("the schedule will not be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Disable categories use and save move without category (S)")]
        public virtual void _91_DisableCategoriesUseAndSaveMoveWithoutCategoryS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Disable categories use and save move without category (S)", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table4.AddRow(new string[] {
                        "Move Bk91",
                        "2014-03-04",
                        "Out",
                        "10"});
#line 39
 testRunner.And("I have this move to create", ((string)(null)), table4);
#line 42
 testRunner.And("it has no Details");
#line 43
 testRunner.And("it has no Category");
#line 44
 testRunner.And("it has an Account Out");
#line 45
 testRunner.And("it has no Account In");
#line 46
 testRunner.When("I try to save the move");
#line 47
 testRunner.Then("I will receive no core error");
#line 48
 testRunner.And("the move will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("92. Disable categories use and save schedule without category (S)")]
        public virtual void _92_DisableCategoriesUseAndSaveScheduleWithoutCategoryS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("92. Disable categories use and save schedule without category (S)", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I disable Categories use");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date",
                        "Nature",
                        "Value"});
            table5.AddRow(new string[] {
                        "Schedule Bk92",
                        "2012-03-31",
                        "Out",
                        "10"});
#line 52
 testRunner.Given("I have this future move to create", ((string)(null)), table5);
#line 55
 testRunner.And("it has no Details");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Times",
                        "Boundless",
                        "Frequency",
                        "ShowInstallment"});
            table6.AddRow(new string[] {
                        "10",
                        "False",
                        "Monthly",
                        "False"});
#line 56
 testRunner.And("the move has this schedule", ((string)(null)), table6);
#line 59
 testRunner.And("it has no Category");
#line 60
 testRunner.And("it has an Account Out");
#line 61
 testRunner.And("it has no Account In");
#line 62
 testRunner.When("I try to save the schedule");
#line 63
 testRunner.Then("I will receive no core error");
#line 64
 testRunner.And("the schedule will be saved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
