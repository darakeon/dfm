// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFM.Tests.BusinessLogic.B_Admin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bl. Get Account List")]
    public partial class Bl_GetAccountListFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "l.GetAccountList.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bl. Get Account List", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I have an active user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bl01. Get all active accounts")]
        public virtual void Bl01_GetAllActiveAccounts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bl01. Get all active accounts", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table1.AddRow(new string[] {
                        "Account Al01.1",
                        "account_al01_1",
                        "",
                        ""});
#line 7
 testRunner.Given("I have this account", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table2.AddRow(new string[] {
                        "Account Al01.2",
                        "account_al01_2",
                        "",
                        ""});
#line 10
 testRunner.And("I have this account", ((string)(null)), table2, "And ");
#line 13
 testRunner.When("ask for the active account list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("I will receive no core error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table3.AddRow(new string[] {
                        "Account Al01.1",
                        "account_al01_1",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "Account Al01.2",
                        "account_al01_2",
                        "",
                        ""});
#line 15
 testRunner.And("the account list will have this", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bl02. Get all active accounts after close one")]
        public virtual void Bl02_GetAllActiveAccountsAfterCloseOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bl02. Get all active accounts after close one", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table4.AddRow(new string[] {
                        "Account Al02.1",
                        "account_al02_1",
                        "",
                        ""});
#line 21
 testRunner.Given("I have this account", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table5.AddRow(new string[] {
                        "Account Al02.2",
                        "account_al02_2",
                        "",
                        ""});
#line 24
 testRunner.And("I have this account", ((string)(null)), table5, "And ");
#line 27
 testRunner.And("this account has moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("I close the account account_al02_2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("ask for the active account list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I will receive no core error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url"});
            table6.AddRow(new string[] {
                        "Account Al02.1",
                        "account_al02_1"});
#line 31
 testRunner.And("the account list will have this", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url"});
            table7.AddRow(new string[] {
                        "Account Al02.2",
                        "account_al02_2"});
#line 34
 testRunner.And("the account list will not have this", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bl03. Get all not active accounts after close one")]
        public virtual void Bl03_GetAllNotActiveAccountsAfterCloseOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bl03. Get all not active accounts after close one", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table8.AddRow(new string[] {
                        "Account Al03.1",
                        "account_al03_1",
                        "",
                        ""});
#line 39
 testRunner.Given("I have this account", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url",
                        "Yellow",
                        "Red"});
            table9.AddRow(new string[] {
                        "Account Al03.2",
                        "account_al03_2",
                        "",
                        ""});
#line 42
 testRunner.And("I have this account", ((string)(null)), table9, "And ");
#line 45
 testRunner.And("this account has moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("I close the account account_al03_2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("ask for the not active account list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("I will receive no core error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url"});
            table10.AddRow(new string[] {
                        "Account Al03.2",
                        "account_al03_2"});
#line 49
 testRunner.And("the account list will have this", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url"});
            table11.AddRow(new string[] {
                        "Account Al03.1",
                        "account_al03_1"});
#line 52
 testRunner.And("the account list will not have this", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
