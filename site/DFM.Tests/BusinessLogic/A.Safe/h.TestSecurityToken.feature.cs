// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace DFM.Tests.BusinessLogic.A_Safe
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("h. Test security token received by e-mail")]
    public partial class H_TestSecurityTokenReceivedByE_MailFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "h.TestSecurityToken.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "h. Test security token received by e-mail", "", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password"});
            table1.AddRow(new string[] {
                        "testsecuritytoken@dontflymoney.com",
                        "password"});
#line 4
 testRunner.Given("I have this user created", ((string)(null)), table1);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Test with invalid token (E)")]
        public virtual void _01_TestWithInvalidTokenE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Test with invalid token (E)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I pass an invalid token");
#line 10
 testRunner.When("I test the token");
#line 11
 testRunner.Then("I will receive this core error: InvalidToken");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Test with token of UV with action PS (E)")]
        public virtual void _02_TestWithTokenOfUVWithActionPSE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Test with token of UV with action PS (E)", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have a token for its activation");
#line 15
 testRunner.And("I pass a token of UserVerification with action PasswordReset");
#line 16
 testRunner.When("I test the token");
#line 17
 testRunner.Then("I will receive this core error: InvalidToken");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03. Test with token of PS with action UV (E)")]
        public virtual void _03_TestWithTokenOfPSWithActionUVE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Test with token of PS with action UV (E)", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have a token for its password reset");
#line 21
 testRunner.And("I pass a token of PasswordReset with action UserVerification");
#line 22
 testRunner.When("I test the token");
#line 23
 testRunner.Then("I will receive this core error: InvalidToken");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04. Test with token when I created another one (E)")]
        public virtual void _04_TestWithTokenWhenICreatedAnotherOneE()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. Test with token when I created another one (E)", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have a token for its activation");
#line 27
 testRunner.And("I have a token for its password reset");
#line 28
 testRunner.And("I pass a token of UserVerification with action UserVerification");
#line 29
 testRunner.When("I test the token");
#line 30
 testRunner.Then("I will receive this core error: InvalidToken");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("90. Test with token of UV with action UV (S)")]
        public virtual void _90_TestWithTokenOfUVWithActionUVS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("90. Test with token of UV with action UV (S)", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have a token for its activation");
#line 34
 testRunner.And("I pass a token of UserVerification with action UserVerification");
#line 35
 testRunner.When("I test the token");
#line 36
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("91. Test with token of PS with action PS (S)")]
        public virtual void _91_TestWithTokenOfPSWithActionPSS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("91. Test with token of PS with action PS (S)", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have a token for its password reset");
#line 40
 testRunner.And("I pass a token of PasswordReset with action PasswordReset");
#line 41
 testRunner.When("I test the token");
#line 42
 testRunner.Then("I will receive no core error");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
