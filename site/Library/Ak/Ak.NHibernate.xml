<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ak.NHibernate</name>
    </assembly>
    <members>
        <member name="T:Ak.NHibernate.AutoMapping.AutoMappingOne2One">
            <summary>
             Extensions to relation 1:1
            </summary>
        </member>
        <member name="M:Ak.NHibernate.AutoMapping.AutoMappingOne2One.IsWeakEntity``2(FluentNHibernate.Automapping.AutoMapping{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             Used on weak entity of 1:1.
             Use HasOne on the strong entity mapping.
            </summary>
            <param name="mapping">Object received in AutoMappingOverride</param>
            <param name="memberExpression">Lambda of entity that is the wrong on relation</param>
        </member>
        <member name="T:Ak.NHibernate.BaseData`1">
            <summary>
            Base communication with DB
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="T:Ak.NHibernate.BaseRepository`1">
            <summary>
            Higher level queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.#ctor">
            <summary>
            Initializes DB reader/writer
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.SaveOrUpdate(`0,Ak.NHibernate.BaseRepository{`0}.DelegateAction[])">
            <summary>
            Records that at DB
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.GetById(System.Int32)">
            <summary>
            Get entity by its ID
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Verify if there is any entity that correspond to the expression
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return unique entity for expression
            </summary>
            <exception cref="T:System.Exception">Not unique object</exception>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.List(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return as list of entities for expression
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.Delete(`0)">
            <summary>
            Delete permanently the entity of DB
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.Delete(System.Int32)">
            <summary>
            Delete permanently the entity of DB
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseRepository`1.GetOldById(System.Int32)">
            <summary>
            Get old data of the entity
            </summary>
        </member>
        <member name="T:Ak.NHibernate.BaseRepository`1.DelegateAction">
            <summary>
            Signature of methods to execute on Save or Update
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Ak.NHibernate.BaseService">
            <summary>
            Base for services, to have transaction
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseService.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseService.BeginTransaction">
            <summary>
            Starts Transaction
            </summary>
            <exception cref="T:Ak.Generic.Exceptions.AkException">Transaction already opened</exception>
        </member>
        <member name="M:Ak.NHibernate.BaseService.CommitTransaction">
            <summary>
            Execute everything at DB
            </summary>
        </member>
        <member name="M:Ak.NHibernate.BaseService.RollbackTransaction">
            <summary>
            Undo all changes
            </summary>
        </member>
        <member name="P:Ak.NHibernate.BaseService.TransactionController">
            <summary>
            To control DB Transaction
            </summary>
        </member>
        <member name="T:Ak.NHibernate.Helpers.DBMS">
            <summary>
            List of accepted DBMSs
            </summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.MySQL">
            <summary></summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.MsSql2000">
            <summary></summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.MsSql2005">
            <summary></summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.MsSql2008">
            <summary></summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.MsSql7">
            <summary></summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.Postgre">
            <summary>Doesn't need SERVER property</summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.Oracle9">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.Oracle10">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBMS.SQLite">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="T:Ak.NHibernate.Helpers.DBAction">
            <summary>
             Action for DB when create SessionFactory
            </summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBAction.None">
            <summary> 
             Don't even validate the schema.
             The errors will appear just when the entity is accessed.
            </summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBAction.Recreate">
            <summary>
             Drop and Create the DB.
             The saved data will be LOST.
            </summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBAction.Update">
            <summary>
             Just ajust the DB to match the entities.
             Can recreate foreign keys.
            </summary>
        </member>
        <member name="F:Ak.NHibernate.Helpers.DBAction.Validate">
            <summary>
             Verify errors on entities and mapping.
             Avoid error to just appear when entities are accessed.
            </summary>
        </member>
        <member name="T:Ak.NHibernate.NHManager">
            <summary>
            Session Manager
            </summary>
        </member>
        <member name="M:Ak.NHibernate.NHManager.Open">
            <summary>
            Open Session and SessionOld to use
            </summary>
        </member>
        <member name="M:Ak.NHibernate.NHManager.Start``2">
            <summary>
            Starts session factory
            </summary>
            <typeparam name="TMap">AutoMappingOverride sample</typeparam>
            <typeparam name="TEntity">Entity sample</typeparam>
        </member>
        <member name="M:Ak.NHibernate.NHManager.Error">
            <summary>
            Handle error case
            </summary>
        </member>
        <member name="M:Ak.NHibernate.NHManager.Close">
            <summary>
            Close session
            </summary>
        </member>
        <member name="M:Ak.NHibernate.NHManager.End">
            <summary>
            Finishes session factory
            </summary>
        </member>
        <member name="P:Ak.NHibernate.NHManager.Session">
            <summary>
            Communicates with DB
            </summary>
        </member>
        <member name="P:Ak.NHibernate.NHManager.SessionOld">
            <summary>
            Helps to get old data without messing with changed entities
            </summary>
        </member>
        <member name="P:Ak.NHibernate.NHManager.IsActive">
            <summary>
            Verify whether can use session
            </summary>
        </member>
        <member name="T:Ak.NHibernate.SessionBuilder">
            <summary>
            To create NHibernate Session and communicate with DB
            </summary>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.Start``2(Ak.NHibernate.UserPassed.ConnectionInfo,Ak.NHibernate.UserPassed.AutoMappingInfo{``0,``1})">
            <summary>
             Create Session Factory.
             To be used at Application_Start.
            </summary>
             <typeparam name="TM">Any mapping class. Passed automatic by passing to AutoMappingInfo.</typeparam>
             <typeparam name="TE">Any entity class. Passed automatic by passing to AutoMappingInfo.</typeparam>
             <param name="connectionInfo">About database connection</param>
             <param name="autoMappingInfo">About mappings on the entities</param>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.Start``2(Ak.NHibernate.UserPassed.AutoMappingInfo{``0,``1})">
            <summary>
            Create Session Factory, using the AppSettings.
            The keys required are the ConnectionInfo class properties.
            To be used at Application_Start.
            </summary>
            <typeparam name="TM">Any mapping class. Passed automatic by passing to AutoMappingInfo.</typeparam>
            <typeparam name="TE">Any entity class. Passed automatic by passing to AutoMappingInfo.</typeparam>
            <param name="autoMappingInfo">About mappings on the entities</param>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.Open">
            <summary>
            Open the NH session.
            To be used at Application_BeginRequest.
            </summary>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.Close(NHibernate.ISession)">
            <summary>
             Disconnect from DB.
             To be used at Application_EndRequest.
            </summary>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.End">
            <summary>
             Close the SessionFactory.
             To be used at Application_End.
            </summary>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.Error(NHibernate.ISession)">
            <summary>
             Rollback the actions in case of Error.
             To be used at Application_Error.
            </summary>
        </member>
        <member name="M:Ak.NHibernate.SessionBuilder.NhInitialize(NHibernate.ISession,System.Object)">
            <summary>
             Force the Initialize of NHibernate objects.
            </summary>
        </member>
        <member name="T:Ak.NHibernate.UserPassed.AutoMappingInfo`2">
            <summary>
            Information to use Automapping of Fluent
            </summary>
            <typeparam name="TM">Some of the AutoMaps, just for reference</typeparam>
            <typeparam name="TE">Some of the Entities, just for reference</typeparam>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.AutoMappingInfo`2.EntityBase">
            <summary>
            EntityBase, if it exists, to be ignored on mapping
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.AutoMappingInfo`2.SuperEntities">
            <summary>
            Classes which subclasses use its table
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.AutoMappingInfo`2.Conventions">
            <summary>
            Conventions to configure Fluent
            </summary>
        </member>
        <member name="T:Ak.NHibernate.UserPassed.ConnectionInfo">
            <summary>
            Information to Connect to the Database.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.Server">
            <summary>
            Server Name. No needed for Postgre and SQLite.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.DataBase">
            <summary>
            Database name in DBMS. No needed for Oracle and SQLLite.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.Login">
            <summary>
            Login for the DB.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.Password">
            <summary>
            Password not encrypted for DB.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.ConnectionString">
            <summary>
            Just for SQLite.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.DBMS">
            <summary>
            Database Managment System used.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.DBAction">
            <summary>
            The Action to be executed when SessionFactory is Created
            Old CreateDB.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.ScriptFileFullName">
            <summary>
            The File Full Name for export Script.
            Just fill if see the script is needed
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.DataInitializer">
            <summary>
            Data to initialize the DB.
            </summary>
        </member>
        <member name="P:Ak.NHibernate.UserPassed.ConnectionInfo.ShowSQL">
            <summary>
            Whether to show SQL in log
            </summary>
        </member>
        <member name="T:Ak.NHibernate.UserPassed.IDataInitializer">
            <summary>
            Inherit this class and pass yours to ConnectionInfo class to fill the DB after create.
            The property CreateDB need to be TRUE.
            </summary>
        </member>
        <member name="M:Ak.NHibernate.UserPassed.IDataInitializer.Initialize">
            <summary>
            Fill the Database.
            </summary>
        </member>
    </members>
</doc>
