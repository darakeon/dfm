@model AccountsIndexModel

@{
	ViewBag.Title = Context.Translate("Accounts");

	var anyAccount = Model.AccountList.Any();
	var anySchedule = Model.AnySchedule();
	var isUsingCategories = Model.IsUsingCategories;
	var isUsingAccountsSigns = Model.IsUsingAccountsSigns;
	var hasAccountsSigns = Model.AccountList.Any(a => a.Sign != AccountSign.None);
	var isUsingMoveCheck = Model.IsUsingMoveCheck;
	var isUsingCurrency = Model.IsUsingCurrency;
	var currencies = Model.AccountList.Select(a => a.Currency).Where(c => c != null).Distinct().Count();
	var isUsingCurrencyOneMore = Model.IsUsingCurrency && currencies == 1;
	var isUsingCurrencyEnough = Model.IsUsingCurrency && currencies >= 2;

	var hl = new WizardHL(isUsingCurrencyEnough, isUsingCurrencyOneMore, isUsingCurrency, isUsingMoveCheck, hasAccountsSigns, isUsingAccountsSigns, isUsingCategories, anySchedule, anyAccount)
		.AddBox("WizardButton", null, null, null, null, null, null, null, null, null, 0)
		.AddBox("StopButton", null, null, null, null, null, null, null, null, null, 2)
		.AddBox("TitleClass", null, null, null, null, null, null, null, null, null, 4)
		.AddBox("NoContent", null, null, null, null, null, null, null, null, null, 6)
		.AddBox("CreateButton", null, null, null, null, null, 1, null, null, null, 7)
		.AddBox("Row", null, null, null, null, null, null, null, null, 0, null)
		.AddBox("Edit", null, null, 0, null, null, null, null, null, 1, null)
		.AddBox("DeleteButton", null, null, null, null, null, null, null, null, 2, null)
		.AddBox("CloseButton", null, null, null, null, null, null, null, null, 3, null)
		.AddBox("Name", null, null, null, 0, null, null, 0, null, 4, null)
		.AddBox("Reports", null, null, null, 0, null, null, 0, null, 4, null)
		.AddBox("AdminMenu", null, null, null, null, null, null, null, 0, null, null)
		.AddBox("SchedulesMenu", null, null, null, null, null, null, null, 0, null, null)
		.AddBox("Sign", null, null, null, null, null, 0, null, null, null, null)
		.AddBox("SignSome", null, null, null, null, 0, null, null, null, null, null)
		.AddBox("SettingsMenu", null, null, null, null, 2, null, null, null, null, null)
		.AddBox("SettingsMainMenu", null, null, null, null, 2, null, null, null, null, null)
		;

	ViewBag.WizardButtonClass = hl["WizardButton"];
	ViewBag.StopButtonClass = hl["StopButton"];

	if (isUsingCurrencyEnough)
	{
		ViewBag.WizardPlus = "CurrencyEnough";
	}
	else if (isUsingCurrencyOneMore)
	{
		ViewBag.WizardPlus = "CurrencyOneMore";
	}
	else if (isUsingCurrency)
	{
		ViewBag.WizardPlus = "Currency";
	}
	else if (isUsingMoveCheck)
	{
		ViewBag.WizardPlus = "MoveCheck";
	}
	else if (hasAccountsSigns)
	{
		ViewBag.WizardPlus = "SignSet";
	}
	else if (isUsingAccountsSigns)
	{
		ViewBag.WizardPlus = "Sign";
	}
	else if (isUsingCategories)
	{
		ViewBag.WizardPlus = "Category";
	}
	else if (anySchedule)
	{
		ViewBag.WizardPlus = "Schedule";
	}

	ViewBag.TitleClass = hl["TitleClass"];
	ViewBag.AdminMenuClass = hl["AdminMenu"];
	ViewBag.SchedulesMenuClass = hl["SchedulesMenu"];

	var createAccountLabel = anyAccount
		? Context.Translate("CreateAnotherAccount")
		: Context.Translate("Create", "Account");

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	ViewBag.HasContent = anyAccount;
	ViewBag.NoContentText = Context.Translate("NoAccounts");
	ViewBag.NoContentClass = hl["NoContent"];

	var buttons = new List<Button>
	{
		Button.ForAction(createAccountLabel, "Create", hl["CreateButton"])
	};

	if (Model.HasClosed)
	{
		buttons.Add(
			Button.ForAction(
				Context.Translate("ClosedAccounts"),
				"ListClosed", true
			)
		);
	}

	ViewBag.Buttons = buttons;

	var route = new Accounts();

	if (hasAccountsSigns)
	{
		ViewBag.SettingsMenuClass = hl["SettingsMenu"];
		ViewBag.SettingsMainMenuClass = hl["SettingsMainMenu"];
	}

	var columnNameSize = Model.IsUsingCurrency ? 4 : 7;
}

@section TableHeader
{
	<tr class="row">
		<th class="col-sm-@columnNameSize">@Context.Translate("Name")</th>
		@if (Model.IsUsingCurrency)
		{
			<th class="col-sm-3 text-center">@Context.Translate("Currency")</th>
		}
		<th class="col-sm-2 text-center">@Context.Translate("Total")</th>
		<th class="col-sm-3 text-center" colspan="3">@Context.Translate("TODO")</th>
	</tr>
}

@foreach (var account in Model.AccountList)
{
	var name = account.Name;

	var reports = new
	{
		area = route.Area,
		accountUrl = account.Url,
		controller = String.Empty,
	};

	<tr class="row @hl["Row"]">
		<td class="col-sm-@columnNameSize @hl["Name"]">
			@Html.RouteLink(name, route.Name, reports,
				new { title = Context.Translate("AccountMoves").Format(name) }
			)
		</td>

		@if (Model.IsUsingCurrency)
		{
			<td class="col-sm-3 text-center">
				@if (account.Currency.HasValue) {
					@Context.Translate(account.Currency.Value.ToString())
				}
			</td>
		}

		<td class="col-sm-2 text-right">
			@if (Model.IsUsingAccountsSigns)
			{
				var signSome = 
					account.Sign == AccountSign.None
						? null : hl["SignSome"];
				
				<span class="pull-left @hl["Sign"] @signSome">
					@await Html.PartialAsync("AccountSign", account.Sign)
				</span>
			}

			@await Html.PartialAsync("Extensions/ValueWithSign",
				new ValueWithSign(account.Total, Model.Language))
		</td>

		<td class="col-sm-1 text-center @hl["Reports"]">
			<a href="@Url.RouteUrl(route.Name, reports)">
				<span class="glyphicon glyphicon-th-list"
						title="@Context.Translate("AccountMoves").Format(name)"></span>
			</a>	
		</td>

		<td class="col-sm-1 text-center @hl["Edit"]">
			<a href="@Url.Action("Edit", "Accounts", new {id = account.Url})">
				<span
					class="glyphicon glyphicon-pencil"
					title="@Context.Translate("Edit") @name"
				></span>
			</a>
		</td>

		@if (account.HasMoves)
		{
			<td class="col-sm-1 text-center @hl["CloseButton"]">
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "eye-close", "Close")
						.AddIdUrl("Close", account.Url)
						.EntityName(name)
					)
			</td>
		}
		else
		{
			<td class="col-sm-1 text-center @hl["DeleteButton"]">
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "trash", "Delete")
						.AddIdUrl("Delete", account.Url)
						.EntityName(name)
					)
			</td>
		}
	</tr>
}
