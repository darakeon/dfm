@model AccountsIndexModel

@{
	ViewBag.Title = Context.Translate("Accounts");

	var anyAccount = Model.AccountList.Any();
	var anySchedule = Model.AnySchedule();

	var hl = new WizardHL(anySchedule, anyAccount)
		.AddBox("WizardButton", null, null, 0)
		.AddBox("SchedulesMenu", 0, null, null)
		.AddBox("NoContent", null, null, 3)
		.AddBox("CreateButton", null, 4, 4)
		.AddBox("DeleteButton", null, 2, null)
		.AddBox("CloseButton", null, 3, null)
		.AddBox("Row", null, 0, null)
		.AddBox("Name", null, 4, null)
		.AddBox("Reports", null, 4, null)
		.AddBox("Edit", null, 1, null)
		.AddBox("TitleClass", null, null, 1);

	ViewBag.WizardButtonClass = hl["WizardButton"];

	ViewBag.WizardPlus =
		anySchedule
			? "Schedule"
			: null;

	ViewBag.TitleClass = hl["TitleClass"];
	ViewBag.SchedulesMenuClass = hl["SchedulesMenu"];

	var createAccountLabel = anyAccount
		? Context.Translate("CreateAnotherAccount")
		: Context.Translate("Create", "Account");

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	ViewBag.HasContent = anyAccount;
	ViewBag.NoContentText = Context.Translate("NoAccounts");
	ViewBag.NoContentClass = hl["NoContent"];

	var buttons = new List<Button>
	{
		new(createAccountLabel, "Create", hl["CreateButton"])
	};

	if (Model.HasClosed)
	{
		buttons.Add(new(
			Context.Translate("ClosedAccounts"),
			"ListClosed", true
		));
	}

	ViewBag.Buttons = buttons;

	var route = new Accounts();
}

@section TableHeader
{
	<tr class="row">
		<th class="col-sm-5">@Context.Translate("Name")</th>
		<th class="col-sm-4 text-center" colspan="3">@Context.Translate("Total")</th>
		<th class="col-sm-3 text-center" colspan="3">@Context.Translate("TODO")</th>
	</tr>
}

@foreach (var account in Model.AccountList)
{
	var name = account.Name;

	var reports = new
	{
		area = route.Area,
		accountUrl = account.Url,
		controller = String.Empty,
	};

	<tr class="row @hl["Row"]">
		<td class="col-sm-5 @hl["Name"]">
			@Html.RouteLink(name, route.Name, reports,
				new { title = Context.Translate("AccountMoves").Format(name) }
			)
		</td>

		<td class="col-sm-1"></td>
		<td class="col-sm-2 text-right">
			@if (Model.IsUsingAccountsSigns)
			{
				<span class="pull-left">
					@await Html.PartialAsync("AccountSign", account.Sign)
				</span>
			}

			@await Html.PartialAsync("Extensions/ValueWithSign",
				new ValueWithSign(account.Total, Model.Language))
		</td>
		<td class="col-sm-1"></td>

		<td class="col-sm-1 text-center @hl["Reports"]">
			<a href="@Url.RouteUrl(route.Name, reports)">
				<span class="glyphicon glyphicon-th-list"
					  title="@Context.Translate("AccountMoves").Format(name)"></span>
			</a>	
		</td>

		<td class="col-sm-1 text-center @hl["Edit"]">
			<a href="@Url.Action("Edit", "Accounts", new {id = account.Url})">
				<span
					class="glyphicon glyphicon-pencil"
					title="@Context.Translate("Edit") @name"
				></span>
			</a>
		</td>

		@if (account.HasMoves)
		{
			<td class="col-sm-1 text-center @hl["CloseButton"]">
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "eye-close", "Close")
						.AddIdUrl("Close", account.Url)
						.EntityName(name)
					)
			</td>
		}
		else
		{
			<td class="col-sm-1 text-center @hl["DeleteButton"]">
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "trash", "Delete")
						.AddIdUrl("Delete", account.Url)
						.EntityName(name)
					)
			</td>
		}
	</tr>
}
