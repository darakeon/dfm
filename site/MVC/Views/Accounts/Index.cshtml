@model AccountsIndexModel

@{
	ViewBag.Title = Context.Translate("Accounts");

	ViewBag.WizardMessage =
		Model.AccountList.Any()
			? "AccountsIndexFilled"
			: "AccountsIndexEmpty";

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	ViewBag.HasContent = Model.AccountList.Any();
	ViewBag.NoContentText = Context.Translate("NoAccounts");
	ViewBag.Buttons = new List<Button>
	{
		new(Context.Translate("ClosedAccounts"), "ListClosed", true),
		new(Context.Translate("Create", "Account"), "Create")
	};

	var route = new Accounts();
}

@section TableHeader
{
	<tr class="row">
		<th class="col-sm-5">@Context.Translate("Name")</th>
		<th class="col-sm-4 text-center" colspan="3">@Context.Translate("Total")</th>
		<th class="col-sm-3 text-center" colspan="3">@Context.Translate("TODO")</th>
	</tr>
}

@foreach (var account in Model.AccountList)
{
	var name = account.Name;

	var reports = new
	{
		area = route.Area,
		accountUrl = account.Url,
		controller = String.Empty,
	};

	<tr class="row">
		<td class="col-sm-5">
			@Html.RouteLink(name, route.Name, reports,
				new { title = Context.Translate("AccountMoves").Format(name) }
			)
		</td>

		<td class="col-sm-1"></td>
		<td class="col-sm-2 text-right">
			<span class="pull-left">
				@await Html.PartialAsync("AccountSign", account.Sign)
			</span>

			@await Html.PartialAsync("Extensions/ValueWithSign",
				new ValueWithSign(account.Total, Model.Language))
		</td>
		<td class="col-sm-1"></td>

		<td class="col-sm-1 text-center">
			<a href="@Url.RouteUrl(route.Name, reports)">
				<span class="glyphicon glyphicon-th-list"
					  title="@Context.Translate("AccountMoves").Format(name)"></span>
			</a>	
		</td>

		<td class="col-sm-1 text-center">
			<a href="@Url.Action("Edit", "Accounts", new {id = account.Url})">
				<span
					class="glyphicon glyphicon-edit"
					title="@Context.Translate("Edit") @name"
				></span>
			</a>
		</td>

		<td class="col-sm-1 text-center">
			@if (account.HasMoves)
			{
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "eye-close", "Close")
						.AddIdUrl("Close", account.Url)
						.EntityName(name)
				)
			}
			else
			{
				@await Html.PartialAsync("Extensions/MicroForm",
					MicroForm.WithGlyph(Context, "trash", "Delete")
						.AddIdUrl("Delete", account.Url)
						.EntityName(name)
				)
			}
		</td>
	</tr>
}
