@model AccountsCreateEditModel

@{
	ViewBag.Title = Context.Translate(Model.ActionName, "Account");

	var isEdit = Model.Type == OperationType.Edition;

	if (isEdit)
	{
		ViewBag.Title += $" [{Model.Account.Name}]";
	}

	Layout = "~/Views/Shared/Layouts/_Form.cshtml";

	var isAccountsSign = Model.IsUsingAccountsSigns;
	var isCurrency = Model.IsUsingCurrency;

	var hl = new WizardHL(isCurrency, isAccountsSign, isEdit)
		.AddBox("Name", null, null, null, 1)
		.AddBox("Button", 1, null, null, 2)
		.AddBox("Accounts", null, null, 3, null)
		.AddBox("Currency", 0, null, null, null)
		.AddBox("SignsBlock", null, 0, null, null)
		.AddBox("SignEnable", null, 1, null, null)
		.AddBox("SignAttentionValue", null, 3, null, null)
		.AddBox("SignDangerValue", null, 4, null, null)
		.AddBox("SignNone", null, 5, null, null)
		.AddBox("SignHealthy", null, 6, null, null)
		.AddBox("SignAttention", null, 7, null, null)
		.AddBox("SignDanger", null, 8, null, null)
		;

	ViewBag.AccountsMenuClass = hl["Accounts"];
	ViewBag.TitleClass = "wizard-scroll-9";

	if (isCurrency)
	{
		ViewBag.WizardPlus = "Currency";
	}
	else if (isAccountsSign)
	{
		ViewBag.WizardPlus = "Sign";
	}
}

@section Scripts {
	<script src="/Assets/scripts/suggest.js?v=@Cfg.Version" type="text/javascript"></script>
	<script src="/Assets/scripts/toggle.js?v=@Cfg.Version" type="text/javascript"></script>
}

<div class="form-group">
	@Html.LabelFor(m => m.Account.Name, Context.Translate("Name"), new { @class = "control-label" })
	@Html.TextBoxFor(m => m.Account.Name, new { maxlength = MaxLen.AccountName, @class = "form-control suggest-field " + hl["Name"], data_target = ".suggest-target" })
	<small>@String.Format(Context.Translate("CharactersMax"), MaxLen.AccountName)</small>
</div>

@Html.HiddenFor(m => m.Type)
@Html.HiddenFor(m => m.Account.OriginalUrl)

@if (Model.IsUsingCurrency)
{
	<div class="form-group">
		@Html.LabelFor(m => m.Account.Currency, Context.Translate("Currency"), new { @class = "control-label" })
		@Html.DropDownListFor(m => m.Account.Currency, Model.CurrencySelectList, "-- " + Context.Translate("Select") + " --", new { @class = "form-control " + hl["Currency"] })
	</div>
}

@if (Model.IsUsingAccountsSigns)
{
	<div class="@hl["SignsBlock"]">

		<div class="form-group text-center">
			@Html.CheckBoxFor(m => m.HasLimit, 
				new
				{
					@class = "check-toggle " + hl["SignEnable"], 
					data_to_enable = ".limit"
				}
			)
		
			@Html.LabelFor(m => m.HasLimit,
				Context.Translate("AccountHasLimit"),
				new { @class = "control-label" }
			)
		
			<span
				class="glyphicon glyphicon-info-sign"
				title="@Context.Translate("LimitExplanation")"
			></span>

			<br />
			
			@Context.Translate("GreenLimit") =
			<span class="@hl["SignHealthy"]">
				(@await Html.PartialAsync("AccountSign", AccountSign.Green))
			</span>
			
			//

			@Context.Translate("NoneLimit") =
			<span class="@hl["SignNone"]">
				(@await Html.PartialAsync("AccountSign", AccountSign.None))
			</span>
		</div>

		<div class="form-group @hl["SignAttentionValue"]">
			@Html.LabelFor(
				m => m.YellowLimit, 
				Context.Translate("YellowLimit"), 
				new { @class = "control-label" }
			)

			<span class="@hl["SignAttention"]">
				(@await Html.PartialAsync("AccountSign", AccountSign.Yellow))
			</span>
			
			@Html.TextBoxFor(
				m => m.YellowLimit, 
				new
				{
					@class = "form-control limit number", 
					data_allow_negative = 1, 
					data_allow_zero = 1
				}
			)
		</div>

		<div class="form-group @hl["SignDangerValue"]">
			@Html.LabelFor(
				m => m.RedLimit, 
				Context.Translate("RedLimit"), 
				new { @class = "control-label" }
			)
			
			<span class="@hl["SignDanger"]">
				(@await Html.PartialAsync("AccountSign", AccountSign.Red))
			</span>
			
			@Html.TextBoxFor(
				m => m.RedLimit, 
				new
				{
					@class = "form-control limit number", 
					data_allow_negative = 1, 
					data_allow_zero = 1
				}
			)
		</div>
	</div>
}

@section Footer {
	<button class="btn btn-success @hl["Button"]" type="submit">
		@Context.Translate(Model.ActionName)
	</button>
}
