@model BaseSiteModel

@{
	var settingsRoute = new Default.Main();

	const String menuHL = " wl-other-color";
	var settingsClass = ViewBag.SettingsMenuClass;
	if (settingsClass != null) settingsClass += menuHL;
	var settingsMainClass = ViewBag.SettingsMainMenuClass;
	if (settingsMainClass != null) settingsMainClass += menuHL;
	var settingsEmailClass = ViewBag.SettingsEmailMenuClass;
	if (settingsEmailClass != null) settingsEmailClass += menuHL;
}

<li class="dropdown" id="settings">
	<a class="dropdown-toggle @settingsClass hide-whl-after-click" data-toggle="dropdown" role="button">
		<span class="glyphicon glyphicon-cog" title="@Context.Translate("Settings")"></span>
	</a>

	<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu">
		<li id="settings_main">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("MainSettings"),
				"Index", "Configs",
				new { @class = "text-right " + settingsMainClass }
			)
		</li>

		<li id="settings_email">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("EmailSettings"),
				"Email", "Configs",
				new { @class = "text-right " + settingsEmailClass }
			)
		</li>

		<li id="settings_password">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("PasswordSettings"),
				"Password", "Configs",
				new { @class = "text-right" }
			)
		</li>

		<li id="settings_tfa">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("TFASettings"),
				"TFA", "Configs",
				new { @class = "text-right" }
			)
		</li>

		<li id="settings_theme">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("ThemeSettings"),
				"Theme", "Configs",
				new { @class = "text-right" }
			)
		</li>

		<li id="settings_misc">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("MiscSettings"),
				"Misc", "Configs",
				new { @class = "text-right" }
			)
		</li>

		<li id="settings_wipe">
			@settingsRoute.MakeUrl(
				Html,
				Context.Translate("WipeSettings"),
				"Wipe", "Configs",
				new { @class = "text-right" }
			)
		</li>
	</ul>
</li>
