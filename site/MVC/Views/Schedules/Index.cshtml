@using DFM.Language.Extensions
@model SchedulesIndexModel

@{
	ViewBag.Title = Context.Translate("Schedules");

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	var anySchedules = Model.ScheduleList.Any();

	var hl = new WizardHL(anySchedules)
		.AddBox("Row", 0, null)
		.AddBox("Times", 1, null)
		.AddBox("Run", 2, null)
		.AddBox("Deleted", 2, null)
		.AddBox("Delete", 3, null)
		.AddBox("NoContent", null, 0)
		.AddBox("Accounts", null, 1)
		.AddBox("Settings", null, 2)
		.AddBox("SettingsMain", null, 2);

	ViewBag.HasContent = anySchedules;
	ViewBag.NoContentText = Context.Translate("NoSchedules");
	ViewBag.NoContentClass = hl["NoContent"];
	
	ViewBag.AccountsMenuClass = hl["Accounts"];
	ViewBag.SettingsMenuClass = hl["Settings"];
	ViewBag.SettingsMainMenuClass = hl["SettingsMain"];

	var useCategories = Context.GetService().Current.UseCategories;
	var descriptionSize = useCategories ? 2 : 3;

	/* ADD WARNING TO SCHEDULES THAT WON'T RUN BECAUSE OF CATEGORY-USE PROBLEM */
}

@await Html.PartialAsync("Modals/ScheduleRobotInterval")

@section TableHeader {
	<tr class="row">
		<th class="col-sm-@descriptionSize">
			@Context.Translate("Description")
		</th>

		<th class="col-sm-2 text-center">@Context.Translate("Account")</th>

		@if (useCategories)
		{
			<th class="col-sm-1 text-center">
				@Context.Translate("Category")
			</th>
		}

		<th class="col-sm-1 text-center">@Context.Translate("Date")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Frequency")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Times")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Run")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Deleted")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Value")</th>
		<th class="col-sm-1 text-center">@Context.Translate("TODO")</th>
	</tr>
}

@foreach (var schedule in Model.ScheduleList)
{
	var @in = schedule.InName;
	var @out = schedule.OutName;

	<tr class="row @hl["Row"]">
		<td>
			@schedule.Description
		</td>

		<td class="text-center">
			@(@out)
			@if (@in != null && @out != null) {@(" > ")}
			@(@in)
		</td>

		@if (useCategories)
		{
			<td class="text-center">
				@(schedule.CategoryName ?? "---")
			</td>
		}

		<td class="text-center">
			@schedule.GetDate().ToShortDateString()
		</td>

		<td class="text-center">
			@Context.Translate(schedule.Frequency.ToString())
		</td>

		<td class="text-center @hl["Times"]">
			@(schedule.Boundless ? null : $"{schedule.Times}x")
		</td>

		<td class="text-center @hl["Run"]">
			@schedule.Run
		</td>

		<td class="text-center @hl["Deleted"]">
			@schedule.Deleted
		</td>

		<td class="
			text-@await Html.PartialAsync("Extensions/NatureColor", schedule.Nature)
			text-right
		">
			<span
				class="@await Html.PartialAsync("Extensions/NatureIcon", schedule.Nature)"
				title="@Context.Translate(schedule.Nature.ToString())"
			></span>
			@schedule.Value.ToMoney(Model.Language)
		</td>

		<td class="text-center @hl["Delete"]">
			@await Html.PartialAsync("Extensions/MicroForm",
				MicroForm.WithGlyph(Context, "trash", "Delete")
					.AddIdUrl("Delete", schedule.Guid)
					.EntityName(schedule.Description)
			)
		</td>
	</tr>
}
