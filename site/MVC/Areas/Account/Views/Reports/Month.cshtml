@model ReportsMonthModel

@{
	ViewBag.Title = Model.Date;

	var hasMoves = Model.MoveList.Any();
	var hasForeseenMoves = Model.ForeseenList.Any();

	var isUsingCategoriesCreate = Model.IsUsingCategories;
	var isUsingCategoriesEdit = isUsingCategoriesCreate && hasMoves;
	var hasCategory = isUsingCategoriesCreate
		&& Model.MoveList.Any(m => m.Move.CategoryName != null);

	var isUsingMoveCheckCreate = Model.IsUsingMoveCheck;
	var isUsingMoveCheckEdit = isUsingMoveCheckCreate && hasMoves;

	var isUsingCurrency = Model.IsUsingCurrency;

	var hl = new WizardHL(
		isUsingCurrency,
		isUsingMoveCheckEdit, isUsingMoveCheckCreate,
		hasCategory, isUsingCategoriesEdit, isUsingCategoriesCreate,
		hasForeseenMoves, hasMoves
	)
		.AddBox("MoveMenuClass", 0, null, 1, null, null, null, null, null, 2)
		.AddBox("ReportsMenuClass", null, null, null, 1, null, null, null, 5, null)
		.AddBox("ExtractMenuClass", null, null, null, null, null, null, null, null, null)
		.AddBox("SummaryMenuClass", null, null, null, null, null, null, null, 5, null)
		.AddBox("HomeMenuClass", null, null, null, null, null, null, 4, null, null)
		.AddBox("TitleClass", null, null, null, null, null, null, null, 2, null)
		.AddBox("Pagination", null, null, 2, null, null, null, null, 3, null)
		.AddBox("Total", null, null, null, null, null, null, 2, 4, null)
		.AddBox("Foreseen", null, null, null, null, null, null, 3, null, null)
		.AddBox("Button", null, null, 1, null, null, 1, null, null, 2)
		.AddBox("CategoriesMenuClass", null, null, null, 1, null, null, null, null, null)
		.AddBox("SettingsMenuClass", null, 5, null, null, null, null, null, null, null)
		.AddBox("SettingsMainMenuClass", null, 5, null, null, null, null, null, null, null)
		;

	var hlPastMove = new WizardHL(
		isUsingCurrency,
		isUsingMoveCheckEdit, isUsingMoveCheckCreate,
		hasCategory, isUsingCategoriesEdit, isUsingCategoriesCreate,
		hasForeseenMoves
	)
		.AddBox("MoveRow", null, null, null, null, null, null, null, 0)
		.AddBox("MoveEdit", null, null, null, null, 1, null, null, 1)
		.AddBox("MoveDelete", null, null, null, null, null, null, null, 1)
		.AddBox("MoveDate", null, null, null, null, null, null, null, null)
		.AddBox("MoveCategory", null, null, null, 0, 0, null, null, null)
		.AddBox("MoveStatus", null, 0, null, null, null, null, null, null)
		.AddBox("MoveCheck", null, 4, null, null, null, null, null, null);

	var hlFutureMove = new WizardHL(
		isUsingCurrency,
		isUsingMoveCheckEdit, isUsingMoveCheckCreate,
		hasCategory, isUsingCategoriesEdit, isUsingCategoriesCreate,
		hasForeseenMoves
	)
		.AddBox("MoveRow", null, null, null, null, null, null, 0, null)
		.AddBox("MoveEdit", null, null, null, null, null, null, null, null)
		.AddBox("MoveDelete", null, null, null, null, null, null, null, null)
		.AddBox("MoveDate", null, null, null, null, null, null, 1, null)
		.AddBox("MoveCategory", null, null, null, null, null, null, null, null)
		.AddBox("MoveStatus", null, null, null, null, null, null, null, null)
		.AddBox("MoveCheck", null, null, null, null, null, null, null, null);

	ViewBag.MoveMenuClass = hl["MoveMenuClass"];
	ViewBag.ReportsMenuClass = hl["ReportsMenuClass"];
	ViewBag.ExtractMenuClass = hl["ExtractMenuClass"];
	ViewBag.SummaryMenuClass = hl["SummaryMenuClass"];
	ViewBag.HomeMenuClass = hl["HomeMenuClass"];
	ViewBag.CategoriesMenuClass = hl["CategoriesMenuClass"];
	ViewBag.SettingsMenuClass = hl["SettingsMenuClass"];
	ViewBag.SettingsMainMenuClass = hl["SettingsMainMenuClass"];
	ViewBag.TitleClass = hl["TitleClass"];

	if (isUsingCurrency)
	{
		ViewBag.WizardPlus = "Currency";
	}
	else if (isUsingMoveCheckCreate)
	{
		if (!hasMoves)
			ViewBag.WizardPlus = "MoveCheckCreate";

		else
			ViewBag.WizardPlus = "MoveCheckEdit";
	}
	else if (isUsingCategoriesCreate)
	{
		if (!hasMoves)
			ViewBag.WizardPlus = "CategoryCreate";

		else if (hasCategory)
			ViewBag.WizardPlus = "CategoryDone";

		else
			ViewBag.WizardPlus = "CategoryEdit";
	}
	else if (hasForeseenMoves)
	{
		ViewBag.WizardPlus = "Schedule";
	}

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	ViewBag.HasContent = hasMoves || hasForeseenMoves;
	ViewBag.NoContentText = Context.Translate("NoMonthMoves");

	var start = Model.Account.Start;
	var date = new DateTime(Model.Year, Model.Month, 1);
	var end = Model.Account.End ??
		(date < start ? start : date).AddMonths(4);

	var startPage = new MonthYearUnit(start);
	var endPage = new MonthYearUnit(end);
	var currentPage = new MonthYearUnit(date);

	var pages = new Pages(startPage, endPage, currentPage, 5);

	var allMoves = Model.MoveList
		.Union(Model.ForeseenList)
		.Select(m => m.Move)
		.ToList();

	if (!allMoves.Any())
	{
		ViewBag.Buttons = new List<Button>
		{
			new(
				Context.Translate("Create", "Move"),
				"Moves", "Create",
				hl["Button"]
			)
		};
	}
}

@section TableHeader {

	@{
		var descriptionSize = 2
			+ (Model.CanCheck ? 0 : 2)
			+ (Model.IsUsingCategories ? 0 : 2);

		var colspan = Model.CanCheck ? 3 : 2;
	}

	<tr class="row">
		<th class="col-sm-@descriptionSize">@Context.Translate("Description")</th>
		<th class="col-sm-1"></th>

		@if (Model.IsUsingCategories)
		{
			<th class="col-sm-2 text-center">@Context.Translate("Category")</th>
		}

		<th class="col-sm-1 text-center">@Context.Translate("Date")</th>
		<th class="col-sm-1 text-center">@Context.Translate("In")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Out")</th>

		@if (Model.CanCheck)
		{
			<th class="col-sm-1 text-center">@Context.Translate("Status")</th>
		}

		<th class="col-sm-@(Model.CanCheck ? 3 : 2) text-center" colspan="@colspan">
			@Context.Translate("TODO")
		</th>
	</tr>
}

@foreach (var subModel in Model.MoveList)
{
	subModel.WizardHL = hlPastMove;
	@await Html.PartialAsync("MoveLine", subModel)
}

@if (hasForeseenMoves)
{
	var colspanTitle = Model.IsUsingCategories ? 6 : 5;
	var colspanLateral = Model.CanCheck ? 4 : 2;
	var rowspanLateral = Model.ForeseenList.Count + 1;

	<tr class="row foreseen">
		<td colspan="@colspanTitle">
		</td>
		<td colspan="@colspanLateral" rowspan="@rowspanLateral" class="text-right">
			@Context.Translate("ForeseenMove").ToUpper()
		</td>
	</tr>
}

@foreach (var subModel in Model.ForeseenList)
{
	subModel.WizardHL = hlFutureMove;
	@await Html.PartialAsync("MoveLine", subModel)
}

@section Footer {
	@{
		var movesWithDetails = allMoves
			.Where(m => m.DetailList.Any());
	}

	@foreach (var move in movesWithDetails)
	{
		@await Html.PartialAsync(
			"Modals/Details",
			new DetailsModel(move, Model.Language)
		)
	}

	@{
		var schedules = allMoves
			.Where(m => m.Schedule != null)
			.Select(m => m.Schedule)
			.Distinct();
	}

	@foreach (var schedule in schedules)
	{
		@await Html.PartialAsync(
			"Modals/Schedule",
			schedule
		)
	}
	
	@if (Model.AccountHasMoves || Model.Foreseen.HasValue)
	{
		Model.ForeseenClass = hl["Foreseen"];

		<div class="row">
			<div class="col-lg-2 col-sm-2"></div>

			<div class="col-lg-8 col-sm-8 text-center @hl["Pagination"]">
				@await Html.PartialAsync("Extensions/Pagination", pages)
			</div>

			<div class="col-lg-2 col-sm-2 @hl["Total"]">
				@await Html.PartialAsync("Total")
			</div>
		</div>
	}
}

@section Styles {
	<link type="text/css" rel="stylesheet"
		href="~/Assets/styles/reports.css?v=@Cfg.Version" />
}

@section Scripts {
	<script type="text/javascript"
		src="~/Assets/scripts/table-sum.js?v=@Cfg.Version">
	</script>
}
