@model ReportsMonthModel

@{
	ViewBag.Title = Model.Date;

	var hasMoves = Model.MoveList.Any();

	ViewBag.WizardMessage =
		hasMoves
			? "MonthFilled"
			: "MonthEmpty";

	ViewBag.WizardCount =
		hasMoves
			? 0
			: 3;

	ViewBag.MoveMenuClass =
		hasMoves
			? ""
			: "wizard-highlight-2 adjust-padding";

	Layout = "~/Views/Shared/Layouts/_Table.cshtml";

	ViewBag.HasContent = hasMoves || Model.ForeseenList.Any();
	ViewBag.NoContentText = Context.Translate("NoMonthMoves");

	var start = Model.Account.Start;
	var date = new DateTime(Model.Year, Model.Month, 1);
	var end = Model.Account.End ??
		(date < start ? start : date).AddMonths(4);

	var startPage = new MonthYearUnit(start);
	var endPage = new MonthYearUnit(end);
	var currentPage = new MonthYearUnit(date);

	var pages = new Pages(startPage, endPage, currentPage, 5);

	var allMoves = Model.MoveList
		.Union(Model.ForeseenList)
		.Select(m => m.Move)
		.ToList();

	if (!Model.AccountHasMoves)
	{
		ViewBag.Buttons = new List<Button>
		{
			new(Context.Translate("Create", "Move"), "Moves", "Create", "wizard-highlight-2")
		};
	}
}

@section TableHeader {

	@{
		var descriptionSize = 2
			+ (Model.CanCheck ? 0 : 2)
			+ (Model.IsUsingCategories ? 0 : 2);

		var colspan = Model.CanCheck ? 3 : 2;
	}

	<tr class="row">
		<th class="col-sm-@descriptionSize">@Context.Translate("Description")</th>
		<th class="col-sm-1"></th>

		@if (Model.IsUsingCategories)
		{
			<th class="col-sm-2 text-center">@Context.Translate("Category")</th>
		}

		<th class="col-sm-1 text-center">@Context.Translate("Date")</th>
		<th class="col-sm-1 text-center">@Context.Translate("In")</th>
		<th class="col-sm-1 text-center">@Context.Translate("Out")</th>

		@if (Model.CanCheck)
		{
			<th class="col-sm-1 text-center">@Context.Translate("Status")</th>
		}

		<th class="col-sm-@(Model.CanCheck ? 3 : 2) text-center" colspan="@colspan">
			@Context.Translate("TODO")
		</th>
	</tr>
}

@foreach (var subModel in Model.MoveList)
{
	@await Html.PartialAsync("MoveLine", subModel)
}

@if (Model.ForeseenList.Any())
{
	var colspanTitle = Model.IsUsingCategories ? 6 : 5;
	var colspanLateral = Model.CanCheck ? 4 : 2;
	var rowspanLateral = Model.ForeseenList.Count + 1;

	<tr class="row foreseen">
		<td colspan="@colspanTitle">
		</td>
		<td colspan="@colspanLateral" rowspan="@rowspanLateral" class="text-right">
			@Context.Translate("ForeseenMove").ToUpper()
		</td>
	</tr>
}

@foreach (var subModel in Model.ForeseenList)
{
	@await Html.PartialAsync("MoveLine", subModel)
}

@section Footer {
	@{
		var movesWithDetails = allMoves
			.Where(m => m.DetailList.Any());
	}

	@foreach (var move in movesWithDetails)
	{
		@await Html.PartialAsync(
			"Modals/Details",
			new DetailsModel(move, Model.Language)
		)
	}

	@{
		var schedules = allMoves
			.Where(m => m.Schedule != null)
			.Select(m => m.Schedule)
			.Distinct();
	}

	@foreach (var schedule in schedules)
	{
		@await Html.PartialAsync(
			"Modals/Schedule",
			schedule
		)
	}
	
	@if (Model.AccountHasMoves)
	{
		<div class="row">
			<div class="col-lg-2 col-sm-2"></div>

			<div class="col-lg-8 col-sm-8 text-center">
				@await Html.PartialAsync("Extensions/Pagination", pages)
			</div>

			<div class="col-lg-2 col-sm-2">
				@await Html.PartialAsync("Total")
			</div>
		</div>
	}
}

@section Styles {
	<link type="text/css" rel="stylesheet"
		href="~/Assets/styles/reports.css?v=@Cfg.Version" />
}

@section Scripts {
	<script type="text/javascript"
		src="~/Assets/scripts/table-sum.js?v=@Cfg.Version">
	</script>
}
