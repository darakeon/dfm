@model MoveLineModel

@{ var move = Model.Move; }

<tr class="row" id="m@(move.Guid)">
	<td>@move.Description</td>

	@if (Model.IsUsingCategories)
	{
		<td class="text-center">@(move.CategoryName ?? "---")</td>
	}

	<td class="text-center">
		@move.GetDate().ToShortDateString()
	</td>

	<td class="text-right">
		@if (move.InUrl == Model.CurrentAccountUrl)
		{
			@await Html.PartialAsync("ValueWithSign",
				new ValueWithSign(move.Total, Model.Language))
		}
	</td>

	<td class="text-right">
		@if (move.OutUrl == Model.CurrentAccountUrl)
		{
			@await Html.PartialAsync("ValueWithSign",
				new ValueWithSign(-move.Total, Model.Language))
		}
	</td>

	@if (Model.CanCheck)
	{
		<td class="text-center">
			<span class="glyphicon glyphicon-@(move.Checked ? "exclamation-sign text-success" : "question-sign text-danger")"
				  title="@Context.Translate(move.Checked ? "Checked" : "Unchecked")">
			</span>
		</td>
	}

	<td class="col-sm-1 text-center">
		<a href="@Url.Action("Edit", "Moves", new {id = move.Guid})">
			<span class="glyphicon glyphicon-edit"
				  title="@Context.Translate("Edit")">
			</span>
		</a>
	</td>

	<td class="col-sm-1 text-center">
		@await Html.PartialAsync("MicroForm",
			MicroForm.WithGlyph(Context, "trash", "Delete")
				.AddIdUrl("Moves", "Delete", move.Guid)
			)
	</td>

	@if (Model.CanCheck)
	{
		var action = move.Checked ? "Uncheck" : "Check";
		var glyph = move.Checked ? "remove" : "ok";
		var nature = move.OutUrl == Model.CurrentAccountUrl
			? PrimalMoveNature.Out
			: PrimalMoveNature.In;

		<td class="col-sm-1 text-center">
			@await Html.PartialAsync("MicroForm",
				MicroForm.WithGlyph(Context, glyph, action)
					.AddIdUrl("Moves", action, move.Guid)
					.AddHidden("nature", nature)
					.AsAjax($"m{move.Guid}")
				)
		</td>
	}
</tr>
