@model MoveLineModel

@{
	var move = Model.Move;
	var foreseen = move.Foreseen ? "foreseen" : "";
	var hasDetails = move.DetailList.Any();
	var hasSchedule = move.Schedule != null;
	var editTitle = $"{Context.Translate("Edit")} {move.Description}";
	var wizardHighlightRow = move.Foreseen ? "" : "wizard-highlight-0";
	var wizardHighlightCell = move.Foreseen ? "" : "wizard-highlight-1";
}

<tr class="row @foreseen sum-factor @wizardHighlightRow" data-parent="table" id="m@(move.Guid)">
	<td>@move.Description</td>

	<td class="text-center">
		@if (hasDetails)
		{
			<span class="glyphicon glyphicon-folder-open"
			      title="@Context.Translate("Details")"
			      data-toggle='modal'
			      data-target='#details-@move.Guid-modal'
			      role='button'>
			</span>
		}
		@if (hasDetails && hasSchedule)
		{
			@Html.Raw("&nbsp;")
		}
		@if (hasSchedule)
		{
			<span class="glyphicon glyphicon-time"
			      title="@Context.Translate("Schedule")"
			      data-toggle='modal'
			      data-target='#schedule-@move.Schedule.Guid-modal'
			      role='button'>
			</span>
		}
	</td>

	@if (Model.IsUsingCategories)
	{
		<td class="text-center">@(move.CategoryName ?? "---")</td>
	}

	<td class="text-center">
		@move.GetDate().ToShortDateString()
	</td>

	<td class="text-right">
		@if (move.InUrl == Model.CurrentAccountUrl)
		{
			<span class="value hidden">
				@(move.Value)
			</span>

			@await Html.PartialAsync("Extensions/ValueWithSign",
				new ValueWithSign(move.Value, Model.Language))
		}
	</td>

	<td class="text-right">
		@if (move.OutUrl == Model.CurrentAccountUrl)
		{
			<span class="value hidden">
				@(-move.Value)
			</span>

			@await Html.PartialAsync("Extensions/ValueWithSign",
				new ValueWithSign(-move.Value, Model.Language))
		}
	</td>

	@if (!move.Foreseen)
	{
		if (Model.CanCheck)
		{
			var glyph = move.Checked ? "exclamation-sign text-success" : "question-sign text-danger";

			<td class="text-center">
				<span class="glyphicon glyphicon-@(glyph)"
					title="@Context.Translate(move.Checked ? "Checked" : "Unchecked")">
				</span>
			</td>
		}
	
		<td class="col-sm-1 text-center @wizardHighlightCell">
			<a href="@Url.Action("Edit", "Moves", new {id = move.Guid})"
			   title="@editTitle">
				<span class="glyphicon glyphicon-pencil"
					title="@editTitle"
					role='button'>
				</span>
			</a>
		</td>

		<td class="col-sm-1 text-center @wizardHighlightCell">
			@await Html.PartialAsync(
				"Extensions/MicroForm",
				MicroForm.WithGlyph(Context, "trash", "Delete")
					.AddIdUrl("Moves", "Delete", move.Guid)
					.EntityName(move.Description)
			)
		</td>

		if (Model.CanCheck)
		{
			var action = move.Checked ? "Uncheck" : "Check";
			var glyph = move.Checked ? "remove-sign" : "ok-sign";
			var nature = move.OutUrl == Model.CurrentAccountUrl
				? PrimalMoveNature.Out
				: PrimalMoveNature.In;

			<td class="col-sm-1 text-center">
				@await Html.PartialAsync(
					"Extensions/MicroForm",
					MicroForm.WithGlyph(Context, glyph, action)
						.AddIdUrl("Moves", action, move.Guid)
						.AddHidden("nature", nature)
						.AsAjax($"m{move.Guid}")
						.EntityName(move.Description)
				)
			</td>
		}
	}
</tr>
