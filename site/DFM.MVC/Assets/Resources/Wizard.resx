<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountsClosed" xml:space="preserve">
    <value>Here you see a list of closed Accounts. For these Accounts you cannot create or edit Moves, but you can still see the reports.</value>
  </data>
  <data name="AccountsCreate" xml:space="preserve">
    <value>Each Account has Name and Url. The Name is used to identify the Account on the screen, and the Url is part of the web address of the Account Area. Choose a Name, use the suggested Url or pickup another one, then click at Create.</value>
  </data>
  <data name="AccountsIndexEmpty" xml:space="preserve">
    <value>This is the starting point, where the Accounts are listed. Accounts are where you put and where you spent the money from: bank account, credit card, money you keep home. Here you can access the screen to create Accounts.</value>
  </data>
  <data name="AccountsIndexFilled" xml:space="preserve">
    <value>WIth the Account created, its details are listed here. The Account options are edit and delete. If an Acccount has Moves, it can't be deleted, just closed. When you click at Account's name, you enter at the Account Area.</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>Categories are types of Moves, like: Recreation, Health, Feeding, Donation. It make it simpler to say on quick looking where did you spent the money.</value>
  </data>
  <data name="Logins" xml:space="preserve">
    <value>Here is a security area: you can see and disable system logins, accesses to your registries. If something seems suspect or some device logged in was accessed by other people without authorization, we suggest you take down the Logins, and the next request will need to know the login credentials to enter again.</value>
  </data>
  <data name="MovesCreate" xml:space="preserve">
    <value>A Move is when the money gets In or Out of the Account - and it can be transfered to another one. To add it, give it a Description, a Date and a Value. It's also possible, instead of use a single Value,  to create it with Details.

REMEMBER: THE SYSTEM HAS NO CONNECTION TO ANY FINANCIAL INSTITUTION, SO ANY MOVES MADE HERE ARE MADE JUST HERE, BEING MERELY REGISTER IN THIS SYSTEM.</value>
  </data>
  <data name="SchedulesCreate" xml:space="preserve">
    <value>Schedule is to program the system to create Moves in the future, one or many, Daily, Monthly or Yearly. One can define for how long it will repeat, including non-stopping Schedules.</value>
  </data>
  <data name="SchedulesIndexEmpty" xml:space="preserve">
    <value>Here will be listed the Schedules created inside the Account Areas. Enter in one Account to create Schedules, it's in the Area top menu.</value>
  </data>
  <data name="SchedulesIndexFilled" xml:space="preserve">
    <value>These are the Schedules made in Account Areas. One can cancel the Schedule so it won't create Moves anymore.</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Here you can change security and timezone informations, the system theme you see and can enable/disable features. The enabled features make the system more complex, but give you more tools to control the money flow.</value>
  </data>
  <data name="ShowMovesEmpty" xml:space="preserve">
    <value>At this Area, you can see and create Moves. To add Moves, click at Move, at top menu.</value>
  </data>
  <data name="ShowMovesFilled" xml:space="preserve">
    <value>The Account Area start view list Moves by chosen month. It's accessible by top menu, at Extract. It's possible to access Year Summary at top menu too.</value>
  </data>
  <data name="SummarizeMonths" xml:space="preserve">
    <value>Here you can see the year totals by month so you can have a general comparative year view.</value>
  </data>
</root>