apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
	compileSdkVersion 33

	defaultConfig {

		minSdkVersion 21
		targetSdkVersion 33

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
		debug
	}

	sourceSets {
		debug.resources.srcDirs += 'src/debug/res'
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
		androidTest.java.srcDirs += 'src/androidTest/kotlin'
	}

	testOptions {
		unitTests {
			includeAndroidResources = true
		}
	}

	compileOptions {
		sourceCompatibility "$java_compat"
		targetCompatibility "$java_compat"
	}

	kotlinOptions {
		jvmTarget = "$java_version"
	}

	lint {
		abortOnError true
	}

	namespace 'com.darakeon.dfm.lib'

}

dependencies {
	implementation "com.google.android.gms:play-services-iid:$play_version"
	implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
	implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

	testImplementation project(":TestUtils")

	testImplementation "junit:junit:$junit_version"
	//noinspection GradleDependency because of a dependency added at 3.5.0 - last checked 3.8.0
	testImplementation "org.mockito:mockito-core:$mockito_version"
	testImplementation "org.robolectric:robolectric:$robolectric_version"
	testImplementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

	androidTestImplementation project(":TestUtils")

	androidTestImplementation "com.android.support.test:runner:$testrunner_version"
}

task wrapper(type: Wrapper) {
	gradleVersion = '6.2'
}

static def getLocalIP(int port) {
	def ips = []
	NetworkInterface.getNetworkInterfaces()
		.findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
		.each {
			if (it.name.startsWith("wlan")) {
				it.getInetAddresses()
					.findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
					.each { ips << it }
			}
		}

	if (ips.empty)
		return "dontflymoney.com"

	def address = ips.first().toString().substring(1)

	if (port > 0)
		address = address + ":" + port

	return address
}

task ipNetwork(type: Copy) {
	from ('src/main/res/xml/network_security_config.xml')
	into ('src/debug/res/xml')
	filter {
		String line -> line.replaceAll("dontflymoney.com", getLocalIP(0))
	}
}

task ipAddress(type: Copy) {
	from ('src/main/res/values/site-address.xml')
	into ('src/debug/res/values')
	filter {
		String line -> line.replaceAll("dontflymoney.com", getLocalIP(2409))
	}
}

afterEvaluate {
	tasks.forEach {task ->
		if (task.name.contains('packageDebugResources')) {
			task.dependsOn ipNetwork, ipAddress
		}
	}
}

/// ROBOLECTRIC

/**
 * Downloads all android-all dependencies and copies them to the mavenLocal() repository
 * Once applied to your gradle project, can be executed with ./gradlew robolectricSdkDownload

 * "The general idea of this was borrowed from"
 * https://gist.github.com/xian/05c4f27da6d4156b9827842217c2cd5c

 * "Modified it heavily to allow easier addition of new SDK versions"
 * https://gist.github.com/simtel12/13ff3e57c37e78e468502b51ebb0f4f2
 */
import java.nio.file.Files

// Base, public task - will be displayed in gradle robolectricSdkDownload:tasks
task robolectricSdkDownload {
	group = "Dependencies"
	description = "Downloads all robolectric SDK dependencies into mavenLocal, for use with offline robolectric"
}

def sdks = [
	[android: "6.0.1_r3", build: "r1"],
	[android: "5.0.2_r3", build: "r0"],
]

sdks.forEach { sdk ->
	def version = "${sdk['android']}-robolectric-${sdk['build']}"

	// Creating a configuration with a dependency allows Gradle
	// to manage the actual resolution of the jar file
	def sdkConfig = configurations.create(version)
	dependencies.add(version, "org.robolectric:android-all:${version}")

	def mavenLocalFile = new File(this.repositories.mavenLocal().url)
	def mavenRobolectric = new File(mavenLocalFile, "org/robolectric/android-all/${version}")

	// Copying all files downloaded for the created configuration into maven local.
	task "robolectricSdkDownload-${version}"(type: Copy) {
		from sdkConfig
		into mavenRobolectric

		doLast {
			ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
				.forModule("org.robolectric", "android-all", version)
				.withArtifacts(MavenModule, MavenPomArtifact)
				.execute()

			for(component in result.resolvedComponents) {
				def componentId = component.id

				if(componentId instanceof ModuleComponentIdentifier) {
					File pomFile = component.getArtifacts(MavenPomArtifact)[0].file
					File dest = new File(mavenRobolectric, pomFile.name)
					if (!Files.exists(dest.toPath())) {
						Files.copy(pomFile.toPath(), dest.toPath())
					}
				}
			}
		}
	}
	robolectricSdkDownload.dependsOn "robolectricSdkDownload-${version}"
}
