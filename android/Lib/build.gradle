apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
	compileSdk = 36

	defaultConfig {

		minSdkVersion 21
		targetSdkVersion 35

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
		debug
	}

	sourceSets {
		debug.resources.srcDirs += 'src/debug/res'
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
		androidTest.java.srcDirs += 'src/androidTest/kotlin'
	}

	testOptions {
		unitTests {
			includeAndroidResources = true
		}
	}

	compileOptions {
		sourceCompatibility "$java_compat"
		targetCompatibility "$java_compat"
	}

	kotlinOptions {
		jvmTarget = "$java_version"
	}

	packagingOptions {
		resources.excludes.add("META-INF/versions/9/OSGI-INF/MANIFEST.MF")
	}

	lint {
		abortOnError = true
	}

	namespace = 'com.darakeon.dfm.lib'

	buildFeatures {
		buildConfig = true
	}

}

dependencies {
	implementation "com.google.android.gms:play-services-iid:$play_version"
	implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
	implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

	if (!project.hasProperty("hide-test-deps")) {
		testImplementation project(":TestUtils")

		testImplementation "junit:junit:$junit_version"
		testImplementation "org.mockito:mockito-core:$mockito_version"
		testImplementation "org.robolectric:robolectric:$robolectric_version"
		testImplementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

		androidTestImplementation project(":TestUtils")

		androidTestImplementation "com.android.support.test:runner:$testrunner_version"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '8.14.3'
}

static def getLocalIP() {
	def ips = []
	NetworkInterface.getNetworkInterfaces()
		.findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
		.each {
			if (it.name.startsWith("wlan")) {
				it.getInetAddresses()
					.findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
					.each { ips << it }
			}
		}

	if (ips.empty)
		return "api.dontflymoney.com"

	return ips.first().toString().substring(1)
}

task ipNetwork(type: Copy) {
	from ('src/main/res/xml/network_security_config.xml')
	into ('src/debug/res/xml')
	filter {
		String line -> line.replaceAll("api.dontflymoney.com", getLocalIP())
	}
}

task ipAddress(type: Copy) {
	from ('src/main/res/values/site-address.xml')
	into ('src/debug/res/values')
	filter {
		String line -> line.replaceAll("api.dontflymoney.com", getLocalIP())
	}
}

afterEvaluate {
	tasks.forEach {task ->
		if (
			task.name.contains('packageDebugResources')
			||
			task.name.contains('generateDebugResources')
		) {
			task.dependsOn ipNetwork, ipAddress
		}
	}
}
