<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ak.DataAccess</name>
    </assembly>
    <members>
        <member name="T:Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo`2">
            <summary>
            Information to use Automapping of Fluent
            </summary>
            <typeparam name="TM">Some of the AutoMaps, just for reference</typeparam>
            <typeparam name="TE">Some of the Entities, just for reference</typeparam>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo`2.EntityBase">
            <summary>
            EntityBase, if it exists, to be ignored on mapping
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo`2.SuperEntities">
            <summary>
            Classes which subclasses use its table
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo`2.Conventions">
            <summary>
            Conventions to configure Fluent
            </summary>
        </member>
        <member name="T:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo">
            <summary>
            Information to Connect to the Database.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.Server">
            <summary>
            Server Name. No needed for Postgre and SQLite.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.DataBase">
            <summary>
            Database name in DBMS. No needed for Oracle and SQLLite.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.Login">
            <summary>
            Login for the DB.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.Password">
            <summary>
            Password not encrypted for DB.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.ConnectionString">
            <summary>
            Just for SQLite.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.DBMS">
            <summary>
            Database Managment System used.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.DBAction">
            <summary>
            The Action to be executed when SessionFactory is Created
            Old CreateDB.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.ScriptFileFullName">
            <summary>
            The File Full Name for export Script.
            Just fill if see the script is needed
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.DataInitializer">
            <summary>
            Data to initialize the DB.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo.ShowSQL">
            <summary>
            Whether to show SQL in log
            </summary>
        </member>
        <member name="T:Ak.DataAccess.XML.Node">
            <summary>
            Xml node structure
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.#ctor">
            <summary>
            Xml node structure
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.#ctor(System.String,System.String)">
             <summary>
             Xml node structure
             </summary>
            <param name="name">Name for the new Node</param>
            <param name="value">Text Content for the new Node</param>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.#ctor(System.Xml.XmlNode,System.Boolean)">
             <summary>
             Xml node structure
             </summary>
            <param name="xmlNode">Initial XMLNode</param>
            <param name="readChilds">Whether is to read all the childs (recursive read)</param>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.#ctor(System.String,System.Boolean)">
             <summary>
             Xml node structure
             </summary>
            <param name="path">Path of the XML file</param>
            <param name="readChilds">Whether is to read all the childs (recursive read)</param>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.Add(Ak.DataAccess.XML.Node)">
            <summary>
            Add Child
            </summary>
            <param name="node">Child Node</param>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.Add(System.String,System.String)">
            <summary>
            Add Attribute
            </summary>
            <param name="name">Attribute Name</param>
            <param name="value">Attribute Value</param>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.HasChilds">
            <summary>
             Whether it has child nodes
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.BackUpAndSave">
            <summary>
            Create a backup of the old file in a subfolder backup and override the original file
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.BackUpAndSave(System.String)">
            <summary>
            Create a backup of the old file in a subfolder backup and override the original file
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.Overwrite">
            <summary>
            Saves OVERWRITING the original file 
            </summary>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ak.DataAccess.XML.Node.GetEnumerator">
            <summary>
             To make ForEach
            </summary>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Name">
            <summary>
             Name of the tag of the Node
            </summary>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Value">
            <summary>
             Text Content of the Node
            </summary>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Attributes">
            <summary>
             The Attributes of current Node
            </summary>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Childs">
            <summary>
             The Child Nodes
            </summary>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Item(System.String)">
            <summary>
            Get attribute
            </summary>
            <param name="attribute">The attribute name</param>
            <returns>If found, the value of the attribute; Else, null</returns>
        </member>
        <member name="P:Ak.DataAccess.XML.Node.Item(System.Int32)">
            <summary>
            Get child node
            </summary>
            <param name="node">The node position</param>
            <returns>If found, the child node; Else, null</returns>
        </member>
        <member name="T:Ak.DataAccess.NHibernate.UserPassed.IDataInitializer">
            <summary>
            Inherit this class and pass yours to ConnectionInfo class to fill the DB after create.
            The property CreateDB need to be TRUE.
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.UserPassed.IDataInitializer.Initialize">
            <summary>
            Fill the Database.
            </summary>
        </member>
        <member name="T:Ak.DataAccess.NHibernate.Helpers.DBMS">
            <summary>
            List of accepted DBMSs
            </summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.MySQL">
            <summary></summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.MsSql2000">
            <summary></summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.MsSql2005">
            <summary></summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.MsSql2008">
            <summary></summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.MsSql7">
            <summary></summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.Postgre">
            <summary>Doesn't need SERVER property</summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.Oracle9">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.Oracle10">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBMS.SQLite">
            <summary>Doesn't need DATABASE property</summary>
        </member>
        <member name="T:Ak.DataAccess.NHibernate.Helpers.DBAction">
            <summary>
             Action for DB when create SessionFactory
            </summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBAction.None">
            <summary> 
             Don't even validate the schema.
             The errors will appear just when the entity is accessed.
            </summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBAction.Recreate">
            <summary>
             Drop and Create the DB.
             The saved data will be LOST.
            </summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBAction.Update">
            <summary>
             Just ajust the DB to match the entities.
             Can recreate foreign keys.
            </summary>
        </member>
        <member name="F:Ak.DataAccess.NHibernate.Helpers.DBAction.Validate">
            <summary>
             Verify errors on entities and mapping.
             Avoid error to just appear when entities are accessed.
            </summary>
        </member>
        <member name="T:Ak.DataAccess.Facebook.Communication">
            <summary>
             To Get Data from Facebook
            </summary>
        </member>
        <member name="M:Ak.DataAccess.Facebook.Communication.GetFBData(System.String)">
            <summary>
             Get just one Data Node
            </summary>
            <param name="page">The path of the page of data</param>
        </member>
        <member name="M:Ak.DataAccess.Facebook.Communication.GetFBListOfData(System.String)">
            <summary>
             Get a list of Data Nodes
            </summary>
            <param name="page">The path of the page of data</param>
        </member>
        <member name="T:Ak.DataAccess.NHibernate.SessionBuilder">
            <summary>
            To create NHibernate Session and communicate with DB
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.Start``2(Ak.DataAccess.NHibernate.UserPassed.ConnectionInfo,Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo{``0,``1})">
            <summary>
             Create Session Factory.
             To be used at Application_Start.
            </summary>
             <typeparam name="TM">Any mapping class. Passed automatic by passing to AutoMappingInfo.</typeparam>
             <typeparam name="TE">Any entity class. Passed automatic by passing to AutoMappingInfo.</typeparam>
             <param name="connectionInfo">About database connection</param>
             <param name="autoMappingInfo">About mappings on the entities</param>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.Start``2(Ak.DataAccess.NHibernate.UserPassed.AutoMappingInfo{``0,``1})">
            <summary>
            Create Session Factory, using the AppSettings.
            The keys required are the ConnectionInfo class properties.
            To be used at Application_Start.
            </summary>
            <typeparam name="TM">Any mapping class. Passed automatic by passing to AutoMappingInfo.</typeparam>
            <typeparam name="TE">Any entity class. Passed automatic by passing to AutoMappingInfo.</typeparam>
            <param name="autoMappingInfo">About mappings on the entities</param>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.Open">
            <summary>
            Open the NH session.
            To be used at Application_BeginRequest.
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.Close">
            <summary>
             Disconnect from DB.
             To be used at Application_EndRequest.
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.End">
            <summary>
             Close the SessionFactory.
             To be used at Application_End.
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.Error">
            <summary>
             Rollback the actions in case of Error.
             To be used at Application_Error.
            </summary>
        </member>
        <member name="M:Ak.DataAccess.NHibernate.SessionBuilder.NhInitialize(System.Object)">
            <summary>
             Force the Initialize of NHibernate objects.
            </summary>
        </member>
        <member name="P:Ak.DataAccess.NHibernate.SessionBuilder.Session">
            <summary>
            Session of NHibernate
            </summary>
        </member>
    </members>
</doc>
