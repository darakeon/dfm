version: 2.1

# Do not change file .circleci/config.yml
# the folder .circleci/pieces has the parts of the script
# go to .git > hooks and create a file called pre-commit
# with this content (without first '#' sign)

# #!/bin/sh
# ./.circleci/assembly.sh


jobs:
  workflow_ran:
    docker:
      - image: cimg/base:current
    steps:
      - run: echo "Now it can be merged into version branch!"
  trufflehog:
    docker:
      - image: python:3-alpine
    steps:
      - checkout
      - run:
          name: install trufflehog
          command: apk add --no-cache git && pip install gitdb2==3.0.0 trufflehog
      - run:
          name: run trufflehog
          command: trufflehog --exclude_paths .circleci/trufflehog/exclude-patterns.txt --allow .circleci/trufflehog/allow.json .

  test_ci:
    docker:
      - image: darakeon/ubuntu
    resource_class: small
    steps:
      - checkout
      - run:
          name: copy old
          path: .circleci
          command: cp config.yml config_old.yml
      - run:
          name: assembly
          command: ./.circleci/assembly.sh check
      - run:
          name: compare
          path: .circleci
          command: if [[ $(diff config.yml config_old.yml) != '' ]]; then echo 'outdated ci config'; exit 1; fi

  push_docker_browser:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/ci
          command: make build_browser PUSH=1

  push_docker_android:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/ci
          command: make build_android PUSH=1
      - run:
          name: Build images
          path: architecture/ci
          command: make build_android_publish PUSH=1

  push_docker_migrator_ci:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/ci
          command: make build_migrator PUSH=1

  push_docker_rust_github_cli:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/ci
          command: make build_rust_github_cli PUSH=1

  build_core:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - run:
          name: set checksums
          command: |
            cat core/*/*.csproj > lib_cache_key
            CS_CORE=$(md5sum lib_cache_key | cut -d' ' -f1)

            cat core/*/*/*.csproj >> tests_cache_key
            CS_TEST=$(md5sum tests_cache_key | cut -d' ' -f1)

            CORE_CACHE_KEY=$CS_CORE-$CS_TEST
            echo $CORE_CACHE_KEY > core/core_cache_key
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          name: dependencies
          command: dotnet restore core/Core.sln
      - save_cache:
          key: dotnet-{{ checksum "core/core_cache_key" }}
          paths:
            - ~/.nuget/packages
      - run:
          name: build
          command: dotnet build -c Debug core/Core.sln --no-restore
      - persist_to_workspace:
          root: core
          paths:
            - core_cache_key
            - "*/bin"
            - "*/obj"
            - "Tests/*/bin"
            - "Tests/*/obj"

  audit_core:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core
          name: check vulnerability
          command: |
            RESULT=$(dotnet list package --vulnerable --include-transitive | grep 'has no vulnerable')

            echo "$RESULT"

            NUMBER_OF_PROJECTS=$(cat Core.sln | grep .csproj | wc -l)
            CURRENT=$(echo "$RESULT" | wc -l)

            if [ $CURRENT != $NUMBER_OF_PROJECTS ]; then
                exit 1
            fi

  test_core_generic:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/Generic
          name: tests generic
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_language:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/Language
          name: tests language
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_email:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/Email
          name: tests email
          command: dotnet test -v m --no-build
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_exchange:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/Exchange
          name: tests exchange
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_entities:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/Entities
          name: tests entities
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_auth:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~A_Auth
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_law:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~B_Law
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_admin:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~C_Admin
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_clip:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~D_Clip
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_money:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~E_Money
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_report:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~F_Report
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_outside:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~G_Outside
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_attendant:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~H_Attendant
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/s3
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  test_core_business_logic_executor:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: core
      - restore_cache:
          keys:
            - dotnet-{{ checksum "core/core_cache_key" }}
      - run:
          path: core/Tests/BusinessLogic
          name: tests business logic
          command: dotnet test -v m --no-build --filter FullyQualifiedName~I_Executor
      - run:
          path: outputs/inbox
          name: zip mails
          command: zip inbox.zip *.eml && rm *.eml
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/s3
      - store_artifacts:
          path: outputs/logs/core
          destination: logs

  build_site:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - run:
          name: set checksums
          command: |
            cat core/*/*.csproj > core_cache_key
            CS_CORE=$(md5sum core_cache_key | cut -d' ' -f1)

            CS_MVC_=$(md5sum site/MVC/MVC.csproj | cut -d' ' -f1)
            CS_TMVC=$(md5sum site/Tests/MVC/MVC.Tests.csproj | cut -d' ' -f1)

            SITE_CACHE_KEY=$CS_CORE-$CS_MVC_-$CS_TMVC
            echo $SITE_CACHE_KEY > site/site_cache_key
      - restore_cache:
          keys:
            - dotnet-{{ checksum "site/site_cache_key" }}
      - run:
          name: dependencies
          command: dotnet restore site/Site.sln
      - save_cache:
          key: dotnet-{{ checksum "site/site_cache_key" }}
          paths:
            - ~/.nuget/packages
      - run:
          name: build
          command: dotnet build -c Debug site/Site.sln --no-restore
      - persist_to_workspace:
          root: site
          paths:
            - site_cache_key
            - MVC/bin
            - MVC/obj
            - Tests/MVC/bin
            - Tests/MVC/obj

  audit_site:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - attach_workspace:
          at: site
      - restore_cache:
          keys:
            - dotnet-{{ checksum "site/site_cache_key" }}
      - run:
          path: site
          name: check vulnerability
          command: |
            RESULT=$(dotnet list package --vulnerable --include-transitive | grep 'has no vulnerable')

            echo "$RESULT"

            NUMBER_OF_PROJECTS=$(cat Site.sln | grep .csproj | wc -l)
            CURRENT=$(echo "$RESULT" | wc -l)

            if [ $CURRENT != $NUMBER_OF_PROJECTS ]; then
                exit 1
            fi

  test_site:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: site
      - restore_cache:
          keys:
            - dotnet-{{ checksum "site/site_cache_key" }}
      - run:
          path: site/Tests/MVC
          name: tests mvc
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: site/Tests/log
          destination: log

  audit_test_browser:
    docker:
      - image: darakeon/dfm-browser-tests
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - node-{{ checksum "site/Tests/Browser/package.json" }}-{{ checksum "site/Tests/Browser/package-lock.json" }}
      - run:
          name: dependencies node
          path: site/Tests/Browser
          command: npm install
      - save_cache:
          key: node-{{ checksum "site/Tests/Browser/package.json" }}-{{ checksum "site/Tests/Browser/package-lock.json" }}
          paths:
            - site/Tests/Browser/node_modules
      - run:
          name: check_dependencies node
          path: site/Tests/Browser
          command: npm audit
      - store_artifacts:
          path: /root/.npm/_logs/
      - store_artifacts:
          path: /root/.npm/eresolve-report.txt

  test_browser:
    docker:
      - image: darakeon/dfm-browser-tests:sqlite-ok
    steps:
      - checkout
      - attach_workspace:
          at: core
      - attach_workspace:
          at: site
      - restore_cache:
          keys:
            - dotnet-{{ checksum "site/site_cache_key" }}
      - restore_cache:
          keys:
            - dotnet-libman-{{ checksum "site/MVC/libman.json" }}
      - run:
          name: dependencies client
          path: site/MVC
          command: libman restore
      - save_cache:
          key: dotnet-libman-{{ checksum "site/MVC/libman.json" }}
          paths:
            - site/MVC/Assets/libs
      - run:
          name: publish site
          path: site/MVC
          command: dotnet publish -c Release MVC.csproj -o ../Tests/Browser/server --no-restore
      - save_cache:
          key: dotnet-browser-server-{{ checksum "site/Tests/Browser/server/DFM.MVC" }}
          paths:
            - site/Tests/Browser/server
      - restore_cache:
          keys:
            - node-{{ checksum "site/Tests/Browser/package.json" }}-{{ checksum "site/Tests/Browser/package-lock.json" }}
      - run:
          name: tests browser
          command: .circleci/browser/run-tests.sh
      - store_artifacts:
          path: outputs/logs
      - store_artifacts:
          path: site/Tests/Browser/server/tests.db
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/s3

  test_browser_wait_fix:
    docker:
      - image: darakeon/dfm-browser-tests
    steps:
      - checkout
      - attach_workspace:
          at: core
      - attach_workspace:
          at: site
      - restore_cache:
          keys:
            - dotnet-{{ checksum "site/site_cache_key" }}
      - restore_cache:
          keys:
            - dotnet-libman-{{ checksum "site/MVC/libman.json" }}
      - restore_cache:
          keys:
            - dotnet-browser-server-{{ checksum "site/Tests/Browser/server/DFM.MVC" }}
      - restore_cache:
          keys:
            - node-{{ checksum "site/Tests/Browser/package.json" }}-{{ checksum "site/Tests/Browser/package-lock.json" }}
      - run:
          name: clear database
          path: site/Tests/Browser/server
          command: rm tests.db
      - run:
          name: tests browser
          command: .circleci/browser/run-tests.sh
      - store_artifacts:
          path: outputs/logs
      - store_artifacts:
          path: site/Tests/Browser/server/tests.db
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: outputs/s3

  build_api:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - run:
          name: set checksums
          command: |
            cat core/*/*.csproj > core_cache_key
            CS_CORE=$(md5sum core_cache_key | cut -d' ' -f1)

            CS_API_=$(md5sum api/API/API.csproj | cut -d' ' -f1)
            CS_TAPI=$(md5sum api/Tests/API/API.Tests.csproj | cut -d' ' -f1)

            API_CACHE_KEY=$CS_CORE-$CS_API_-$CS_TAPI
            echo $API_CACHE_KEY > api/api_cache_key
      - restore_cache:
          keys:
            - dotnet-{{ checksum "api/api_cache_key" }}
      - run:
          name: dependencies
          command: dotnet restore api/API.sln
      - save_cache:
          key: dotnet-{{ checksum "api/api_cache_key" }}
          paths:
            - ~/.nuget/packages
      - run:
          name: build
          command: dotnet build -c Debug api/API.sln --no-restore
      - persist_to_workspace:
          root: api
          paths:
            - api_cache_key
            - API/bin
            - API/obj
            - Tests/API/bin
            - Tests/API/obj

  audit_api:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: core
      - attach_workspace:
          at: api
      - restore_cache:
          keys:
            - dotnet-{{ checksum "api/api_cache_key" }}
      - run:
          path: api
          name: check vulnerability
          command: |
            RESULT=$(dotnet list package --vulnerable --include-transitive | grep 'has no vulnerable')

            echo "$RESULT"

            NUMBER_OF_PROJECTS=$(cat API.sln | grep .csproj | wc -l)
            CURRENT=$(echo "$RESULT" | wc -l)

            if [ $CURRENT != $NUMBER_OF_PROJECTS ]; then
                exit 1
            fi

  test_api:
    docker:
      - image: darakeon/netcore:alpine-net8
    steps:
      - checkout
      - attach_workspace:
          at: api
      - restore_cache:
          keys:
            - dotnet-{{ checksum "api/api_cache_key" }}
      - run:
          path: api/Tests/API
          name: tests api
          command: dotnet test -v m --no-build
      - store_artifacts:
          path: outputs/inbox
      - store_artifacts:
          path: api/Tests/log
          destination: log

  build_android:
    docker:
      - image: darakeon/android
    resource_class: large
    steps:
      - checkout
      - run:
          name: create empty credentials file
          path: android
          command: echo "storeFile=\nstorePassword=\nkeyAlias=\nkeyPassword=" > keystore.properties
      - run:
          name: set checksums
          command: |
            KT_DOCK=$(md5sum architecture/ci/android.dockerfile | cut -d' ' -f1)
            KT_MAIN=$(md5sum android/build.gradle | cut -d' ' -f1)
            KT_UTIL=$(md5sum android/TestUtils/build.gradle | cut -d' ' -f1)
            KT_LIBR=$(md5sum android/Lib/build.gradle | cut -d' ' -f1)
            KT_APPL=$(md5sum android/App/build.gradle | cut -d' ' -f1)
            KT_ERRO=$(md5sum android/ErrorLogs/build.gradle | cut -d' ' -f1)

            ANDROID_CACHE_KEY=$KT_DOCK-$KT_MAIN-$KT_UTIL-$KT_LIBR-$KT_APPL-$KT_ERRO
            echo $ANDROID_CACHE_KEY > android/android_cache_key
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: project dependencies
          path: android
          command: gradle-with-metadata --no-daemon androidDependencies
      - save_cache:
          key: kotlin-{{ checksum "android/android_cache_key" }}
          paths:
            - /var/cache/gradle
            - /root/.m2/repository
      - run:
          name: build
          path: android
          command: gradle-with-metadata --no-daemon build -x test -x androidDependencies -x packageRelease -x packageDebug
      - run:
          name: configure
          path: android
          command: gradle-with-metadata --no-daemon configure
      - store_artifacts:
          path: android/build/reports
          destination: reports/main
      - store_artifacts:
          path: android/TestUtils/build/reports
          destination: reports/testUtils
      - store_artifacts:
          path: android/Lib/build/reports
          destination: reports/lib
      - store_artifacts:
          path: android/App/build/reports
          destination: reports/app
      - store_artifacts:
          path: android/ErrorLogs/build/reports
          destination: reports/errorLogs
      - store_artifacts:
          path: android/gradle/verification-metadata.xml
          destination: verification-metadata.xml
      - persist_to_workspace:
          root: android
          paths:
            - android_cache_key
            - keystore.properties
            - build
            - Lib/build
            - App/build
            - ErrorLogs/build
            - TestUtils/build

  audit_android:
    docker:
      - image: darakeon/android
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
            - kotlin-owasp
      - run:
          name: download vulnerability cache database
          path: /var/cache/gradle/dependency-check-data/11.0
          command: curl -L https://$NVD_CACHE_BUCKET.s3.$NVD_CACHE_REGION.amazonaws.com/$NVD_CACHE_NAME -o odc.mv.db
      - run:
          name: check vulnerability
          path: android
          command: gradle dependencyCheckAnalyze --stacktrace --info
      - save_cache:
          key: kotlin-owasp
          paths:
            - /var/cache/gradle/dependency-check-data/

  test_android_lib_debug:
    docker:
      - image: darakeon/android
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: tests lib debug
          path: android
          command: gradle-with-metadata :Lib:testDebugUnitTest -x androidDependencies -x build -x packageRelease -x packageDebug
      - store_artifacts:
          path: outputs/logs/android
          destination: logs
      - store_artifacts:
          path: android/gradle/verification-metadata.xml
          destination: verification-metadata.xml
      - store_test_results:
          path: android/Lib/build/test-results

  test_android_lib_release:
    docker:
      - image: darakeon/android
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: tests lib release
          path: android
          command: gradle-with-metadata :Lib:testReleaseUnitTest -x androidDependencies -x build -x packageRelease -x packageDebug
      - store_artifacts:
          path: outputs/logs/android
          destination: logs
      - store_artifacts:
          path: android/gradle/verification-metadata.xml
          destination: verification-metadata.xml
      - store_test_results:
          path: android/Lib/build/test-results

  test_android_app_debug:
    docker:
      - image: darakeon/android
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: tests app debug
          path: android
          command: gradle-with-metadata :App:testDebugUnitTest -x androidDependencies -x build -x packageRelease -x packageDebug
      - store_artifacts:
          path: outputs/logs/android
          destination: logs
      - store_artifacts:
          path: android/gradle/verification-metadata.xml
          destination: verification-metadata.xml
      - store_test_results:
          path: android/App/build/test-results

  test_android_app_release:
    docker:
      - image: darakeon/android
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: tests app release
          path: android
          command: gradle-with-metadata :App:testReleaseUnitTest -x androidDependencies -x build -x packageRelease -x packageDebug
      - store_artifacts:
          path: outputs/logs/android
          destination: logs
      - store_artifacts:
          path: android/gradle/verification-metadata.xml
          destination: verification-metadata.xml
      - store_test_results:
          path: android/App/build/test-results

  build_robot:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: small
    environment:
      ASPNETCORE_ENVIRONMENT: circleCI
    steps:
      - checkout
      - attach_workspace:
          at: core
      - run:
          name: set checksums
          command: |
            cat core/*/*.csproj > core_cache_key
            CS_CORE=$(md5sum core_cache_key | cut -d' ' -f1)

            CS_ROBT=$(md5sum robot/Robot/Robot.csproj | cut -d' ' -f1)

            ROBOT_CACHE_KEY=$CS_CORE-$CS_ROBT
            echo $ROBOT_CACHE_KEY > robot/robot_cache_key
      - restore_cache:
          keys:
            - dotnet-{{ checksum "robot/robot_cache_key" }}
      - run:
          name: dependencies
          command: dotnet restore robot/Robot.sln
      - save_cache:
          key: dotnet-{{ checksum "robot/robot_cache_key" }}
          paths:
            - ~/.nuget/packages
      - run:
          name: build
          path: robot
          command: dotnet build -c Release Robot.sln --no-restore
      - persist_to_workspace:
          root: robot
          paths:
            - robot_cache_key
            - Robot/bin
            - Robot/obj

  audit_robot:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: small
    environment:
      ASPNETCORE_ENVIRONMENT: circleCI
    steps:
      - checkout
      - attach_workspace:
          at: core
      - attach_workspace:
          at: robot
      - restore_cache:
          keys:
            - dotnet-{{ checksum "robot/robot_cache_key" }}
      - run:
          path: robot
          name: check vulnerability
          command: |
            RESULT=$(dotnet list package --vulnerable --include-transitive | grep 'has no vulnerable')

            echo "$RESULT"

            NUMBER_OF_PROJECTS=$(cat Robot.sln | grep .csproj | wc -l)
            CURRENT=$(echo "$RESULT" | wc -l)

            if [ $CURRENT != $NUMBER_OF_PROJECTS ]; then
                exit 1
            fi

  check_robot:
    docker:
      - image: darakeon/netcore:alpine-net8
    resource_class: small
    environment:
      ASPNETCORE_ENVIRONMENT: circleCI
    steps:
      - checkout
      - attach_workspace:
          at: robot
      - restore_cache:
          keys:
            - dotnet-{{ checksum "robot/robot_cache_key" }}
      - run:
          name: check
          path: robot/Robot/bin/Release
          command: ./DFM.Robot check

  build_midna:
    docker:
      - image: python:3.11 # if change, remember to change save_cache
    steps:
      - checkout
      - restore_cache:
          keys:
            - python-{{ checksum "midna/src/requirements.txt" }}
      - run:
          path: midna/src
          name: Upgrade pip
          command: pip install --upgrade pip
      - run:
          path: midna/src
          name: dependencies
          command: pip install -r requirements.txt
      - save_cache:
          key: python-{{ checksum "midna/src/requirements.txt" }}
          paths:
            - /usr/local/lib/python3.11/site-packages/
      #- persist_to_workspace:
      #    root: midna
      #    paths:
      #      -

  audit_midna:
    docker:
      - image: python:3.11 # if change, remember to change save_cache
    steps:
      - checkout
      #- attach_workspace:
      #    at: midna
      - restore_cache:
          keys:
            - python-{{ checksum "midna/src/requirements.txt" }}
      - run:
          path: midna/src
          name: check vulnerability
          command: python -m pip_audit

  test_midna:
    docker:
      - image: python:3.11 # if change, remember to change save_cache
    steps:
      - checkout
      #- attach_workspace:
      #    at: midna
      - restore_cache:
          keys:
            - python-{{ checksum "midna/src/requirements.txt" }}
      - run:
          path: midna
          name: run tests
          command: |
            set -o allexport
            source env/example.env
            set +o allexport
            cd src
            python manage.py test deleted_users
            python manage.py test plans

  export_terms:
    docker:
      - image: darakeon/dfm-migrator-ci
        environment:
          DATABASE_HOST: 127.0.0.1
          DATABASE_NAME: dfm
          DATABASE_USER: root
          DATABASE_PASS: password
          RUN_DATA: 1
      - image: mysql
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: dfm
    steps:
      - run:
          name: run script
          path: /var/db
          command: python upgrade/main.py
      - checkout
      - run:
          name: update terms README
          path: terms
          command: |
            export VERSION=$CIRCLE_BRANCH
            python update_contract_readme.py
      - run:
          name: update terms html
          path: terms
          command: |
            export VERSION=$CIRCLE_BRANCH
            python update_contract_html.py
      - run:
          name: commit readme if changed
          path: terms
          command: |
            DIFF=$(git diff)
            if [ "$DIFF" == "" ]; then
              echo "Nothing to commit"
            else
              source config-git

              git add README.md
              git add static/index.html
              git add static/contract.css
              git add static/dfm.ico
              git add static/dfm.png
              git commit -m "legal: add new contract to git"

              merge-by-branch feature/terms legal

              ci_stop
            fi
      - store_artifacts:
          path: terms/README.md

  dependabot_auto_aprove:
    docker:
      - image: darakeon/github-cli
    resource_class: small
    steps:
      - checkout
      - run:
          name: check last dev version ci succeeded
          path: .circleci/auto-merge
          command: |
            python check_version_pipeline.py
      - run:
          name: Make folder
          command: |
            mkdir prs
      - run:
          name: List PRs
          command: |
            gh pr list --base $CIRCLE_BRANCH --author app/dependabot --state open --json author,autoMergeRequest,baseRefName,closed,commits,headRefName,headRepository,headRepositoryOwner,id,isCrossRepository,isDraft,labels,number,state,statusCheckRollup > prs/list.json
      - run:
          name: Get PR to merge
          command: |
            python .circleci/auto-merge/get_next_auto_merge.py prs/list.json > prs/chosen
      - run:
          name: Merge PR
          command: |
            export PR=$(tail -n 1 prs/chosen)
            if [ "$PR" != "" ]; then
              gh pr comment $PR --body "@dependabot recreate"
              gh pr merge --auto --rebase $PR
            else
              echo "No PRs to merge"
            fi
      - store_artifacts:
          path: prs
          destination: prs

  audit_version_changer:
    docker:
      - image: rust
    resource_class: small
    environment:
      RUST_BACKTRACE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-version-{{ checksum "version/Cargo.toml" }}-{{ checksum "version/Cargo.lock" }}
      - run:
          name: install
          path: version
          command: |
            if [ ! -f /usr/local/cargo/bin/cargo-audit ]; then
              cargo install cargo-audit
            else
              echo "cargo audit already installed"
            fi
      - save_cache:
          key: cargo-version-{{ checksum "version/Cargo.toml" }}-{{ checksum "version/Cargo.lock" }}
          paths:
            - /usr/local/cargo/bin/
            - /usr/local/cargo/registry/
      - run:
          name: audit
          path: version
          command: cargo audit && echo "All OK!"
      #- persist_to_workspace:
      #    root: version
      #    paths:
      #      -

  change_version:
    docker:
      - image: darakeon/rust-github-cli
    resource_class: small
    environment:
      RUST_BACKTRACE: 1
    steps:
      - checkout
      #- attach_workspace:
      #    at: version
      - restore_cache:
          keys:
            - cargo-version-{{ checksum "version/Cargo.toml" }}-{{ checksum "version/Cargo.lock" }}
      - run:
          name: build
          path: version
          command: cargo build
      - run:
          name: version change
          path: version
          command: |
            if [ "$CIRCLE_BRANCH" == "feature/version/new" ]; then
              echo "Already in the new version branch"
            else
              export GIT_EMAIL=$GITHUB_CIRCLE_EMAIL
              export GIT_NAME=$GITHUB_CIRCLE_NAME
              cargo run -q -- -q 1
            fi
      - run:
          name: push
          path: architecture/ci
          command: |
            DIFF=$(git diff origin/$CIRCLE_BRANCH)
            if [ "$DIFF" == "" ]; then
              echo "Nothing to push"
            else
              source config-git
              merge-by-branch feature/version/new version
              circleci-agent step halt
            fi

  publish_migrator:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/publish
          command: make migrator_push
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_site:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/publish
          command: make site_push
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_api:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/publish
          command: make api_push
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_robot:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Install aws
          command: apk add aws-cli
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build image
          path: architecture/publish
          command: make robot
      - run:
          name: Push image to AWS
          path: architecture/publish
          command: |
            make aws_login
            make robot_aws_push
            make robot_aws_deploy
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_midna:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Build images
          path: architecture/publish
          command: make midna_push
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_android:
    docker:
      - image: darakeon/android-publish
    steps:
      - checkout
      - attach_workspace:
          at: android
      - restore_cache:
          keys:
            - kotlin-{{ checksum "android/android_cache_key" }}
      - run:
          name: Create file keystore properties
          path: android
          command: echo ${ANDROID_BUNDLE_PROPERTIES} | base64 -d > keystore.properties
      - run:
          name: Create file keystore
          path: /var/keys
          command: echo ${ANDROID_BUNDLE_KEYSTORE} | base64 -d > keon.keystore
      - run:
          name: Build bundle
          path: android
          command: gradle --no-daemon :app:bundleRelease -Phide-test-deps
      - run:
          name: Remove file keystore
          path: /var/keys
          command: rm keon.keystore
      - run:
          name: Remove file keystore properties
          path: android
          command: rm keystore.properties
      - run:
          name: Publish to Play Store
          command: |
            export ANDROID_BUNDLE=android/App/build/outputs/bundle/release/App-release.aab
            export ANDROID_APP_VERSION=$(git branch --show-current)
            python3 .circleci/android/publish.py
      - store_artifacts:
          path: android/App/build/outputs/bundle/release/
          destination: bundle
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

  publish_terms:
    docker:
      - image: darakeon/dfm-migrator-ci
    steps:
      - checkout
      - run:
          name: upload terms html to S3
          path: terms
          command: |
            python publish_contract_html.py
      - run:
          name: release
          command: |
            circleci run release log \
              --environment-name=DFM \
              --component-name=$CIRCLE_JOB \
              --target-version=$CIRCLE_BRANCH

triggers:
  - schedule:
      cron: "0 * * * *"
      filters:
        branches:
          only: /^\d+\.\d+\.\d+\.\d+$/

workflows:
  version: 2.1

  all:
    when:
      not:
        equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - main
                - /^\d+\.\d+\.\d+\.\d+$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_browser:
          requires:
            - test_ci
      - push_docker_android:
          requires:
            - test_ci
      - push_docker_migrator_ci:
          requires:
            - test_ci
      - push_docker_rust_github_cli:
          requires:
            - test_ci
      - build_core:
          requires:
            - test_ci
      - audit_core:
          requires:
            - build_core
      - test_core_generic:
          requires:
            - build_core
      - test_core_language:
          requires:
            - build_core
      - test_core_email:
          requires:
            - build_core
      - test_core_exchange:
          requires:
            - build_core
      - test_core_entities:
          requires:
            - build_core
      - test_core_business_logic_auth:
          requires:
            - build_core
      - test_core_business_logic_law:
          requires:
            - build_core
      - test_core_business_logic_admin:
          requires:
            - build_core
      - test_core_business_logic_clip:
          requires:
            - build_core
      - test_core_business_logic_money:
          requires:
            - build_core
      - test_core_business_logic_report:
          requires:
            - build_core
      - test_core_business_logic_outside:
          requires:
            - build_core
      - test_core_business_logic_attendant:
          requires:
            - build_core
      - test_core_business_logic_executor:
          requires:
            - build_core
      - build_site:
          requires:
            - build_core
      - audit_site:
          requires:
            - build_site
      - test_site:
          requires:
            - build_site
      - audit_test_browser:
          requires:
            - test_ci
            - push_docker_browser
      - test_browser:
          requires:
            - audit_test_browser
            - build_site
            - push_docker_browser
      - test_browser_wait_fix:
          requires:
            - test_browser
      - build_api:
          requires:
            - build_core
      - audit_api:
          requires:
            - build_api
      - test_api:
          requires:
            - build_api
      - build_android:
          requires:
            - test_ci
            - push_docker_android
      - audit_android:
          requires:
            - build_android
      - test_android_lib_debug:
          requires:
            - build_android
      - test_android_lib_release:
          requires:
            - build_android
      - test_android_app_debug:
          requires:
            - build_android
      - test_android_app_release:
          requires:
            - build_android
      - build_robot:
          requires:
            - build_core
      - audit_robot:
          requires:
            - build_robot
      - check_robot:
          requires:
            - build_robot
      - build_midna:
          requires:
            - test_ci
      - audit_midna:
          requires:
            - build_midna
      - test_midna:
          requires:
            - build_midna
      - export_terms:
          requires:
            - test_ci
            - push_docker_migrator_ci
      - audit_version_changer:
          requires:
            - test_ci
      - change_version:
          requires:
            - trufflehog
            - test_ci
            - push_docker_browser
            - push_docker_android
            - push_docker_migrator_ci
            - push_docker_rust_github_cli
            - build_core
            - audit_core
            - test_core_generic
            - test_core_language
            - test_core_email
            - test_core_exchange
            - test_core_entities
            - test_core_business_logic_auth
            - test_core_business_logic_law
            - test_core_business_logic_admin
            - test_core_business_logic_clip
            - test_core_business_logic_money
            - test_core_business_logic_report
            - test_core_business_logic_outside
            - test_core_business_logic_attendant
            - test_core_business_logic_executor
            - build_site
            - audit_site
            - test_site
            - audit_test_browser
            - test_browser
            - build_api
            - audit_api
            - test_api
            - build_android
            - audit_android
            - test_android_lib_debug
            - test_android_lib_release
            - test_android_app_debug
            - test_android_app_release
            - build_robot
            - audit_robot
            - check_robot
            - build_midna
            - audit_midna
            - test_midna
            - export_terms
            - audit_version_changer
      - approve_deploy:
          type: approval
          requires:
            - change_version
          filters:
            branches:
              only:
                - /^\d+\.\d+\.\d+\.\d+$/
      - publish_migrator:
          requires:
            - approve_deploy
      - publish_site:
          requires:
            - approve_deploy
      - publish_api:
          requires:
            - approve_deploy
      - publish_robot:
          requires:
            - approve_deploy
      - publish_midna:
          requires:
            - approve_deploy
      - publish_android:
          requires:
            - approve_deploy
      - publish_terms:
          requires:
            - approve_deploy

  core:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/core/.+$/
                - /^fix/core/.+$/
                - /^dependabot/nuget/core/.+$/
      - test_ci:
          requires:
            - trufflehog
      - build_core:
          requires:
            - test_ci
      - audit_core:
          requires:
            - build_core
      - test_core_generic:
          requires:
            - build_core
      - test_core_language:
          requires:
            - build_core
      - test_core_email:
          requires:
            - build_core
      - test_core_exchange:
          requires:
            - build_core
      - test_core_entities:
          requires:
            - build_core
      - test_core_business_logic_auth:
          requires:
            - build_core
      - test_core_business_logic_law:
          requires:
            - build_core
      - test_core_business_logic_admin:
          requires:
            - build_core
      - test_core_business_logic_clip:
          requires:
            - build_core
      - test_core_business_logic_money:
          requires:
            - build_core
      - test_core_business_logic_report:
          requires:
            - build_core
      - test_core_business_logic_outside:
          requires:
            - build_core
      - test_core_business_logic_attendant:
          requires:
            - build_core
      - test_core_business_logic_executor:
          requires:
            - build_core
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - build_core
            - audit_core
            - test_core_generic
            - test_core_language
            - test_core_email
            - test_core_exchange
            - test_core_entities
            - test_core_business_logic_auth
            - test_core_business_logic_law
            - test_core_business_logic_admin
            - test_core_business_logic_clip
            - test_core_business_logic_money
            - test_core_business_logic_report
            - test_core_business_logic_outside
            - test_core_business_logic_attendant
            - test_core_business_logic_executor

  site:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/site/.+$/
                - /^fix/site/.+$/
                - /^dependabot/nuget/site/.+$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_browser:
          requires:
            - test_ci
      - build_core:
          requires:
            - test_ci
      - build_site:
          requires:
            - build_core
      - audit_site:
          requires:
            - build_site
      - test_site:
          requires:
            - build_site
      - test_browser:
          requires:
            - build_site
            - push_docker_browser
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - push_docker_browser
            - build_core
            - build_site
            - audit_site
            - test_site
            - test_browser

  browser:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/browser/.+$/
                - /^fix/browser/.+$/
                - /^dependabot/npm_and_yarn/site/Tests/Browser.+$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_browser:
          requires:
            - test_ci
      - build_core:
          requires:
            - test_ci
      - build_site:
          requires:
            - build_core
      - audit_test_browser:
          requires:
            - test_ci
            - push_docker_browser
      - test_browser:
          requires:
            - build_site
            - audit_test_browser
            - push_docker_browser
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - push_docker_browser
            - build_core
            - build_site
            - audit_test_browser
            - test_browser

  robot:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/robot/.+$/
                - /^fix/robot/.+$/
                - /^dependabot/nuget/robot/.+$/
      - test_ci:
          requires:
            - trufflehog
      - build_core:
          requires:
            - test_ci
      - build_robot:
          requires:
            - build_core
      - audit_robot:
          requires:
            - build_robot
      - check_robot:
          requires:
            - build_robot
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - build_core
            - build_robot
            - audit_robot
            - check_robot

  api:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/api/.+$/
                - /^fix/api/.+$/
                - /^dependabot/nuget/api/.+$/
      - test_ci:
          requires:
            - trufflehog
      - build_core:
          requires:
            - test_ci
      - build_api:
          requires:
            - build_core
      - audit_api:
          requires:
            - build_api
      - test_api:
          requires:
            - build_api
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - build_core
            - build_api
            - audit_api
            - test_api

  android:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/android/.+$/
                - /^fix/android/.+$/
                - /^dependabot/gradle/android/.+$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_android:
          requires:
            - test_ci
      - build_android:
          requires:
            - test_ci
            - push_docker_android
      - audit_android:
          requires:
            - build_android
      - test_android_lib_debug:
          requires:
            - build_android
      - test_android_lib_release:
          requires:
            - build_android
      - test_android_app_debug:
          requires:
            - build_android
      - test_android_app_release:
          requires:
            - build_android
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - push_docker_android
            - build_android
            - audit_android
            - test_android_lib_debug
            - test_android_lib_release
            - test_android_app_debug
            - test_android_app_release

  midna:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/midna/.+$/
                - /^fix/midna/.+$/
                - /^dependabot/pip/midna/.+$/
      - test_ci:
          requires:
            - trufflehog
      - build_midna:
          requires:
            - test_ci
      - audit_midna:
          requires:
            - build_midna
      - test_midna:
          requires:
            - build_midna
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - build_midna
            - audit_midna
            - test_midna

  version_:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/version/.+$/
                - /^fix/version/.+$/
                - /^dependabot/cargo/version/.+$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_rust_github_cli:
          requires:
            - test_ci
      - audit_version_changer:
          requires:
            - test_ci
      - change_version:
          requires:
            - test_ci
            - audit_version_changer
            - push_docker_rust_github_cli
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - push_docker_rust_github_cli
            - audit_version_changer
            - change_version

  db:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/db/.+$/
                - /^fix/db/.+$/
                - /^feature/terms$/
      - test_ci:
          requires:
            - trufflehog
      - push_docker_migrator_ci:
          requires:
            - test_ci
      - export_terms:
          requires:
            - test_ci
            - push_docker_migrator_ci
      - workflow_ran:
          requires:
            - trufflehog
            - test_ci
            - push_docker_migrator_ci
            - export_terms

  ci:
    jobs:
      - trufflehog:
          filters:
            branches:
              only:
                - /^feature/ci/.+$/
                - /^fix/ci/.+$/
      - test_ci:
          requires:
            - trufflehog
      - workflow_ran:
          requires:
            - test_ci
  independabot:
    when:
      equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
    jobs:
      - dependabot_auto_aprove:
          filters:
            branches:
              only:
                - main
                - /^\d+\.\d+\.\d+\.\d+$/
