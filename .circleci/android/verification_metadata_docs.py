from hashlib import sha256
from os.path import dirname, exists, join
from re import search
from urllib.request import urlopen, HTTPError
from xml.etree import ElementTree


GRAY="\033[01;30m"
RED="\033[01;31m"
PURPLE="\033[01;35m"
RESET="\033[m"


class HashGen():
	resource: str
	group: str
	name: str
	version: str

	def __init__(self, resource, group, name, version, resource_type):
		self.resource = resource.rstrip('/')
		self.group = group.replace(".", "/")
		self.name = name
		self.version = version
		self.resource_type = resource_type
		
		self.url = f"{self.resource}/{self.group}/{name}/{version}/{name}-{version}-{resource_type}.jar"

	def sha256(self):
		bytes = self._download()
		if not bytes:
			return None

		hash = sha256()

		for chunk in range(0, len(bytes), 8192):
			hash.update(bytes[chunk:chunk + 8192])

		return hash.hexdigest()

	def _download(self):
		try:
			with urlopen(self.url) as response:
				return response.read()
		except HTTPError as e:
			if e.status == 404:
				return None
			raise e


def print_colored(color, text):
	print(f"{color}{text}{RESET}")


file_path = join(
	dirname(__file__),
	"..", "..", "android", "gradle", "verification-metadata.xml"
)

tree = ElementTree.parse(file_path)
root = tree.getroot()

tag_format = r"({.+}).+"
tag_prefix = search(tag_format, root.tag).group(1)

namespace = tag_prefix.replace("{", "").replace("}", "")
ElementTree.register_namespace("", namespace)

resource_urls = [
    "https://maven.google.com/",
    "https://repo.maven.apache.org/maven2/",
]

components = root.find(f"{tag_prefix}components")


not_existent_path = join(
	dirname(__file__),
	"verification_metadata_resource_not_exists.txt"
)
if exists(not_existent_path):
	with open(not_existent_path, "r") as file:
		not_existent = file.read().splitlines()
else:
	not_existent = []


resource_types = ["javadoc", "sources"]

for component in components:
	group = component.attrib.get("group")
	name = component.attrib.get("name")
	version = component.attrib.get("version")

	for resource_type in resource_types:
		resource = f"{name}-{version}-{resource_type}.jar"

		if resource in not_existent:
			print_colored(GRAY, f"Already marked as not found {resource_type} for {group}:{name}:{version}")
			continue

		resource_exists = any(
			artifact.attrib["name"] == resource
				for artifact in component.findall(f"{tag_prefix}artifact")
		)

		if resource_exists:
			print_colored(PURPLE, f"Already exists {resource_type} for {group}:{name}:{version}")
			continue

		hash = None
		for resource_url in resource_urls:
			hashGen = HashGen(resource_url, group, name, version, resource_type)
			hash = hashGen.sha256()

			if hash:
				artifact = ElementTree.SubElement(component, "artifact", name=resource)
				sha = ElementTree.SubElement(artifact, "sha256")
				sha.attrib["value"] = hash
				sha.attrib["origin"] = "Generated by Resources Script"
				print_colored(RED, f"Added {resource_type} for {group}:{name}:{version} ({resource_url})")
				break

		if not hash:
			not_existent.append(resource)


ElementTree.indent(tree, '   ')
tree.write(file_path, encoding="UTF-8", xml_declaration=True)


with open(file_path, "r") as file:
	content = file.readlines()

content[0] = content[0].replace("'", '"')
content = [line.replace(" />", "/>") for line in content]
content[-1] += "\n"

with open(file_path, "w") as file:
	file.writelines(content)


with open(not_existent_path, "w") as file:
	file.writelines([line + "\n" for line in not_existent])
