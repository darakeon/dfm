from hashlib import sha256
from os.path import dirname, exists, join
from re import search
from urllib.request import urlopen, HTTPError
from xml.etree import ElementTree


GRAY="\033[01;30m"
RED="\033[01;31m"
PURPLE="\033[01;35m"
RESET="\033[m"


class HashGen():
	resource: str
	group: str
	name: str
	version: str

	def __init__(self, resource, group, name, version, artifact):
		self.resource = resource.rstrip('/')
		self.group = group.replace(".", "/")
		self.name = name
		self.version = version
		self.artifact = artifact
		
		self.url = f"{self.resource}/{self.group}/{name}/{version}/{artifact}"

	def sha256(self):
		bytes = self._download()
		if not bytes:
			return None

		hash = sha256()

		for chunk in range(0, len(bytes), 8192):
			hash.update(bytes[chunk:chunk + 8192])

		return hash.hexdigest()

	def _download(self):
		try:
			print(self.url)
			with urlopen(self.url) as response:
				return response.read()
		except HTTPError as e:
			if e.status == 404:
				return None
			raise e


def print_colored(color, text):
	print(f"{color}{text}{RESET}")


failure_path = join(
	dirname(__file__),
	"..", "..", "android", "failure.txt"
)

with open(failure_path) as failure_file:
	failures = failure_file.readlines()

artifact_line = -1
artifacts = []
artifact_pattern = r"    - (.+) \((.+):(.+):(.+)\) from repository (.+)"
for (index, failure) in enumerate(failures):
	if "artifacts failed verification" in failure:
		artifact_line = index

	elif artifact_line >= 0:
		result = search(artifact_pattern, failure)
		if not result:
			break

		artifacts.append(result.groups())


file_path = join(
	dirname(__file__),
	"..", "..", "android", "gradle", "verification-metadata.xml"
)

tree = ElementTree.parse(file_path)
root = tree.getroot()

tag_format = r"({.+}).+"
tag_prefix = search(tag_format, root.tag).group(1)

namespace = tag_prefix.replace("{", "").replace("}", "")
ElementTree.register_namespace("", namespace)

resource_urls = [
    "https://maven.google.com/",
    "https://repo.maven.apache.org/maven2/",
]

components = root.find(f"{tag_prefix}components")


not_existent_path = join(
	dirname(__file__),
	"verification_metadata_libs_not_exists.txt"
)
if exists(not_existent_path):
	with open(not_existent_path, "r") as file:
		not_existent = file.read().splitlines()
else:
	not_existent = []


for artifact in artifacts:
	artifact_name = artifact[0]
	component_group = artifact[1]
	component_name = artifact[2]
	component_version = artifact[3]
	print(artifact)

	hash = None
	for resource_url in resource_urls:
		hashGen = HashGen(resource_url, component_group, component_name, component_version, artifact_name)
		hash = hashGen.sha256()

		if hash:
			component = ElementTree.SubElement(components, "component", group=component_group, name=component_name, version=component_version)
			artifact = ElementTree.SubElement(component, "artifact", name=artifact_name)
			sha = ElementTree.SubElement(artifact, "sha256")
			sha.attrib["value"] = hash
			sha.attrib["origin"] = "Generated by Resources Script"
			print_colored(RED, f"Added {artifact_name} for {component_group}:{component_name}:{component_version} ({resource_url})")
			break


ElementTree.indent(tree, '   ')
tree.write(file_path, encoding="UTF-8", xml_declaration=True)


with open(file_path, "r") as file:
	content = file.readlines()

content[0] = content[0].replace("'", '"')
content = [line.replace(" />", "/>") for line in content]
content[-1] += "\n"

with open(file_path, "w") as file:
	file.writelines(content)


with open(not_existent_path, "w") as file:
	file.writelines([line + "\n" for line in not_existent])
